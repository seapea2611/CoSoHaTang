import { NgModule, ɵɵdefineInjectable, Injectable, ɵɵinject, Injector } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable, BehaviorSubject, of, throwError } from 'rxjs';
import { catchError, switchMap, filter, take, map } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
class AbpModule {
}
AbpModule.ɵfac = function AbpModule_Factory(t) { return new (t || AbpModule)(); };
AbpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AbpModule });
AbpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [],
                exports: []
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class TokenService {
    getToken() {
        return abp.auth.getToken();
    }
    getTokenCookieName() {
        return abp.auth.tokenCookieName;
    }
    clearToken() {
        abp.auth.clearToken();
    }
    setToken(authToken, expireDate) {
        abp.auth.setToken(authToken, expireDate);
    }
    //refresh token
    getRefreshToken() {
        return abp.auth.getRefreshToken();
    }
    getRefreshTokenCookieName() {
        return abp.auth.refreshTokenCookieName;
    }
    clearRefreshToken() {
        abp.auth.clearRefreshToken();
    }
    setRefreshToken(refreshToken, expireDate) {
        abp.auth.setRefreshToken(refreshToken, expireDate);
    }
}
TokenService.ɵfac = function TokenService_Factory(t) { return new (t || TokenService)(); };
TokenService.ɵprov = ɵɵdefineInjectable({ factory: function TokenService_Factory() { return new TokenService(); }, token: TokenService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TokenService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class PermissionCheckerService {
    isGranted(permissionName) {
        return abp.auth.isGranted(permissionName);
    }
}
PermissionCheckerService.ɵfac = function PermissionCheckerService_Factory(t) { return new (t || PermissionCheckerService)(); };
PermissionCheckerService.ɵprov = ɵɵdefineInjectable({ factory: function PermissionCheckerService_Factory() { return new PermissionCheckerService(); }, token: PermissionCheckerService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PermissionCheckerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class FeatureCheckerService {
    get(featureName) {
        return abp.features.get(featureName);
    }
    getValue(featureName) {
        return abp.features.getValue(featureName);
    }
    isEnabled(featureName) {
        return abp.features.isEnabled(featureName);
    }
}
FeatureCheckerService.ɵfac = function FeatureCheckerService_Factory(t) { return new (t || FeatureCheckerService)(); };
FeatureCheckerService.ɵprov = ɵɵdefineInjectable({ factory: function FeatureCheckerService_Factory() { return new FeatureCheckerService(); }, token: FeatureCheckerService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FeatureCheckerService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class LocalizationService {
    get languages() {
        return abp.localization.languages;
    }
    get currentLanguage() {
        return abp.localization.currentLanguage;
    }
    localize(key, sourceName) {
        return abp.localization.localize(key, sourceName);
    }
    getSource(sourceName) {
        return abp.localization.getSource(sourceName);
    }
}
LocalizationService.ɵfac = function LocalizationService_Factory(t) { return new (t || LocalizationService)(); };
LocalizationService.ɵprov = ɵɵdefineInjectable({ factory: function LocalizationService_Factory() { return new LocalizationService(); }, token: LocalizationService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalizationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class LogService {
    debug(logObject) {
        abp.log.debug(logObject);
    }
    info(logObject) {
        abp.log.info(logObject);
    }
    warn(logObject) {
        abp.log.warn(logObject);
    }
    error(logObject) {
        abp.log.error(logObject);
    }
    fatal(logObject) {
        abp.log.fatal(logObject);
    }
}
LogService.ɵfac = function LogService_Factory(t) { return new (t || LogService)(); };
LogService.ɵprov = ɵɵdefineInjectable({ factory: function LogService_Factory() { return new LogService(); }, token: LogService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LogService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class MessageService {
    info(message, title, options) {
        return abp.message.info(message, title, options);
    }
    success(message, title, options) {
        return abp.message.success(message, title, options);
    }
    warn(message, title, options) {
        return abp.message.warn(message, title, options);
    }
    error(message, title, options) {
        return abp.message.error(message, title, options);
    }
    confirm(message, title, callback, options) {
        return abp.message.confirm(message, title, callback, options);
    }
}
MessageService.ɵfac = function MessageService_Factory(t) { return new (t || MessageService)(); };
MessageService.ɵprov = ɵɵdefineInjectable({ factory: function MessageService_Factory() { return new MessageService(); }, token: MessageService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MessageService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class AbpMultiTenancyService {
    get isEnabled() {
        return abp.multiTenancy.isEnabled;
    }
}
AbpMultiTenancyService.ɵfac = function AbpMultiTenancyService_Factory(t) { return new (t || AbpMultiTenancyService)(); };
AbpMultiTenancyService.ɵprov = ɵɵdefineInjectable({ factory: function AbpMultiTenancyService_Factory() { return new AbpMultiTenancyService(); }, token: AbpMultiTenancyService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpMultiTenancyService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class NotifyService {
    info(message, title, options) {
        abp.notify.info(message, title, options);
    }
    success(message, title, options) {
        abp.notify.success(message, title, options);
    }
    warn(message, title, options) {
        abp.notify.warn(message, title, options);
    }
    error(message, title, options) {
        abp.notify.error(message, title, options);
    }
}
NotifyService.ɵfac = function NotifyService_Factory(t) { return new (t || NotifyService)(); };
NotifyService.ɵprov = ɵɵdefineInjectable({ factory: function NotifyService_Factory() { return new NotifyService(); }, token: NotifyService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifyService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class AbpSessionService {
    get userId() {
        return abp.session.userId;
    }
    get tenantId() {
        return abp.session.tenantId;
    }
    get impersonatorUserId() {
        return abp.session.impersonatorUserId;
    }
    get impersonatorTenantId() {
        return abp.session.impersonatorTenantId;
    }
    get multiTenancySide() {
        return abp.session.multiTenancySide;
    }
}
AbpSessionService.ɵfac = function AbpSessionService_Factory(t) { return new (t || AbpSessionService)(); };
AbpSessionService.ɵprov = ɵɵdefineInjectable({ factory: function AbpSessionService_Factory() { return new AbpSessionService(); }, token: AbpSessionService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpSessionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class SettingService {
    get(name) {
        return abp.setting.get(name);
    }
    getBoolean(name) {
        return abp.setting.getBoolean(name);
    }
    getInt(name) {
        return abp.setting.getInt(name);
    }
}
SettingService.ɵfac = function SettingService_Factory(t) { return new (t || SettingService)(); };
SettingService.ɵprov = ɵɵdefineInjectable({ factory: function SettingService_Factory() { return new SettingService(); }, token: SettingService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SettingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class UtilsService {
    getCookieValue(key) {
        return abp.utils.getCookieValue(key);
    }
    setCookieValue(key, value, expireDate, path, domain, attributes) {
        abp.utils.setCookieValue(key, value, expireDate, path, domain, attributes);
    }
    deleteCookie(key, path) {
        abp.utils.deleteCookie(key, path);
    }
}
UtilsService.ɵfac = function UtilsService_Factory(t) { return new (t || UtilsService)(); };
UtilsService.ɵprov = ɵɵdefineInjectable({ factory: function UtilsService_Factory() { return new UtilsService(); }, token: UtilsService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(UtilsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();

///<reference path="../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts"/>
class AbpUserConfigurationService {
    constructor(_http) {
        this._http = _http;
    }
    initialize() {
        this._http.get('/AbpUserConfiguration/GetAll')
            .subscribe(result => {
            jQuery.extend(true, abp, JSON.parse(JSON.stringify(result)));
        });
    }
}
AbpUserConfigurationService.ɵfac = function AbpUserConfigurationService_Factory(t) { return new (t || AbpUserConfigurationService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };
AbpUserConfigurationService.ɵprov = ɵɵdefineInjectable({ factory: function AbpUserConfigurationService_Factory() { return new AbpUserConfigurationService(ɵɵinject(HttpClient)); }, token: AbpUserConfigurationService, providedIn: "root" });
AbpUserConfigurationService.ctorParameters = () => [
    { type: HttpClient }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpUserConfigurationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();

class AbpHttpConfigurationService {
    constructor(_messageService, _logService) {
        this._messageService = _messageService;
        this._logService = _logService;
        this.defaultError = {
            message: 'An error has occurred!',
            details: 'Error details were not sent by server.'
        };
        this.defaultError401 = {
            message: 'You are not authenticated!',
            details: 'You should be authenticated (sign in) in order to perform this operation.'
        };
        this.defaultError403 = {
            message: 'You are not authorized!',
            details: 'You are not allowed to perform this operation.'
        };
        this.defaultError404 = {
            message: 'Resource not found!',
            details: 'The resource requested could not be found on the server.'
        };
    }
    logError(error) {
        this._logService.error(error);
    }
    showError(error) {
        if (error.details) {
            return this._messageService.error(error.details, error.message || this.defaultError.message);
        }
        else {
            return this._messageService.error(error.message || this.defaultError.message);
        }
    }
    handleTargetUrl(targetUrl) {
        if (!targetUrl) {
            location.href = '/';
        }
        else {
            location.href = targetUrl;
        }
    }
    handleUnAuthorizedRequest(messagePromise, targetUrl) {
        const self = this;
        if (messagePromise) {
            messagePromise.done(() => {
                this.handleTargetUrl(targetUrl || '/');
            });
        }
        else {
            self.handleTargetUrl(targetUrl || '/');
        }
    }
    handleNonAbpErrorResponse(response) {
        const self = this;
        switch (response.status) {
            case 401:
                self.handleUnAuthorizedRequest(self.showError(self.defaultError401), '/');
                break;
            case 403:
                self.showError(self.defaultError403);
                break;
            case 404:
                self.showError(self.defaultError404);
                break;
            default:
                self.showError(self.defaultError);
                break;
        }
    }
    handleAbpResponse(response, ajaxResponse) {
        var newResponse;
        if (ajaxResponse.success) {
            newResponse = response.clone({
                body: ajaxResponse.result
            });
            if (ajaxResponse.targetUrl) {
                this.handleTargetUrl(ajaxResponse.targetUrl);
                ;
            }
        }
        else {
            newResponse = response.clone({
                body: ajaxResponse.result
            });
            if (!ajaxResponse.error) {
                ajaxResponse.error = this.defaultError;
            }
            this.logError(ajaxResponse.error);
            this.showError(ajaxResponse.error);
            if (response.status === 401) {
                this.handleUnAuthorizedRequest(null, ajaxResponse.targetUrl);
            }
        }
        return newResponse;
    }
    getAbpAjaxResponseOrNull(response) {
        if (!response || !response.headers) {
            return null;
        }
        var contentType = response.headers.get('Content-Type');
        if (!contentType) {
            this._logService.warn('Content-Type is not sent!');
            return null;
        }
        if (contentType.indexOf("application/json") < 0) {
            this._logService.warn('Content-Type is not application/json: ' + contentType);
            return null;
        }
        var responseObj = JSON.parse(JSON.stringify(response.body));
        if (!responseObj.__abp) {
            return null;
        }
        return responseObj;
    }
    handleResponse(response) {
        var ajaxResponse = this.getAbpAjaxResponseOrNull(response);
        if (ajaxResponse == null) {
            return response;
        }
        return this.handleAbpResponse(response, ajaxResponse);
    }
    blobToText(blob) {
        return new Observable((observer) => {
            if (!blob) {
                observer.next("");
                observer.complete();
            }
            else {
                let reader = new FileReader();
                reader.onload = function () {
                    observer.next(this.result);
                    observer.complete();
                };
                reader.readAsText(blob);
            }
        });
    }
}
AbpHttpConfigurationService.ɵfac = function AbpHttpConfigurationService_Factory(t) { return new (t || AbpHttpConfigurationService)(ɵngcc0.ɵɵinject(MessageService), ɵngcc0.ɵɵinject(LogService)); };
AbpHttpConfigurationService.ɵprov = ɵɵdefineInjectable({ factory: function AbpHttpConfigurationService_Factory() { return new AbpHttpConfigurationService(ɵɵinject(MessageService), ɵɵinject(LogService)); }, token: AbpHttpConfigurationService, providedIn: "root" });
AbpHttpConfigurationService.ctorParameters = () => [
    { type: MessageService },
    { type: LogService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpHttpConfigurationService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: MessageService }, { type: LogService }]; }, null); })();

class RefreshTokenService {
}
RefreshTokenService.ɵfac = function RefreshTokenService_Factory(t) { return new (t || RefreshTokenService)(); };
RefreshTokenService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: RefreshTokenService, factory: RefreshTokenService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RefreshTokenService, [{
        type: Injectable
    }], null, null); })();

class AbpHttpInterceptor {
    constructor(configuration, _injector) {
        this._injector = _injector;
        this._tokenService = new TokenService();
        this._utilsService = new UtilsService();
        this._logService = new LogService();
        this.isRefreshing = false;
        this.refreshTokenSubject = new BehaviorSubject(null);
        this.configuration = configuration;
    }
    intercept(request, next) {
        var modifiedRequest = this.normalizeRequestHeaders(request);
        return next.handle(modifiedRequest)
            .pipe(catchError(error => {
            if (error instanceof HttpErrorResponse && error.status === 401) {
                return this.tryAuthWithRefreshToken(request, next, error);
            }
            else {
                return this.handleErrorResponse(error);
            }
        }), switchMap((event) => {
            return this.handleSuccessResponse(event);
        }));
    }
    tryGetRefreshTokenService() {
        var _refreshTokenService = this._injector.get(RefreshTokenService, null);
        if (_refreshTokenService) {
            return _refreshTokenService.tryAuthWithRefreshToken();
        }
        return of(false);
    }
    tryAuthWithRefreshToken(request, next, error) {
        if (!this.isRefreshing) {
            this.isRefreshing = true;
            this.refreshTokenSubject.next(null);
            return this.tryGetRefreshTokenService().pipe(switchMap((authResult) => {
                this.isRefreshing = false;
                if (authResult) {
                    this.refreshTokenSubject.next(authResult);
                    let modifiedRequest = this.normalizeRequestHeaders(request);
                    return next.handle(modifiedRequest);
                }
                else {
                    return this.handleErrorResponse(error);
                }
            }));
        }
        else {
            return this.refreshTokenSubject.pipe(filter(authResult => authResult != null), take(1), switchMap(authResult => {
                let modifiedRequest = this.normalizeRequestHeaders(request);
                return next.handle(modifiedRequest);
            }));
        }
    }
    normalizeRequestHeaders(request) {
        var modifiedHeaders = new HttpHeaders();
        modifiedHeaders = request.headers.set("Pragma", "no-cache")
            .set("Cache-Control", "no-cache")
            .set("Expires", "Sat, 01 Jan 2000 00:00:00 GMT");
        modifiedHeaders = this.addXRequestedWithHeader(modifiedHeaders);
        modifiedHeaders = this.addAuthorizationHeaders(modifiedHeaders);
        modifiedHeaders = this.addAspNetCoreCultureHeader(modifiedHeaders);
        modifiedHeaders = this.addAcceptLanguageHeader(modifiedHeaders);
        modifiedHeaders = this.addTenantIdHeader(modifiedHeaders);
        return request.clone({
            headers: modifiedHeaders
        });
    }
    addXRequestedWithHeader(headers) {
        if (headers) {
            headers = headers.set('X-Requested-With', 'XMLHttpRequest');
        }
        return headers;
    }
    addAspNetCoreCultureHeader(headers) {
        let cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && headers && !headers.has('.AspNetCore.Culture')) {
            headers = headers.set('.AspNetCore.Culture', cookieLangValue);
        }
        return headers;
    }
    addAcceptLanguageHeader(headers) {
        let cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && headers && !headers.has('Accept-Language')) {
            headers = headers.set('Accept-Language', cookieLangValue);
        }
        return headers;
    }
    addTenantIdHeader(headers) {
        let cookieTenantIdValue = this._utilsService.getCookieValue(abp.multiTenancy.tenantIdCookieName);
        if (cookieTenantIdValue && headers && !headers.has(abp.multiTenancy.tenantIdCookieName)) {
            headers = headers.set(abp.multiTenancy.tenantIdCookieName, cookieTenantIdValue);
        }
        return headers;
    }
    addAuthorizationHeaders(headers) {
        let authorizationHeaders = headers ? headers.getAll('Authorization') : null;
        if (!authorizationHeaders) {
            authorizationHeaders = [];
        }
        if (!this.itemExists(authorizationHeaders, (item) => item.indexOf('Bearer ') == 0)) {
            let token = this._tokenService.getToken();
            if (headers && token) {
                headers = headers.set('Authorization', 'Bearer ' + token);
            }
        }
        return headers;
    }
    handleSuccessResponse(event) {
        var self = this;
        if (event instanceof HttpResponse) {
            if (event.body instanceof Blob && event.body.type && event.body.type.indexOf("application/json") >= 0) {
                return self.configuration.blobToText(event.body).pipe(map(json => {
                    const responseBody = json == "null" ? {} : JSON.parse(json);
                    var modifiedResponse = self.configuration.handleResponse(event.clone({
                        body: responseBody
                    }));
                    return modifiedResponse.clone({
                        body: new Blob([JSON.stringify(modifiedResponse.body)], { type: 'application/json' })
                    });
                }));
            }
        }
        return of(event);
    }
    handleErrorResponse(error) {
        if (!(error.error instanceof Blob)) {
            return throwError(error);
        }
        return this.configuration.blobToText(error.error).pipe(switchMap((json) => {
            const errorBody = (json == "" || json == "null") ? {} : JSON.parse(json);
            const errorResponse = new HttpResponse({
                headers: error.headers,
                status: error.status,
                body: errorBody
            });
            var ajaxResponse = this.configuration.getAbpAjaxResponseOrNull(errorResponse);
            if (ajaxResponse != null) {
                this.configuration.handleAbpResponse(errorResponse, ajaxResponse);
            }
            else {
                this.configuration.handleNonAbpErrorResponse(errorResponse);
            }
            return throwError(error);
        }));
    }
    itemExists(items, predicate) {
        for (let i = 0; i < items.length; i++) {
            if (predicate(items[i])) {
                return true;
            }
        }
        return false;
    }
}
AbpHttpInterceptor.ɵfac = function AbpHttpInterceptor_Factory(t) { return new (t || AbpHttpInterceptor)(ɵngcc0.ɵɵinject(AbpHttpConfigurationService), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };
AbpHttpInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AbpHttpInterceptor, factory: AbpHttpInterceptor.ɵfac });
AbpHttpInterceptor.ctorParameters = () => [
    { type: AbpHttpConfigurationService },
    { type: Injector }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbpHttpInterceptor, [{
        type: Injectable
    }], function () { return [{ type: AbpHttpConfigurationService }, { type: ɵngcc0.Injector }]; }, null); })();

/*
 * Public API Surface of abp-ng2-module
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AbpHttpConfigurationService, AbpHttpInterceptor, AbpModule, AbpMultiTenancyService, AbpSessionService, AbpUserConfigurationService, FeatureCheckerService, LocalizationService, LogService, MessageService, NotifyService, PermissionCheckerService, RefreshTokenService, SettingService, TokenService, UtilsService };

//# sourceMappingURL=abp-ng2-module.js.map