{"version":3,"sources":["../../projects/abp-ng2-module/src/lib/abp.module.ts","../esm2015/projects/abp-ng2-module/src/lib/services/auth/token.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/auth/permission-checker.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/features/feature-checker.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/localization/localization.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/log/log.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/message/message.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/multi-tenancy/abp-multi-tenancy.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/notify/notify.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/session/abp-session.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/settings/setting.service.ts","../esm2015/projects/abp-ng2-module/src/lib/services/utils/utils.service.ts","../projects/abp-ng2-module/src/lib/services/abp-user-configuration.service.ts","../projects/abp-ng2-module/src/lib/interceptors/abp-http-configuration.service.ts","../projects/abp-ng2-module/src/lib/interceptors/refresh-token.service.ts","../projects/abp-ng2-module/src/lib/interceptors/abpHttpInterceptor.ts"],"names":["NgModule","args","declarations","imports","exports","TokenService","prototype","getToken","abp","auth","getTokenCookieName","tokenCookieName","clearToken","setToken","authToken","expireDate","getRefreshToken","getRefreshTokenCookieName","refreshTokenCookieName","clearRefreshToken","setRefreshToken","refreshToken","Injectable","providedIn","PermissionCheckerService","isGranted","permissionName","FeatureCheckerService","get","featureName","features","getValue","isEnabled","LocalizationService","Object","defineProperty","localization","languages","currentLanguage","localize","key","sourceName","getSource","LogService","debug","logObject","log","info","warn","error","fatal","MessageService","message","title","options","success","confirm","callback","AbpMultiTenancyService","multiTenancy","NotifyService","notify","AbpSessionService","session","userId","tenantId","impersonatorUserId","impersonatorTenantId","multiTenancySide","SettingService","name","setting","getBoolean","getInt","UtilsService","getCookieValue","utils","setCookieValue","value","path","domain","attributes","deleteCookie","AbpUserConfigurationService","_http","this","initialize","subscribe","result","jQuery","extend","JSON","parse","stringify","HttpClient","AbpHttpConfigurationService","_messageService","_logService","defaultError","details","defaultError401","defaultError403","defaultError404","logError","showError","handleTargetUrl","targetUrl","location","href","handleUnAuthorizedRequest","messagePromise","_this","done","handleNonAbpErrorResponse","response","self","status","handleAbpResponse","ajaxResponse","newResponse","clone","body","getAbpAjaxResponseOrNull","headers","contentType","indexOf","responseObj","__abp","handleResponse","blobToText","blob","Observable","observer","reader","FileReader","onload","next","complete","readAsText","AbpHttpInterceptor","configuration","_injector","_tokenService","_utilsService","isRefreshing","refreshTokenSubject","BehaviorSubject","intercept","request","modifiedRequest","normalizeRequestHeaders","handle","pipe","catchError","HttpErrorResponse","tryAuthWithRefreshToken","handleErrorResponse","switchMap","event","handleSuccessResponse","tryGetRefreshTokenService","_refreshTokenService","RefreshTokenService","of","filter","authResult","take","modifiedHeaders","HttpHeaders","set","addXRequestedWithHeader","addAuthorizationHeaders","addAspNetCoreCultureHeader","addAcceptLanguageHeader","addTenantIdHeader","cookieLangValue","has","cookieTenantIdValue","tenantIdCookieName","authorizationHeaders","getAll","itemExists","item","token","HttpResponse","Blob","type","map","json","responseBody","modifiedResponse","errorBody","errorResponse","throwError","items","predicate","i","length","Injector"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class AbpModule { }\n","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TokenService {\r\n\r\n    getToken(): string {\r\n        return abp.auth.getToken();\r\n    }\r\n\r\n    getTokenCookieName(): string {\r\n        return abp.auth.tokenCookieName;\r\n    }\r\n\r\n    clearToken(): void {\r\n        abp.auth.clearToken();\r\n    }\r\n\r\n    setToken(authToken: string, expireDate?: Date): void {\r\n        abp.auth.setToken(authToken, expireDate);\r\n    }\r\n\r\n    //refresh token\r\n    getRefreshToken(): string {\r\n        return abp.auth.getRefreshToken();\r\n    }\r\n\r\n    getRefreshTokenCookieName(): string {\r\n        return abp.auth.refreshTokenCookieName;\r\n    }\r\n\r\n    clearRefreshToken(): void {\r\n        abp.auth.clearRefreshToken();\r\n    }\r\n\r\n    setRefreshToken(refreshToken: string, expireDate?: Date): void {\r\n        abp.auth.setRefreshToken(refreshToken, expireDate);\r\n    }\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PermissionCheckerService {\r\n\r\n    isGranted(permissionName: string): boolean {\r\n        return abp.auth.isGranted(permissionName);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FeatureCheckerService {\r\n\r\n    get(featureName: string): abp.features.IFeature {\r\n        return abp.features.get(featureName);\r\n    }\r\n\r\n    getValue(featureName: string): string {\r\n        return abp.features.getValue(featureName);\r\n    }\r\n\r\n    isEnabled(featureName: string): boolean {\r\n        return abp.features.isEnabled(featureName);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LocalizationService {\r\n\r\n    get languages(): abp.localization.ILanguageInfo[] {\r\n        return abp.localization.languages;\r\n    }\r\n\r\n    get currentLanguage(): abp.localization.ILanguageInfo {\r\n        return abp.localization.currentLanguage;\r\n    }\r\n\r\n    localize(key: string, sourceName: string): string {\r\n        return abp.localization.localize(key, sourceName);\r\n    }\r\n    \r\n    getSource(sourceName: string): (...key: string[]) => string {\r\n        return abp.localization.getSource(sourceName);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LogService {\r\n\r\n    debug(logObject?: any): void {\r\n        abp.log.debug(logObject);\r\n    }\r\n\r\n    info(logObject?: any): void {\r\n        abp.log.info(logObject);\r\n    }\r\n\r\n    warn(logObject?: any): void {\r\n        abp.log.warn(logObject);\r\n    }\r\n\r\n    error(logObject?: any): void {\r\n        abp.log.error(logObject);\r\n    }\r\n\r\n    fatal(logObject?: any): void {\r\n        abp.log.fatal(logObject);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MessageService {\r\n\r\n    info(message: string, title?: string, options?: any): any {\r\n        return abp.message.info(message, title, options);\r\n    }\r\n\r\n    success(message: string, title?: string, options?: any): any {\r\n        return abp.message.success(message, title, options);\r\n    }\r\n\r\n    warn(message: string, title?: string, options?: any): any {\r\n        return abp.message.warn(message, title, options);\r\n    }\r\n\r\n    error(message: string, title?: string, options?: any): any {\r\n        return abp.message.error(message, title, options);\r\n    }\r\n\r\n    confirm(message: string, title?: string, callback?: (result: boolean) => void, options?: any): any {\r\n        return abp.message.confirm(message, title, callback, options);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AbpMultiTenancyService {\r\n\r\n    get isEnabled(): boolean {\r\n        return abp.multiTenancy.isEnabled;\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NotifyService {\r\n\r\n    info(message: string, title?: string, options?: any): void {\r\n        abp.notify.info(message, title, options);\r\n    }\r\n\r\n    success(message: string, title?: string, options?: any): void {\r\n        abp.notify.success(message, title, options);\r\n    }\r\n\r\n    warn(message: string, title?: string, options?: any): void {\r\n        abp.notify.warn(message, title, options);\r\n    }\r\n\r\n    error(message: string, title?: string, options?: any): void {\r\n        abp.notify.error(message, title, options);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AbpSessionService {\r\n\r\n    get userId(): number | undefined {\r\n        return abp.session.userId;\r\n    }\r\n\r\n    get tenantId(): number | undefined {\r\n        return abp.session.tenantId;\r\n    }\r\n\r\n    get impersonatorUserId(): number | undefined {\r\n        return abp.session.impersonatorUserId;\r\n    }\r\n\r\n    get impersonatorTenantId(): number | undefined {\r\n        return abp.session.impersonatorTenantId;\r\n    }\r\n\r\n    get multiTenancySide(): abp.multiTenancy.sides {\r\n        return abp.session.multiTenancySide;\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SettingService {\r\n\r\n    get(name: string): string {\r\n        return abp.setting.get(name);\r\n    }\r\n\r\n    getBoolean(name: string): boolean {\r\n        return abp.setting.getBoolean(name);\r\n    }\r\n    \r\n    getInt(name: string): number {\r\n        return abp.setting.getInt(name);\r\n    }\r\n\r\n}","///<reference path=\"../../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport {Injectable} from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtilsService {\r\n  getCookieValue(key: string): string {\r\n    return abp.utils.getCookieValue(key);\r\n  }\r\n\r\n  setCookieValue(key: string, value: string, expireDate?: Date, path?: string, domain?: string, attributes?: any): void {\r\n    abp.utils.setCookieValue(key, value, expireDate, path, domain, attributes);\r\n  }\r\n\r\n  deleteCookie(key: string, path?: string): void {\r\n    abp.utils.deleteCookie(key, path);\r\n  }\r\n}\r\n","///<reference path=\"../../../../../node_modules/abp-web-resources/Abp/Framework/scripts/abp.d.ts\"/>\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\ndeclare var jQuery: any;\r\ndeclare var abp: any;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AbpUserConfigurationService {\r\n\r\n    constructor(private _http: HttpClient) {\r\n        \r\n    }\r\n\r\n    initialize(): void {\r\n        this._http.get('/AbpUserConfiguration/GetAll')\r\n            .subscribe(result => {\r\n                jQuery.extend(true, abp, JSON.parse(JSON.stringify(result)));\r\n            });\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { MessageService } from '../services/message/message.service';\r\nimport { LogService } from '../services/log/log.service';\r\nimport { HttpResponse } from '@angular/common/http';\r\nimport { IErrorInfo, IAjaxResponse } from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AbpHttpConfigurationService {\r\n\r\n    constructor(\r\n        private _messageService: MessageService,\r\n        private _logService: LogService) {\r\n    }\r\n\r\n    defaultError = <IErrorInfo>{\r\n        message: 'An error has occurred!',\r\n        details: 'Error details were not sent by server.'\r\n    };\r\n\r\n    defaultError401 = <IErrorInfo>{\r\n        message: 'You are not authenticated!',\r\n        details: 'You should be authenticated (sign in) in order to perform this operation.'\r\n    };\r\n\r\n    defaultError403 = <IErrorInfo>{\r\n        message: 'You are not authorized!',\r\n        details: 'You are not allowed to perform this operation.'\r\n    };\r\n\r\n    defaultError404 = <IErrorInfo>{\r\n        message: 'Resource not found!',\r\n        details: 'The resource requested could not be found on the server.'\r\n    };\r\n\r\n    logError(error: IErrorInfo): void {\r\n        this._logService.error(error);\r\n    }\r\n\r\n    showError(error: IErrorInfo): any {\r\n        if (error.details) {\r\n            return this._messageService.error(error.details, error.message || this.defaultError.message);\r\n        } else {\r\n            return this._messageService.error(error.message || this.defaultError.message);\r\n        }\r\n    }\r\n\r\n    handleTargetUrl(targetUrl: string): void {\r\n        if (!targetUrl) {\r\n            location.href = '/';\r\n        } else {\r\n            location.href = targetUrl;\r\n        }\r\n    }\r\n\r\n    handleUnAuthorizedRequest(messagePromise: any, targetUrl?: string) {\r\n        const self = this;\r\n\r\n        if (messagePromise) {\r\n            messagePromise.done(() => {\r\n                this.handleTargetUrl(targetUrl || '/');\r\n            });\r\n        } else {\r\n            self.handleTargetUrl(targetUrl || '/');\r\n        }\r\n    }\r\n\r\n    handleNonAbpErrorResponse(response: HttpResponse<any>) {\r\n        const self = this;\r\n\r\n        switch (response.status) {\r\n            case 401:\r\n                self.handleUnAuthorizedRequest(\r\n                    self.showError(self.defaultError401),\r\n                    '/'\r\n                );\r\n                break;\r\n            case 403:\r\n                self.showError(self.defaultError403);\r\n                break;\r\n            case 404:\r\n                self.showError(self.defaultError404);\r\n                break;\r\n            default:\r\n                self.showError(self.defaultError);\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleAbpResponse(response: HttpResponse<any>, ajaxResponse: IAjaxResponse): HttpResponse<any> {\r\n        var newResponse: HttpResponse<any>;\r\n\r\n        if (ajaxResponse.success) {\r\n\r\n            newResponse = response.clone({\r\n                body: ajaxResponse.result\r\n            });\r\n\r\n            if (ajaxResponse.targetUrl) {\r\n                this.handleTargetUrl(ajaxResponse.targetUrl);;\r\n            }\r\n        } else {\r\n\r\n            newResponse = response.clone({\r\n                body: ajaxResponse.result\r\n            });\r\n\r\n            if (!ajaxResponse.error) {\r\n                ajaxResponse.error = this.defaultError;\r\n            }\r\n\r\n            this.logError(ajaxResponse.error);\r\n            this.showError(ajaxResponse.error);\r\n\r\n            if (response.status === 401) {\r\n                this.handleUnAuthorizedRequest(null, ajaxResponse.targetUrl);\r\n            }\r\n        }\r\n\r\n        return newResponse;\r\n    }\r\n\r\n    getAbpAjaxResponseOrNull(response: HttpResponse<any>): IAjaxResponse | null {\r\n        if (!response || !response.headers) {\r\n            return null;\r\n        }\r\n\r\n        var contentType = response.headers.get('Content-Type');\r\n        if (!contentType) {\r\n            this._logService.warn('Content-Type is not sent!');\r\n            return null;\r\n        }\r\n\r\n        if (contentType.indexOf(\"application/json\") < 0) {\r\n            this._logService.warn('Content-Type is not application/json: ' + contentType);\r\n            return null;\r\n        }\r\n\r\n        var responseObj = JSON.parse(JSON.stringify(response.body));\r\n        if (!responseObj.__abp) {\r\n            return null;\r\n        }\r\n\r\n        return responseObj as IAjaxResponse;\r\n    }\r\n\r\n    handleResponse(response: HttpResponse<any>): HttpResponse<any> {\r\n        var ajaxResponse = this.getAbpAjaxResponseOrNull(response);\r\n        if (ajaxResponse == null) {\r\n            return response;\r\n        }\r\n\r\n        return this.handleAbpResponse(response, ajaxResponse);\r\n    }\r\n\r\n    blobToText(blob: any): Observable<string> {\r\n        return new Observable<string>((observer: any) => {\r\n            if (!blob) {\r\n                observer.next(\"\");\r\n                observer.complete();\r\n            } else {\r\n                let reader = new FileReader();\r\n                reader.onload = function () {\r\n                    observer.next(this.result);\r\n                    observer.complete();\r\n                }\r\n                reader.readAsText(blob);\r\n            }\r\n        });\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport abstract class RefreshTokenService {\r\n    /**\r\n     * Try to authenticate with refresh token and return if auth succeed\r\n     */\r\n    abstract tryAuthWithRefreshToken(): Observable<boolean>;\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { LogService } from '../services/log/log.service';\r\nimport { TokenService } from '../services/auth/token.service';\r\nimport { UtilsService } from '../services/utils/utils.service';\r\nimport { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { switchMap, filter, take, catchError, tap, map } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { AbpHttpConfigurationService } from './abp-http-configuration.service'\r\nimport { RefreshTokenService } from './refresh-token.service'\r\ndeclare const abp: any;\r\n\r\n@Injectable()\r\nexport class AbpHttpInterceptor implements HttpInterceptor {\r\n\r\n    protected configuration: AbpHttpConfigurationService;\r\n    private _tokenService: TokenService = new TokenService();\r\n    private _utilsService: UtilsService = new UtilsService();\r\n    private _logService: LogService = new LogService();\r\n\r\n    constructor(configuration: AbpHttpConfigurationService,\r\n        private _injector: Injector) {\r\n        this.configuration = configuration;\r\n    }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        var modifiedRequest = this.normalizeRequestHeaders(request);\r\n        return next.handle(modifiedRequest)\r\n            .pipe(\r\n                catchError(error => {\r\n                    if (error instanceof HttpErrorResponse && error.status === 401) {\r\n                        return this.tryAuthWithRefreshToken(request, next, error);\r\n                    } else {\r\n                        return this.handleErrorResponse(error);\r\n                    }\r\n                }),\r\n                switchMap((event) => {\r\n                    return this.handleSuccessResponse(event);\r\n                })\r\n            );\r\n    }\r\n\r\n    protected tryGetRefreshTokenService(): Observable<boolean> {\r\n        var _refreshTokenService = this._injector.get(RefreshTokenService, null);\r\n\r\n        if (_refreshTokenService) {\r\n            return _refreshTokenService.tryAuthWithRefreshToken();\r\n        }\r\n        return of(false);\r\n    }\r\n\r\n    private isRefreshing = false;\r\n    private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n    private tryAuthWithRefreshToken(request: HttpRequest<any>, next: HttpHandler, error: any) {\r\n        if (!this.isRefreshing) {\r\n            this.isRefreshing = true;\r\n            this.refreshTokenSubject.next(null);\r\n\r\n            return this.tryGetRefreshTokenService().pipe(\r\n                switchMap((authResult: boolean) => {\r\n                    this.isRefreshing = false;\r\n                    if (authResult) {\r\n                        this.refreshTokenSubject.next(authResult);\r\n                        let modifiedRequest = this.normalizeRequestHeaders(request);\r\n                        return next.handle(modifiedRequest);\r\n                    } else {\r\n                        return this.handleErrorResponse(error);\r\n                    }\r\n                }));\r\n        } else {\r\n            return this.refreshTokenSubject.pipe(\r\n                filter(authResult => authResult != null),\r\n                take(1),\r\n                switchMap(authResult => {\r\n                    let modifiedRequest = this.normalizeRequestHeaders(request);\r\n                    return next.handle(modifiedRequest);\r\n                }));\r\n        }\r\n    }\r\n\r\n    protected normalizeRequestHeaders(request: HttpRequest<any>): HttpRequest<any> {\r\n        var modifiedHeaders = new HttpHeaders();\r\n        modifiedHeaders = request.headers.set(\"Pragma\", \"no-cache\")\r\n            .set(\"Cache-Control\", \"no-cache\")\r\n            .set(\"Expires\", \"Sat, 01 Jan 2000 00:00:00 GMT\");\r\n\r\n        modifiedHeaders = this.addXRequestedWithHeader(modifiedHeaders);\r\n        modifiedHeaders = this.addAuthorizationHeaders(modifiedHeaders);\r\n        modifiedHeaders = this.addAspNetCoreCultureHeader(modifiedHeaders);\r\n        modifiedHeaders = this.addAcceptLanguageHeader(modifiedHeaders);\r\n        modifiedHeaders = this.addTenantIdHeader(modifiedHeaders);\r\n\r\n        return request.clone({\r\n            headers: modifiedHeaders\r\n        });\r\n    }\r\n\r\n    protected addXRequestedWithHeader(headers: HttpHeaders): HttpHeaders {\r\n        if (headers) {\r\n            headers = headers.set('X-Requested-With', 'XMLHttpRequest');\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected addAspNetCoreCultureHeader(headers: HttpHeaders): HttpHeaders {\r\n        let cookieLangValue = this._utilsService.getCookieValue(\"Abp.Localization.CultureName\");\r\n        if (cookieLangValue && headers && !headers.has('.AspNetCore.Culture')) {\r\n            headers = headers.set('.AspNetCore.Culture', cookieLangValue);\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected addAcceptLanguageHeader(headers: HttpHeaders): HttpHeaders {\r\n        let cookieLangValue = this._utilsService.getCookieValue(\"Abp.Localization.CultureName\");\r\n        if (cookieLangValue && headers && !headers.has('Accept-Language')) {\r\n            headers = headers.set('Accept-Language', cookieLangValue);\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected addTenantIdHeader(headers: HttpHeaders): HttpHeaders {\r\n        let cookieTenantIdValue = this._utilsService.getCookieValue(abp.multiTenancy.tenantIdCookieName);\r\n        if (cookieTenantIdValue && headers && !headers.has(abp.multiTenancy.tenantIdCookieName)) {\r\n            headers = headers.set(abp.multiTenancy.tenantIdCookieName, cookieTenantIdValue);\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected addAuthorizationHeaders(headers: HttpHeaders): HttpHeaders {\r\n        let authorizationHeaders = headers ? headers.getAll('Authorization') : null;\r\n        if (!authorizationHeaders) {\r\n            authorizationHeaders = [];\r\n        }\r\n\r\n        if (!this.itemExists(authorizationHeaders, (item: string) => item.indexOf('Bearer ') == 0)) {\r\n            let token = this._tokenService.getToken();\r\n            if (headers && token) {\r\n                headers = headers.set('Authorization', 'Bearer ' + token);\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    protected handleSuccessResponse(event: HttpEvent<any>): Observable<HttpEvent<any>> {\r\n        var self = this;\r\n\r\n        if (event instanceof HttpResponse) {\r\n            if (event.body instanceof Blob && event.body.type && event.body.type.indexOf(\"application/json\") >= 0) {\r\n                return self.configuration.blobToText(event.body).pipe(\r\n                    map(\r\n                        json => {\r\n                            const responseBody = json == \"null\" ? {} : JSON.parse(json);\r\n\r\n                            var modifiedResponse = self.configuration.handleResponse(event.clone({\r\n                                body: responseBody\r\n                            }));\r\n\r\n                            return modifiedResponse.clone({\r\n                                body: new Blob([JSON.stringify(modifiedResponse.body)], { type: 'application/json' })\r\n                            });\r\n                        })\r\n                );\r\n            }\r\n        }\r\n        return of(event);\r\n    }\r\n\r\n    protected handleErrorResponse(error: any): Observable<never> {\r\n        if (!(error.error instanceof Blob)) {\r\n            return throwError(error);\r\n        }\r\n\r\n        return this.configuration.blobToText(error.error).pipe(\r\n            switchMap((json) => {\r\n                const errorBody = (json == \"\" || json == \"null\") ? {} : JSON.parse(json);\r\n                const errorResponse = new HttpResponse({\r\n                    headers: error.headers,\r\n                    status: error.status,\r\n                    body: errorBody\r\n                });\r\n\r\n                var ajaxResponse = this.configuration.getAbpAjaxResponseOrNull(errorResponse);\r\n\r\n                if (ajaxResponse != null) {\r\n                    this.configuration.handleAbpResponse(errorResponse, ajaxResponse);\r\n                } else {\r\n                    this.configuration.handleNonAbpErrorResponse(errorResponse);\r\n                }\r\n\r\n                return throwError(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private itemExists<T>(items: T[], predicate: (item: T) => boolean): boolean {\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (predicate(items[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]}