import { Injectable, Injector } from '@angular/core';
import { of, BehaviorSubject } from 'rxjs';
import { LogService } from '../services/log/log.service';
import { TokenService } from '../services/auth/token.service';
import { UtilsService } from '../services/utils/utils.service';
import { HttpResponse, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { switchMap, filter, take, catchError, map } from 'rxjs/operators';
import { throwError } from 'rxjs';
import { AbpHttpConfigurationService } from './abp-http-configuration.service';
import { RefreshTokenService } from './refresh-token.service';
export class AbpHttpInterceptor {
    constructor(configuration, _injector) {
        this._injector = _injector;
        this._tokenService = new TokenService();
        this._utilsService = new UtilsService();
        this._logService = new LogService();
        this.isRefreshing = false;
        this.refreshTokenSubject = new BehaviorSubject(null);
        this.configuration = configuration;
    }
    intercept(request, next) {
        var modifiedRequest = this.normalizeRequestHeaders(request);
        return next.handle(modifiedRequest)
            .pipe(catchError(error => {
            if (error instanceof HttpErrorResponse && error.status === 401) {
                return this.tryAuthWithRefreshToken(request, next, error);
            }
            else {
                return this.handleErrorResponse(error);
            }
        }), switchMap((event) => {
            return this.handleSuccessResponse(event);
        }));
    }
    tryGetRefreshTokenService() {
        var _refreshTokenService = this._injector.get(RefreshTokenService, null);
        if (_refreshTokenService) {
            return _refreshTokenService.tryAuthWithRefreshToken();
        }
        return of(false);
    }
    tryAuthWithRefreshToken(request, next, error) {
        if (!this.isRefreshing) {
            this.isRefreshing = true;
            this.refreshTokenSubject.next(null);
            return this.tryGetRefreshTokenService().pipe(switchMap((authResult) => {
                this.isRefreshing = false;
                if (authResult) {
                    this.refreshTokenSubject.next(authResult);
                    let modifiedRequest = this.normalizeRequestHeaders(request);
                    return next.handle(modifiedRequest);
                }
                else {
                    return this.handleErrorResponse(error);
                }
            }));
        }
        else {
            return this.refreshTokenSubject.pipe(filter(authResult => authResult != null), take(1), switchMap(authResult => {
                let modifiedRequest = this.normalizeRequestHeaders(request);
                return next.handle(modifiedRequest);
            }));
        }
    }
    normalizeRequestHeaders(request) {
        var modifiedHeaders = new HttpHeaders();
        modifiedHeaders = request.headers.set("Pragma", "no-cache")
            .set("Cache-Control", "no-cache")
            .set("Expires", "Sat, 01 Jan 2000 00:00:00 GMT");
        modifiedHeaders = this.addXRequestedWithHeader(modifiedHeaders);
        modifiedHeaders = this.addAuthorizationHeaders(modifiedHeaders);
        modifiedHeaders = this.addAspNetCoreCultureHeader(modifiedHeaders);
        modifiedHeaders = this.addAcceptLanguageHeader(modifiedHeaders);
        modifiedHeaders = this.addTenantIdHeader(modifiedHeaders);
        return request.clone({
            headers: modifiedHeaders
        });
    }
    addXRequestedWithHeader(headers) {
        if (headers) {
            headers = headers.set('X-Requested-With', 'XMLHttpRequest');
        }
        return headers;
    }
    addAspNetCoreCultureHeader(headers) {
        let cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && headers && !headers.has('.AspNetCore.Culture')) {
            headers = headers.set('.AspNetCore.Culture', cookieLangValue);
        }
        return headers;
    }
    addAcceptLanguageHeader(headers) {
        let cookieLangValue = this._utilsService.getCookieValue("Abp.Localization.CultureName");
        if (cookieLangValue && headers && !headers.has('Accept-Language')) {
            headers = headers.set('Accept-Language', cookieLangValue);
        }
        return headers;
    }
    addTenantIdHeader(headers) {
        let cookieTenantIdValue = this._utilsService.getCookieValue(abp.multiTenancy.tenantIdCookieName);
        if (cookieTenantIdValue && headers && !headers.has(abp.multiTenancy.tenantIdCookieName)) {
            headers = headers.set(abp.multiTenancy.tenantIdCookieName, cookieTenantIdValue);
        }
        return headers;
    }
    addAuthorizationHeaders(headers) {
        let authorizationHeaders = headers ? headers.getAll('Authorization') : null;
        if (!authorizationHeaders) {
            authorizationHeaders = [];
        }
        if (!this.itemExists(authorizationHeaders, (item) => item.indexOf('Bearer ') == 0)) {
            let token = this._tokenService.getToken();
            if (headers && token) {
                headers = headers.set('Authorization', 'Bearer ' + token);
            }
        }
        return headers;
    }
    handleSuccessResponse(event) {
        var self = this;
        if (event instanceof HttpResponse) {
            if (event.body instanceof Blob && event.body.type && event.body.type.indexOf("application/json") >= 0) {
                return self.configuration.blobToText(event.body).pipe(map(json => {
                    const responseBody = json == "null" ? {} : JSON.parse(json);
                    var modifiedResponse = self.configuration.handleResponse(event.clone({
                        body: responseBody
                    }));
                    return modifiedResponse.clone({
                        body: new Blob([JSON.stringify(modifiedResponse.body)], { type: 'application/json' })
                    });
                }));
            }
        }
        return of(event);
    }
    handleErrorResponse(error) {
        if (!(error.error instanceof Blob)) {
            return throwError(error);
        }
        return this.configuration.blobToText(error.error).pipe(switchMap((json) => {
            const errorBody = (json == "" || json == "null") ? {} : JSON.parse(json);
            const errorResponse = new HttpResponse({
                headers: error.headers,
                status: error.status,
                body: errorBody
            });
            var ajaxResponse = this.configuration.getAbpAjaxResponseOrNull(errorResponse);
            if (ajaxResponse != null) {
                this.configuration.handleAbpResponse(errorResponse, ajaxResponse);
            }
            else {
                this.configuration.handleNonAbpErrorResponse(errorResponse);
            }
            return throwError(error);
        }));
    }
    itemExists(items, predicate) {
        for (let i = 0; i < items.length; i++) {
            if (predicate(items[i])) {
                return true;
            }
        }
        return false;
    }
}
AbpHttpInterceptor.decorators = [
    { type: Injectable }
];
AbpHttpInterceptor.ctorParameters = () => [
    { type: AbpHttpConfigurationService },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,