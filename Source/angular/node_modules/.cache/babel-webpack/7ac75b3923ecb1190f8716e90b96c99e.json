{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { ElementRef, Renderer2, Component, ViewEncapsulation, Inject, Input, EventEmitter, ChangeDetectorRef, NgZone, HostBinding, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction GridsterComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 3);\n  }\n\n  if (rf & 2) {\n    const i_r3 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.gridRenderer.getGridColumnStyle(i_r3));\n  }\n}\n\nfunction GridsterComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 4);\n  }\n\n  if (rf & 2) {\n    const i_r5 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.gridRenderer.getGridRowStyle(i_r5));\n  }\n}\n\nconst _c0 = [\"*\"];\n\nfunction GridsterItemComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_1_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_1_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_2_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_2_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_3_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_3_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_4_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_4_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_5_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_5_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_6_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_6_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_7_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_7_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GridsterItemComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_8_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return ctx_r29.resize.dragStartDelay($event);\n    })(\"touchstart\", function GridsterItemComponent_div_8_Template_div_touchstart_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.resize.dragStartDelay($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nvar GridType;\n\n(function (GridType) {\n  GridType[\"Fit\"] = \"fit\";\n  GridType[\"ScrollVertical\"] = \"scrollVertical\";\n  GridType[\"ScrollHorizontal\"] = \"scrollHorizontal\";\n  GridType[\"Fixed\"] = \"fixed\";\n  GridType[\"VerticalFixed\"] = \"verticalFixed\";\n  GridType[\"HorizontalFixed\"] = \"horizontalFixed\";\n})(GridType || (GridType = {}));\n\nvar DisplayGrid;\n\n(function (DisplayGrid) {\n  DisplayGrid[\"Always\"] = \"always\";\n  DisplayGrid[\"OnDragAndResize\"] = \"onDrag&Resize\";\n  DisplayGrid[\"None\"] = \"none\";\n})(DisplayGrid || (DisplayGrid = {}));\n\nvar CompactType;\n\n(function (CompactType) {\n  CompactType[\"None\"] = \"none\";\n  CompactType[\"CompactUp\"] = \"compactUp\";\n  CompactType[\"CompactLeft\"] = \"compactLeft\";\n  CompactType[\"CompactUpAndLeft\"] = \"compactUp&Left\";\n  CompactType[\"CompactLeftAndUp\"] = \"compactLeft&Up\";\n  CompactType[\"CompactRight\"] = \"compactRight\";\n  CompactType[\"CompactUpAndRight\"] = \"compactUp&Right\";\n  CompactType[\"CompactRightAndUp\"] = \"compactRight&Up\";\n  CompactType[\"CompactDown\"] = \"compactDown\";\n  CompactType[\"CompactDownAndLeft\"] = \"compactDown&Left\";\n  CompactType[\"CompactLeftAndDown\"] = \"compactLeft&Down\";\n  CompactType[\"CompactDownAndRight\"] = \"compactDown&Right\";\n  CompactType[\"CompactRightAndDown\"] = \"compactRight&Down\";\n})(CompactType || (CompactType = {}));\n\nvar DirTypes;\n\n(function (DirTypes) {\n  DirTypes[\"LTR\"] = \"ltr\";\n  DirTypes[\"RTL\"] = \"rtl\";\n})(DirTypes || (DirTypes = {}));\n\nclass GridsterCompact {\n  constructor(gridster) {\n    this.gridster = gridster;\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.gridster;\n  }\n\n  checkCompact() {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', 1);\n      }\n    }\n  }\n\n  checkCompactItem(item) {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.moveTillCollision(item, 'x', 1);\n        this.moveTillCollision(item, 'y', 1);\n      }\n    }\n  }\n\n  checkCompactMovement(direction, delta) {\n    let widgetMoved = false;\n    this.gridster.grid.forEach(widget => {\n      if (widget.$item.compactEnabled !== false) {\n        const moved = this.moveTillCollision(widget.$item, direction, delta);\n\n        if (moved) {\n          widgetMoved = true;\n          widget.item[direction] = widget.$item[direction];\n          widget.itemChanged();\n        }\n      }\n    });\n\n    if (widgetMoved) {\n      this.checkCompact();\n    }\n  }\n\n  moveTillCollision(item, direction, delta) {\n    item[direction] += delta;\n\n    if (this.gridster.checkCollision(item)) {\n      item[direction] -= delta;\n      return false;\n    } else {\n      this.moveTillCollision(item, direction, delta);\n      return true;\n    }\n  }\n\n}\n\nconst GridsterConfigService = {\n  gridType: GridType.Fit,\n  scale: 1,\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250,\n  fixedRowHeight: 250,\n  keepFixedHeightInMobile: false,\n  keepFixedWidthInMobile: false,\n  setGridSize: false,\n  compactType: CompactType.None,\n  mobileBreakpoint: 640,\n  allowMultiLayer: false,\n  defaultLayerIndex: 0,\n  maxLayerIndex: 2,\n  baseLayerIndex: 1,\n  minCols: 1,\n  maxCols: 100,\n  minRows: 1,\n  maxRows: 100,\n  defaultItemCols: 1,\n  defaultItemRows: 1,\n  maxItemCols: 50,\n  maxItemRows: 50,\n  minItemCols: 1,\n  minItemRows: 1,\n  minItemArea: 1,\n  maxItemArea: 2500,\n  rowHeightRatio: 1,\n  margin: 10,\n  outerMargin: true,\n  outerMarginTop: null,\n  outerMarginRight: null,\n  outerMarginBottom: null,\n  outerMarginLeft: null,\n  useTransformPositioning: true,\n  scrollSensitivity: 10,\n  scrollSpeed: 20,\n  initCallback: undefined,\n  destroyCallback: undefined,\n  gridSizeChangedCallback: undefined,\n  itemChangeCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false,\n  enableEmptyCellContextMenu: false,\n  enableEmptyCellDrop: false,\n  enableEmptyCellDrag: false,\n  enableOccupiedCellDrop: false,\n  emptyCellClickCallback: undefined,\n  emptyCellContextMenuCallback: undefined,\n  emptyCellDropCallback: undefined,\n  emptyCellDragCallback: undefined,\n  emptyCellDragMaxCols: 50,\n  emptyCellDragMaxRows: 50,\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false,\n  draggable: {\n    delayStart: 0,\n    enabled: false,\n    ignoreContentClass: 'gridster-item-content',\n    ignoreContent: false,\n    dragHandleClass: 'drag-handler',\n    stop: undefined,\n    start: undefined,\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false,\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n\n  },\n  resizable: {\n    delayStart: 0,\n    enabled: false,\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    },\n    stop: undefined,\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n\n  },\n  swap: true,\n  swapWhileDragging: false,\n  pushItems: false,\n  disablePushOnDrag: false,\n  disablePushOnResize: false,\n  pushDirections: {\n    north: true,\n    east: true,\n    south: true,\n    west: true\n  },\n  pushResizeItems: false,\n  displayGrid: DisplayGrid.OnDragAndResize,\n  disableWindowResize: false,\n  disableWarnings: false,\n  scrollToNewItems: false,\n  disableScrollHorizontal: false,\n  disableScrollVertical: false,\n  disableAutoPositionOnConflict: false,\n  dirType: DirTypes.LTR // page direction, rtl=right to left ltr= left to right, if you use rtl language set dirType to rtl\n\n};\n\nclass GridsterUtils {\n  // tslint:disable-next-line:no-any\n  static merge(obj1, obj2, properties) {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n\n    return obj1;\n  }\n\n  static debounce(func, wait) {\n    let timeout;\n    return function () {\n      const context = this;\n      const args = arguments;\n\n      const later = () => {\n        timeout = undefined;\n        func.apply(context, args);\n      };\n\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  } // tslint:disable-next-line:no-any\n\n\n  static checkTouchEvent(e) {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n\n  static checkContentClassForEvent(gridster, e) {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkDragHandleClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  static checkContentClassForEmptyCellClickEvent(gridster, e) {\n    return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass) || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n  }\n\n  static checkDragHandleClass(target, current, dragHandleClass, ignoreContentClass) {\n    if (!target || target === current) {\n      return false;\n    }\n\n    if (target.hasAttribute('class')) {\n      // @ts-ignore\n      const classnames = target.getAttribute('class').split(' ');\n\n      if (classnames.indexOf(dragHandleClass) > -1) {\n        return true;\n      }\n\n      if (classnames.indexOf(ignoreContentClass) > -1) {\n        return false;\n      }\n    } // @ts-ignore\n\n\n    return GridsterUtils.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\n  }\n\n  static checkContentClass(target, current, contentClass) {\n    if (!target || target === current) {\n      return false;\n    } // @ts-ignore\n\n\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      // @ts-ignore\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n\n  static compareItems(a, b) {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n\n}\n\nclass GridsterEmptyCell {\n  constructor(gridster) {\n    this.gridster = gridster;\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.initialItem; // @ts-ignore\n\n    delete this.gridster.movingItem;\n\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    } // @ts-ignore\n\n\n    delete this.gridster;\n\n    if (this.emptyCellExit) {\n      this.emptyCellExit();\n      this.emptyCellExit = null;\n    }\n  }\n\n  updateOptions() {\n    if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n      this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n      this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n      this.emptyCellClick();\n      this.emptyCellClickTouch();\n      this.emptyCellClick = null;\n      this.emptyCellClickTouch = null;\n    }\n\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu && this.gridster.options.emptyCellContextMenuCallback) {\n      this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n      this.emptyCellContextMenu();\n      this.emptyCellContextMenu = null;\n    }\n\n    if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n      this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n      this.gridster.zone.runOutsideAngular(() => {\n        this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\n      });\n      this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n      this.emptyCellDrop();\n      this.emptyCellMove();\n      this.emptyCellExit();\n      this.emptyCellMove = null;\n      this.emptyCellDrop = null;\n      this.emptyCellExit = null;\n    }\n\n    if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n      this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n      this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n      this.emptyCellDrag();\n      this.emptyCellDragTouch();\n      this.emptyCellDrag = null;\n      this.emptyCellDragTouch = null;\n    }\n  }\n\n  emptyCellClickCb(e) {\n    if (!this.gridster || this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n\n    const item = this.getValidItemFromEvent(e);\n\n    if (!item) {\n      return;\n    }\n\n    if (this.gridster.options.emptyCellClickCallback) {\n      this.gridster.options.emptyCellClickCallback(e, item);\n    }\n\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellContextMenuCb(e) {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n\n    if (!item) {\n      return;\n    }\n\n    if (this.gridster.options.emptyCellContextMenuCallback) {\n      this.gridster.options.emptyCellContextMenuCallback(e, item);\n    }\n\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragDrop(e) {\n    const item = this.getValidItemFromEvent(e);\n\n    if (!item) {\n      return;\n    }\n\n    if (this.gridster.options.emptyCellDropCallback) {\n      this.gridster.options.emptyCellDropCallback(e, item);\n    }\n\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragOver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n\n    if (item) {\n      if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = 'move';\n      }\n\n      this.gridster.movingItem = item;\n    } else {\n      if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = 'none';\n      }\n\n      this.gridster.movingItem = null;\n    }\n\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseDown(e) {\n    if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    const leftMouseButtonCode = 1;\n\n    if (!item || e.buttons !== leftMouseButtonCode) {\n      return;\n    }\n\n    this.initialItem = item;\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n    this.gridster.zone.runOutsideAngular(() => {\n      this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\n      this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\n    });\n    this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n    this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n  }\n\n  emptyCellMouseMove(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n\n    if (!item) {\n      return;\n    }\n\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseUp(e) {\n    this.emptyCellMMove();\n    this.emptyCellMMoveTouch();\n    this.emptyCellUp();\n    this.emptyCellUpTouch();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n\n    if (item) {\n      this.gridster.movingItem = item;\n    }\n\n    if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n      this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n    }\n\n    setTimeout(() => {\n      this.initialItem = null;\n\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n    this.gridster.cdRef.markForCheck();\n  }\n\n  getPixelsX(e, rect) {\n    const scale = this.gridster.options.scale;\n\n    if (scale) {\n      return (e.clientX - rect.left) / scale + this.gridster.el.scrollLeft - this.gridster.gridRenderer.getLeftMargin();\n    }\n\n    return e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.gridRenderer.getLeftMargin();\n  }\n\n  getPixelsY(e, rect) {\n    const scale = this.gridster.options.scale;\n\n    if (scale) {\n      return (e.clientY - rect.top) / scale + this.gridster.el.scrollTop - this.gridster.gridRenderer.getTopMargin();\n    }\n\n    return e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.gridRenderer.getTopMargin();\n  }\n\n  getValidItemFromEvent(e, oldItem) {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = this.getPixelsX(e, rect);\n    const y = this.getPixelsY(e, rect);\n    const item = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n\n    if (!this.gridster.$options.enableOccupiedCellDrop && this.gridster.checkCollision(item)) {\n      return;\n    }\n\n    return item;\n  }\n\n}\n\nclass GridsterRenderer {\n  constructor(gridster) {\n    this.gridster = gridster;\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.gridster;\n  }\n\n  updateItem(el, item, renderer) {\n    if (this.gridster.mobile) {\n      this.clearCellPosition(renderer, el);\n\n      if (this.gridster.$options.keepFixedHeightInMobile) {\n        renderer.setStyle(el, 'height', item.rows * this.gridster.$options.fixedRowHeight + 'px');\n      } else {\n        renderer.setStyle(el, 'height', item.rows * this.gridster.curWidth / item.cols + 'px');\n      }\n\n      if (this.gridster.$options.keepFixedWidthInMobile) {\n        renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n      } else {\n        renderer.setStyle(el, 'width', '');\n      }\n\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', '');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = this.gridster.curRowHeight * item.rows - this.gridster.$options.margin; // set the cell style\n\n      this.setCellPosition(renderer, el, x, y);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom = null;\n      let marginRight = null;\n\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', marginRight);\n    }\n  }\n\n  updateGridster() {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth * this.gridster.$options.rowHeightRatio;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      const widthRatio = this.gridster.$options.rowHeightRatio;\n      const calWidthRatio = widthRatio >= 1 ? widthRatio : widthRatio + 1;\n      this.gridster.curColWidth = this.gridster.curRowHeight * calWidthRatio;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n\n    if (this.gridster.mobile || this.gridster.$options.setGridSize && this.gridster.$options.gridType !== GridType.Fit) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n\n  getGridColumnStyle(i) {\n    return Object.assign(Object.assign({}, this.getLeftPosition(this.gridster.curColWidth * i)), {\n      width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    });\n  }\n\n  getGridRowStyle(i) {\n    return Object.assign(Object.assign({}, this.getTopPosition(this.gridster.curRowHeight * i)), {\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    });\n  }\n\n  getLeftPosition(d) {\n    const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\n\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateX(' + dPosition + 'px)'\n      };\n    } else {\n      return {\n        left: this.getLeftMargin() + dPosition + 'px'\n      };\n    }\n  }\n\n  getTopPosition(d) {\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateY(' + d + 'px)'\n      };\n    } else {\n      return {\n        top: this.getTopMargin() + d + 'px'\n      };\n    }\n  }\n\n  clearCellPosition(renderer, el) {\n    if (this.gridster.$options.useTransformPositioning) {\n      renderer.setStyle(el, 'transform', '');\n    } else {\n      renderer.setStyle(el, 'top', '');\n      renderer.setStyle(el, 'left', '');\n    }\n  }\n\n  setCellPosition(renderer, el, x, y) {\n    const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\n\n    if (this.gridster.$options.useTransformPositioning) {\n      const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n    } else {\n      renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\n      renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n    }\n  }\n\n  getLeftMargin() {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginLeft !== null) {\n        return this.gridster.$options.outerMarginLeft;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  getTopMargin() {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginTop !== null) {\n        return this.gridster.$options.outerMarginTop;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n}\n\nclass GridsterPreviewComponent {\n  constructor(el, renderer) {\n    this.renderer = renderer;\n    this.el = el.nativeElement;\n  }\n\n  ngOnInit() {\n    this.sub = this.previewStyle$.subscribe(options => this.previewStyle(options));\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe(); // @ts-ignore\n\n    delete this.el;\n  }\n\n  previewStyle(item) {\n    if (item) {\n      this.renderer.setStyle(this.el, 'display', 'block');\n      this.gridRenderer.updateItem(this.el, item, this.renderer);\n    } else {\n      this.renderer.setStyle(this.el, 'display', '');\n    }\n  }\n\n}\n\nGridsterPreviewComponent.ɵfac = function GridsterPreviewComponent_Factory(t) {\n  return new (t || GridsterPreviewComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(Renderer2));\n};\n\nGridsterPreviewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridsterPreviewComponent,\n  selectors: [[\"gridster-preview\"]],\n  inputs: {\n    previewStyle$: \"previewStyle$\",\n    gridRenderer: \"gridRenderer\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function GridsterPreviewComponent_Template(rf, ctx) {},\n  styles: [\"gridster-preview{position:absolute;display:none;background:#00000026}\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterPreviewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster-preview',\n      template: '',\n      styleUrls: ['./gridsterPreview.css'],\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }, {\n      type: i0.Renderer2,\n      decorators: [{\n        type: Inject,\n        args: [Renderer2]\n      }]\n    }];\n  }, {\n    previewStyle$: [{\n      type: Input\n    }],\n    gridRenderer: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GridsterComponent {\n  constructor(el, renderer, cdRef, zone) {\n    this.renderer = renderer;\n    this.cdRef = cdRef;\n    this.zone = zone;\n    this.columns = 0;\n    this.rows = 0;\n    this.gridColumns = [];\n    this.gridRows = [];\n    this.previewStyle$ = new EventEmitter();\n    this.el = el.nativeElement;\n    this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n    this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n    this.mobile = false;\n    this.curWidth = 0;\n    this.curHeight = 0;\n    this.grid = [];\n    this.curColWidth = 0;\n    this.curRowHeight = 0;\n    this.dragInProgress = false;\n    this.emptyCell = new GridsterEmptyCell(this);\n    this.compact = new GridsterCompact(this);\n    this.gridRenderer = new GridsterRenderer(this);\n  } // ------ Function for swapWhileDragging option\n  // identical to checkCollision() except that here we add boundaries.\n\n\n  static checkCollisionTwoItemsForSwaping(item, item2) {\n    // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n    const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n    const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n    const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n    const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n    return item.x + horizontalBoundaryItem1 < item2.x + item2.cols && item.x + item.cols > item2.x + horizontalBoundaryItem2 && item.y + verticalBoundaryItem1 < item2.y + item2.rows && item.y + item.rows > item2.y + verticalBoundaryItem2;\n  }\n\n  checkCollisionTwoItems(item, item2) {\n    const collision = item.x < item2.x + item2.cols && item.x + item.cols > item2.x && item.y < item2.y + item2.rows && item.y + item.rows > item2.y;\n\n    if (!collision) {\n      return false;\n    }\n\n    if (!this.$options.allowMultiLayer) {\n      return true;\n    }\n\n    const defaultLayerIndex = this.$options.defaultLayerIndex;\n    const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n    const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n    return layerIndex === layerIndex2;\n  }\n\n  ngOnInit() {\n    if (this.options.initCallback) {\n      this.options.initCallback(this);\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes.options) {\n      this.setOptions();\n      this.options.api = {\n        optionsChanged: this.optionsChanged.bind(this),\n        resize: this.onResize.bind(this),\n        getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n        getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n        getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n        getItemComponent: item => this.getItemComponent(item)\n      };\n      this.columns = this.$options.minCols;\n      this.rows = this.$options.minRows;\n      this.setGridSize();\n      this.calculateLayout();\n    }\n  }\n\n  resize() {\n    let height;\n    let width;\n\n    if (this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n\n    if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n      this.onResize();\n    }\n  }\n\n  setOptions() {\n    this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n\n    if (!this.$options.disableWindowResize && !this.windowResize) {\n      this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n    } else if (this.$options.disableWindowResize && this.windowResize) {\n      this.windowResize();\n      this.windowResize = null;\n    }\n\n    this.emptyCell.updateOptions();\n  }\n\n  optionsChanged() {\n    this.setOptions();\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.updateOptions();\n    }\n\n    this.calculateLayout();\n  }\n\n  ngOnDestroy() {\n    this.previewStyle$.complete();\n\n    if (this.windowResize) {\n      this.windowResize();\n    }\n\n    if (this.options && this.options.destroyCallback) {\n      this.options.destroyCallback(this);\n    }\n\n    if (this.options && this.options.api) {\n      this.options.api.resize = undefined;\n      this.options.api.optionsChanged = undefined;\n      this.options.api.getNextPossiblePosition = undefined;\n      this.options.api = undefined;\n    }\n\n    this.emptyCell.destroy(); // @ts-ignore\n\n    delete this.emptyCell;\n    this.compact.destroy(); // @ts-ignore\n\n    delete this.compact;\n  }\n\n  onResize() {\n    if (this.el.clientWidth) {\n      if (this.options.setGridSize) {\n        // reset width/height so the size is recalculated afterwards\n        this.renderer.setStyle(this.el, 'width', '');\n        this.renderer.setStyle(this.el, 'height', '');\n      }\n\n      this.setGridSize();\n      this.calculateLayout();\n    }\n  }\n\n  checkIfToResize() {\n    const clientWidth = this.el.clientWidth;\n    const offsetWidth = this.el.offsetWidth;\n    const scrollWidth = this.el.scrollWidth;\n    const clientHeight = this.el.clientHeight;\n    const offsetHeight = this.el.offsetHeight;\n    const scrollHeight = this.el.scrollHeight;\n    const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n    const horizontalScrollPresent = clientHeight < offsetHeight && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n\n    if (verticalScrollPresent) {\n      return false;\n    }\n\n    return !horizontalScrollPresent;\n  }\n\n  setGridSize() {\n    const el = this.el;\n    let width;\n    let height;\n\n    if (this.$options.setGridSize || this.$options.gridType === GridType.Fit && !this.mobile) {\n      width = el.offsetWidth;\n      height = el.offsetHeight;\n    } else {\n      width = el.clientWidth;\n      height = el.clientHeight;\n    }\n\n    this.curWidth = width;\n    this.curHeight = height;\n  }\n\n  setGridDimensions() {\n    this.setGridSize();\n\n    if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.addClass(this.el, 'mobile');\n    } else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.removeClass(this.el, 'mobile');\n    }\n\n    let rows = this.$options.minRows;\n    let columns = this.$options.minCols;\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n\n      if (!widget.notPlaced) {\n        rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n        columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n      }\n    }\n\n    if (this.columns !== columns || this.rows !== rows) {\n      this.columns = columns;\n      this.rows = rows;\n\n      if (this.options.gridSizeChangedCallback) {\n        this.options.gridSizeChangedCallback(this);\n      }\n    }\n  }\n\n  calculateLayout() {\n    if (this.compact) {\n      this.compact.checkCompact();\n    }\n\n    this.setGridDimensions();\n\n    if (this.$options.outerMargin) {\n      let marginWidth = -this.$options.margin;\n\n      if (this.$options.outerMarginLeft !== null) {\n        marginWidth += this.$options.outerMarginLeft;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n      }\n\n      if (this.$options.outerMarginRight !== null) {\n        marginWidth += this.$options.outerMarginRight;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n      }\n\n      this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n      let marginHeight = -this.$options.margin;\n\n      if (this.$options.outerMarginTop !== null) {\n        marginHeight += this.$options.outerMarginTop;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n      }\n\n      if (this.$options.outerMarginBottom !== null) {\n        marginHeight += this.$options.outerMarginBottom;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n      }\n\n      this.curRowHeight = (this.curHeight - marginHeight) / this.rows * this.$options.rowHeightRatio;\n    } else {\n      this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n      this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows * this.$options.rowHeightRatio;\n      this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n    }\n\n    this.gridRenderer.updateGridster();\n\n    if (this.$options.setGridSize) {\n      this.renderer.addClass(this.el, 'gridSize');\n\n      if (!this.mobile) {\n        this.renderer.setStyle(this.el, 'width', this.columns * this.curColWidth + this.$options.margin + 'px');\n        this.renderer.setStyle(this.el, 'height', this.rows * this.curRowHeight + this.$options.margin + 'px');\n      }\n    } else {\n      this.renderer.removeClass(this.el, 'gridSize');\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n\n    this.updateGrid();\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.setSize();\n      widget.drag.toggle();\n      widget.resize.toggle();\n    }\n\n    setTimeout(this.resize.bind(this), 100);\n  }\n\n  updateGrid() {\n    if (this.$options.displayGrid === 'always' && !this.mobile) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n      this.renderer.removeClass(this.el, 'display-grid');\n    }\n\n    this.setGridDimensions();\n    this.gridColumns.length = GridsterComponent.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\n    this.gridRows.length = GridsterComponent.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\n    this.cdRef.markForCheck();\n  }\n\n  addItem(itemComponent) {\n    if (itemComponent.$item.cols === undefined) {\n      itemComponent.$item.cols = this.$options.defaultItemCols;\n      itemComponent.item.cols = itemComponent.$item.cols;\n      itemComponent.itemChanged();\n    }\n\n    if (itemComponent.$item.rows === undefined) {\n      itemComponent.$item.rows = this.$options.defaultItemRows;\n      itemComponent.item.rows = itemComponent.$item.rows;\n      itemComponent.itemChanged();\n    }\n\n    if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n      this.autoPositionItem(itemComponent);\n    } else if (this.checkCollision(itemComponent.$item)) {\n      if (!this.$options.disableWarnings) {\n        itemComponent.notPlaced = true;\n        console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n\n      if (!this.$options.disableAutoPositionOnConflict) {\n        this.autoPositionItem(itemComponent);\n      } else {\n        itemComponent.notPlaced = true;\n      }\n    }\n\n    this.grid.push(itemComponent);\n    this.calculateLayoutDebounce();\n  }\n\n  removeItem(itemComponent) {\n    this.grid.splice(this.grid.indexOf(itemComponent), 1);\n    this.calculateLayoutDebounce();\n\n    if (this.options.itemRemovedCallback) {\n      this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n    }\n  }\n\n  checkCollision(item) {\n    let collision = false;\n\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n\n    if (!collision) {\n      const c = this.findItemWithItem(item);\n\n      if (c) {\n        collision = c;\n      }\n    }\n\n    return collision;\n  }\n\n  checkGridCollision(item) {\n    const noNegativePosition = item.y > -1 && item.x > -1;\n    const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n    const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n    const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n    const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n    const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n    const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n    const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n    const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n    const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n    const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n    const area = item.cols * item.rows;\n    const inMinArea = minAreaLimit <= area;\n    const inMaxArea = maxAreaLimit >= area;\n    return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n  }\n\n  findItemWithItem(item) {\n    let widgetsIndex = 0;\n    let widget;\n\n    for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n      widget = this.grid[widgetsIndex];\n\n      if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n        return widget;\n      }\n    }\n\n    return false;\n  }\n\n  findItemsWithItem(item) {\n    const a = [];\n    let widgetsIndex = 0;\n    let widget;\n\n    for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n      widget = this.grid[widgetsIndex];\n\n      if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n        a.push(widget);\n      }\n    }\n\n    return a;\n  }\n\n  autoPositionItem(itemComponent) {\n    if (this.getNextPossiblePosition(itemComponent.$item)) {\n      itemComponent.notPlaced = false;\n      itemComponent.item.x = itemComponent.$item.x;\n      itemComponent.item.y = itemComponent.$item.y;\n      itemComponent.itemChanged();\n    } else {\n      itemComponent.notPlaced = true;\n\n      if (!this.$options.disableWarnings) {\n        console.warn('Can\\'t be placed in the bounds of the dashboard!/n' + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n    }\n  }\n\n  getNextPossiblePosition(newItem, startingFrom = {}) {\n    if (newItem.cols === -1) {\n      newItem.cols = this.$options.defaultItemCols;\n    }\n\n    if (newItem.rows === -1) {\n      newItem.rows = this.$options.defaultItemRows;\n    }\n\n    this.setGridDimensions();\n    let rowsIndex = startingFrom.y || 0;\n    let colsIndex;\n\n    for (; rowsIndex < this.rows; rowsIndex++) {\n      newItem.y = rowsIndex;\n      colsIndex = startingFrom.x || 0;\n\n      for (; colsIndex < this.columns; colsIndex++) {\n        newItem.x = colsIndex;\n\n        if (!this.checkCollision(newItem)) {\n          return true;\n        }\n      }\n    }\n\n    const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n    const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n    const addToRows = this.rows <= this.columns && canAddToRows;\n\n    if (!addToRows && canAddToColumns) {\n      newItem.x = this.columns;\n      newItem.y = 0;\n      return true;\n    } else if (canAddToRows) {\n      newItem.y = this.rows;\n      newItem.x = 0;\n      return true;\n    }\n\n    return false;\n  }\n\n  getFirstPossiblePosition(item) {\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem);\n    return tmpItem;\n  }\n\n  getLastPossiblePosition(item) {\n    let farthestItem = {\n      y: 0,\n      x: 0\n    };\n    farthestItem = this.grid.reduce((prev, curr) => {\n      const currCoords = {\n        y: curr.$item.y + curr.$item.rows - 1,\n        x: curr.$item.x + curr.$item.cols - 1\n      };\n\n      if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n        return currCoords;\n      } else {\n        return prev;\n      }\n    }, farthestItem);\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem, farthestItem);\n    return tmpItem;\n  }\n\n  pixelsToPositionX(x, roundingMethod, noLimit) {\n    const position = roundingMethod(x / this.curColWidth);\n\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  pixelsToPositionY(y, roundingMethod, noLimit) {\n    const position = roundingMethod(y / this.curRowHeight);\n\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  positionXToPixels(x) {\n    return x * this.curColWidth;\n  }\n\n  positionYToPixels(y) {\n    return y * this.curRowHeight;\n  }\n\n  getItemComponent(item) {\n    return this.grid.find(c => c.item === item);\n  } // ------ Functions for swapWhileDragging option\n  // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n\n\n  checkCollisionForSwaping(item) {\n    let collision = false;\n\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n\n    if (!collision) {\n      const c = this.findItemWithItemForSwapping(item);\n\n      if (c) {\n        collision = c;\n      }\n    }\n\n    return collision;\n  } // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n\n\n  findItemWithItemForSwapping(item) {\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\n        return widget;\n      }\n    }\n\n    return false;\n  }\n\n  previewStyle(drag = false) {\n    if (this.movingItem) {\n      if (this.compact && drag) {\n        this.compact.checkCompactItem(this.movingItem);\n      }\n\n      this.previewStyle$.next(this.movingItem);\n    } else {\n      this.previewStyle$.next();\n    }\n  } // ------ End of functions for swapWhileDragging option\n  // tslint:disable-next-line:member-ordering\n\n\n  static getNewArrayLength(length, overallSize, size) {\n    const newLength = Math.max(length, Math.floor(overallSize / size));\n\n    if (newLength < 0) {\n      return 0;\n    }\n\n    if (Number.isFinite(newLength)) {\n      return Math.floor(newLength);\n    }\n\n    return 0;\n  }\n\n}\n\nGridsterComponent.ɵfac = function GridsterComponent_Factory(t) {\n  return new (t || GridsterComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(NgZone));\n};\n\nGridsterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridsterComponent,\n  selectors: [[\"gridster\"]],\n  inputs: {\n    options: \"options\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"gridster-column\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gridster-row\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"gridster-preview\", 3, \"gridRenderer\", \"previewStyle$\"], [1, \"gridster-column\", 3, \"ngStyle\"], [1, \"gridster-row\", 3, \"ngStyle\"]],\n  template: function GridsterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, GridsterComponent_div_0_Template, 1, 1, \"div\", 0);\n      i0.ɵɵtemplate(1, GridsterComponent_div_1_Template, 1, 1, \"div\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelement(3, \"gridster-preview\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.gridColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.gridRows);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"gridRenderer\", ctx.gridRenderer)(\"previewStyle$\", ctx.previewStyle$);\n    }\n  },\n  directives: [i2.NgForOf, GridsterPreviewComponent, i2.NgStyle],\n  styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:auto;width:auto}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterComponent, [{\n    type: Component,\n    args: [{\n      // tslint:disable-next-line:component-selector\n      selector: 'gridster',\n      templateUrl: './gridster.html',\n      styleUrls: ['./gridster.css'],\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }, {\n      type: i0.Renderer2,\n      decorators: [{\n        type: Inject,\n        args: [Renderer2]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef,\n      decorators: [{\n        type: Inject,\n        args: [ChangeDetectorRef]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Inject,\n        args: [NgZone]\n      }]\n    }];\n  }, {\n    options: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GridsterPush {\n  constructor(gridsterItem) {\n    this.iteration = 0;\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.gridster; // @ts-ignore\n\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction, disable) {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      this.iteration = 0;\n      const pushed = this.push(this.gridsterItem, direction);\n\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n\n  restoreTempItems() {\n    let i = this.pushedItemsTemp.length - 1;\n\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n\n  restoreItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack() {\n    let i = this.pushedItems.length - 1;\n    let change = false;\n\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  push(gridsterItem, direction) {\n    if (this.iteration > 100) {\n      console.warn('max iteration reached');\n      return false;\n    }\n\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n\n    if (direction === '') {\n      return false;\n    }\n\n    const conflicts = this.gridster.findItemsWithItem(gridsterItem.$item);\n    const invert = direction === this.fromNorth || direction === this.fromWest; // sort the list of conflicts in order of [y,x]. Invert when the push is from north and west\n    // this is done so they don't conflict witch each other and revert positions, keeping the previous order\n\n    conflicts.sort((a, b) => {\n      if (invert) {\n        return b.$item.y - a.$item.y || b.$item.x - a.$item.x;\n      } else {\n        return a.$item.y - b.$item.y || a.$item.x - b.$item.x;\n      }\n    });\n    let i = 0;\n    let itemCollision;\n    let makePush = true;\n    const pushedItems = [];\n\n    for (; i < conflicts.length; i++) {\n      itemCollision = conflicts[i];\n\n      if (itemCollision === this.gridsterItem) {\n        continue;\n      }\n\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n\n      const p = this.pushedItemsTemp.indexOf(itemCollision);\n\n      if (p > -1 && this.pushedItemsTempPath[p].length > 10) {\n        // stop if item is pushed more than 10 times to break infinite loops\n        makePush = false;\n        break;\n      }\n\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(pushedItems[0]);\n\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n\n    this.iteration++;\n    return makePush;\n  }\n\n  trySouth(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  tryNorth(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  tryEast(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  tryWest(gridsterItemCollide, gridsterItem) {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n\n    return false;\n  }\n\n  addToTempPushed(gridsterItem) {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n\n    this.pushedItemsTempPath[i].push({\n      x: gridsterItem.$item.x,\n      y: gridsterItem.$item.y\n    });\n  }\n\n  removeFromTempPushed(gridsterItem) {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n\n    if (!tempPosition) {\n      return;\n    }\n\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n\n  addToPushed(gridsterItem) {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{\n        x: gridsterItem.item.x || 0,\n        y: gridsterItem.item.y || 0\n      }, {\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      });\n    }\n  }\n\n  removeFromPushed(i) {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  removeFromPushedItem(gridsterItem) {\n    const i = this.pushedItems.indexOf(gridsterItem);\n\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n\n  checkPushedItem(pushedItem, i) {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let change = false;\n\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n\n    return change;\n  }\n\n}\n\nlet scrollSensitivity;\nlet scrollSpeed;\nconst intervalDuration = 50;\nlet gridsterElement;\nlet resizeEvent;\nlet resizeEventType;\nlet intervalE;\nlet intervalW;\nlet intervalN;\nlet intervalS;\n\nfunction scroll(gridster, left, top, width, height, e, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n\n  if (!gridster.$options.disableScrollVertical) {\n    if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n      cancelN();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.s || intervalS) {\n        return;\n      }\n\n      intervalS = startVertical(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n      cancelS();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.n || intervalN) {\n        return;\n      }\n\n      intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY !== e.clientY) {\n      cancelVertical();\n    }\n  }\n\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n\n  if (!gridster.$options.disableScrollHorizontal) {\n    if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n      cancelW();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.e || intervalE) {\n        return;\n      }\n\n      intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n      cancelE();\n\n      if (resizeEvent && resizeEventType && !resizeEventType.w || intervalW) {\n        return;\n      }\n\n      intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX !== e.clientX) {\n      cancelHorizontal();\n    }\n  }\n}\n\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\n  let clientY = lastMouse.clientY;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    } // @ts-ignore\n\n\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX: lastMouse.clientX,\n      clientY\n    });\n  }, intervalDuration);\n}\n\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\n  let clientX = lastMouse.clientX;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    } // @ts-ignore\n\n\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX,\n      clientY: lastMouse.clientY\n    });\n  }, intervalDuration);\n}\n\nfunction cancelScroll() {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = null;\n}\n\nfunction cancelHorizontal() {\n  cancelE();\n  cancelW();\n}\n\nfunction cancelVertical() {\n  cancelN();\n  cancelS();\n}\n\nfunction cancelE() {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\n\nfunction cancelW() {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\n\nfunction cancelS() {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\n\nfunction cancelN() {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\n\nclass GridsterSwap {\n  constructor(gridsterItem) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.gridster; // @ts-ignore\n\n    delete this.gridsterItem;\n    delete this.swapedItem;\n  }\n\n  swapItems() {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n\n  checkSwapBack() {\n    if (this.swapedItem) {\n      const x = this.swapedItem.$item.x;\n      const y = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n    }\n  }\n\n  restoreSwapItem() {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n\n  setSwapItem() {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n\n  checkSwap(pushedBy) {\n    let gridsterItemCollision;\n\n    if (this.gridster.$options.swapWhileDragging) {\n      gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\n    } else {\n      gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n    }\n\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      const diffX = copyX - copyCollisionX;\n      const diffY = copyY - copyCollisionY;\n      gridsterItemCollide.$item.x = pushedBy.item.x - diffX;\n      gridsterItemCollide.$item.y = pushedBy.item.y - diffY;\n      pushedBy.$item.x = gridsterItemCollide.item.x + diffX;\n      pushedBy.$item.y = gridsterItemCollide.item.y + diffY;\n\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n\n        if (this.gridster.$options.swapWhileDragging) {\n          this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n          this.setSwapItem();\n        }\n      }\n    }\n  }\n\n}\n\nclass GridsterDraggable {\n  constructor(gridsterItem, gridster, zone) {\n    this.zone = zone;\n    this.collision = false;\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n\n  destroy() {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    } // @ts-ignore\n\n\n    delete this.gridsterItem; // @ts-ignore\n\n    delete this.gridster; // @ts-ignore\n\n    delete this.collision;\n\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStart(e) {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.diffLeft = e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left;\n    } else {\n      this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    }\n\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({\n      x: this.gridsterItem.item.x || 0,\n      y: this.gridsterItem.item.y || 0\n    });\n  }\n\n  dragMove(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition.bind(this));\n    this.calculateItemPositionFromMousePosition(e);\n  }\n\n  calculateItemPositionFromMousePosition(e) {\n    if (this.gridster.options.scale) {\n      this.calculateItemPositionWithScale(e, this.gridster.options.scale);\n    } else {\n      this.calculateItemPositionWithoutScale(e);\n    }\n\n    this.calculateItemPosition();\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  calculateItemPositionWithScale(e, scale) {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - this.originalClientX + (e.clientX - this.originalClientX) / scale + this.diffLeft;\n    } else {\n      this.left = this.originalClientX + (e.clientX - this.originalClientX) / scale + this.offsetLeft - this.diffLeft;\n    }\n\n    this.top = this.originalClientY + (e.clientY - this.originalClientY) / scale + this.offsetTop - this.diffTop;\n  }\n\n  calculateItemPositionWithoutScale(e) {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\n    } else {\n      this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    }\n\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n  }\n\n  dragStop(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    cancelScroll();\n    this.cancelOnBlur();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    this.path = [];\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n      Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n    } else {\n      this.makeDrag();\n    }\n\n    setTimeout(() => {\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle(true);\n      }\n    });\n  }\n\n  cancelDrag() {\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n\n    if (this.push) {\n      this.push.restoreItems();\n    }\n\n    if (this.swap) {\n      this.swap.restoreSwapItem();\n    }\n\n    if (this.push) {\n      this.push.destroy(); // @ts-ignore\n\n      delete this.push;\n    }\n\n    if (this.swap) {\n      this.swap.destroy(); // @ts-ignore\n\n      delete this.swap;\n    }\n  }\n\n  makeDrag() {\n    if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable && this.gridster.options.draggable.dropOverItemsCallback && this.collision && this.collision !== true && this.collision.$item) {\n      this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n    }\n\n    this.collision = false;\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n\n    if (this.push) {\n      this.push.setPushedItems();\n    }\n\n    if (this.swap) {\n      this.swap.setSwapItem();\n    }\n\n    if (this.push) {\n      this.push.destroy(); // @ts-ignore\n\n      delete this.push;\n    }\n\n    if (this.swap) {\n      this.swap.destroy(); // @ts-ignore\n\n      delete this.swap;\n    }\n  }\n\n  calculateItemPosition() {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n\n    this.gridsterItem.$item.y = this.positionY;\n\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n\n    if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({\n          x: this.gridsterItem.$item.x,\n          y: this.gridsterItem.$item.y\n        });\n      }\n\n      this.push.checkPushBack();\n    }\n\n    this.gridster.previewStyle(true);\n  }\n\n  toggle() {\n    const enableDrag = this.gridsterItem.canBeDragged();\n\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.dragStartFunction = this.dragStartDelay.bind(this);\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStartDelay(e) {\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n      return;\n    }\n\n    if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n      return;\n    }\n\n    GridsterUtils.checkTouchEvent(e);\n\n    if (!this.gridster.$options.draggable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.draggable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove) {\n      GridsterUtils.checkTouchEvent(eventMove);\n\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n}\n\nclass GridsterPushResize {\n  constructor(gridsterItem) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.gridster; // @ts-ignore\n\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction) {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n\n  restoreItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l = this.pushedItems.length;\n    let pushedItem;\n\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack() {\n    let i = this.pushedItems.length - 1;\n    let change = false;\n\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  push(gridsterItem, direction) {\n    const gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\n\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n\n    return false;\n  }\n\n  trySouth(gridsterItemCollide, gridsterItem, direction) {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n\n    return false;\n  }\n\n  tryNorth(gridsterItemCollide, gridsterItem, direction) {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n\n    return false;\n  }\n\n  tryEast(gridsterItemCollide, gridsterItem, direction) {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n\n    return false;\n  }\n\n  tryWest(gridsterItemCollide, gridsterItem, direction) {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n\n    return false;\n  }\n\n  addToPushed(gridsterItem) {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{\n        x: gridsterItem.item.x || 0,\n        y: gridsterItem.item.y || 0,\n        cols: gridsterItem.item.cols || 0,\n        rows: gridsterItem.item.rows || 0\n      }, {\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y,\n        cols: gridsterItem.$item.cols,\n        rows: gridsterItem.$item.rows\n      }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y,\n        cols: gridsterItem.$item.cols,\n        rows: gridsterItem.$item.rows\n      });\n    }\n  }\n\n  removeFromPushed(i) {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  checkPushedItem(pushedItem, i) {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let cols;\n    let rows;\n\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nclass GridsterResizable {\n  constructor(gridsterItem, gridster, zone) {\n    this.zone = zone;\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {\n      w: false,\n      e: false,\n      n: false,\n      s: false\n    };\n  }\n\n  destroy() {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    } // @ts-ignore\n\n\n    delete this.gridsterItem; // @ts-ignore\n\n    delete this.gridster;\n  }\n\n  dragStart(e) {\n    var _a, _b, _c;\n\n    if (e.which && e.which !== 1) {\n      return;\n    }\n\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows) - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols) - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n\n    if (((_a = e.target) === null || _a === void 0 ? void 0 : _a.hasAttribute('class')) && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.directionFunction = this.handleN;\n    } else if (((_b = e.target) === null || _b === void 0 ? void 0 : _b.hasAttribute('class')) && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleE;\n      } else {\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleW;\n      }\n    } else if (((_c = e.target) === null || _c === void 0 ? void 0 : _c.hasAttribute('class')) && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.directionFunction = this.handleS;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleW;\n      } else {\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleE;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleNE;\n      } else {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleNW;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleNW;\n      } else {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleNE;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleSE;\n      } else {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleSW;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleSW;\n      } else {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleSE;\n      }\n    }\n  }\n\n  dragMove(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true, this.resizeEventScrollType);\n    const scale = this.gridster.options.scale || 1;\n    this.directionFunction({\n      clientX: this.originalClientX + (e.clientX - this.originalClientX) / scale,\n      clientY: this.originalClientY + (e.clientY - this.originalClientY) / scale\n    });\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    cancelScroll();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.cancelOnBlur();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n\n    if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n      Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeResize.bind(this), this.cancelResize.bind(this));\n    } else {\n      this.makeResize();\n    }\n\n    setTimeout(() => {\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n  }\n\n  cancelResize() {\n    this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n    this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    this.push.restoreItems();\n    this.pushResize.restoreItems();\n    this.push.destroy(); // @ts-ignore\n\n    delete this.push;\n    this.pushResize.destroy(); // @ts-ignore\n\n    delete this.pushResize;\n  }\n\n  makeResize() {\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    this.push.setPushedItems();\n    this.pushResize.setPushedItems();\n    this.push.destroy(); // @ts-ignore\n\n    delete this.push;\n    this.pushResize.destroy(); // @ts-ignore\n\n    delete this.pushResize;\n  }\n\n  handleN(e) {\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.height = this.bottom - this.top;\n\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n      this.top = this.bottom - this.minHeight;\n    }\n\n    this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n\n    if (this.gridsterItem.$item.y !== this.newPosition) {\n      this.itemBackup[1] = this.gridsterItem.$item.y;\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n      this.gridsterItem.$item.y = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromSouth);\n      this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.y = this.itemBackup[1];\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n\n    this.setItemTop(this.top);\n    this.setItemHeight(this.height);\n  }\n\n  handleW(e) {\n    const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n    this.left = clientX + this.offsetLeft - this.diffLeft;\n    this.width = this.right - this.left;\n\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n      this.left = this.right - this.minWidth;\n    }\n\n    this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n\n    if (this.gridsterItem.$item.x !== this.newPosition) {\n      this.itemBackup[0] = this.gridsterItem.$item.x;\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n      this.gridsterItem.$item.x = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromEast);\n      this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.x = this.itemBackup[0];\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n\n    this.setItemLeft(this.left);\n    this.setItemWidth(this.width);\n  }\n\n  handleS(e) {\n    this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n    }\n\n    this.bottom = this.top + this.height;\n    this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n\n    if (this.gridsterItem.$item.y + this.gridsterItem.$item.rows !== this.newPosition) {\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n      this.pushResize.pushItems(this.pushResize.fromNorth);\n      this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n\n    this.setItemHeight(this.height);\n  }\n\n  handleE(e) {\n    const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n    this.width = clientX + this.offsetLeft - this.diffRight - this.left;\n\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n    }\n\n    this.right = this.left + this.width;\n    this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n\n    if (this.gridsterItem.$item.x + this.gridsterItem.$item.cols !== this.newPosition) {\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n      this.pushResize.pushItems(this.pushResize.fromWest);\n      this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n\n    this.setItemWidth(this.width);\n  }\n\n  handleNW(e) {\n    this.handleN(e);\n    this.handleW(e);\n  }\n\n  handleNE(e) {\n    this.handleN(e);\n    this.handleE(e);\n  }\n\n  handleSW(e) {\n    this.handleS(e);\n    this.handleW(e);\n  }\n\n  handleSE(e) {\n    this.handleS(e);\n    this.handleE(e);\n  }\n\n  toggle() {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n  }\n\n  dragStartDelay(e) {\n    GridsterUtils.checkTouchEvent(e);\n\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove) {\n      GridsterUtils.checkTouchEvent(eventMove);\n\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n  setItemTop(top) {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n  }\n\n  setItemLeft(left) {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n  }\n\n  setItemHeight(height) {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n\n  setItemWidth(width) {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n\n}\n\nclass GridsterItemComponent {\n  constructor(el, gridster, renderer, zone) {\n    this.renderer = renderer;\n    this.zone = zone;\n    this.el = el.nativeElement;\n    this.$item = {\n      cols: -1,\n      rows: -1,\n      x: -1,\n      y: -1\n    };\n    this.gridster = gridster;\n    this.drag = new GridsterDraggable(this, gridster, this.zone);\n    this.resize = new GridsterResizable(this, gridster, this.zone);\n  }\n\n  get zIndex() {\n    return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n  }\n\n  ngOnInit() {\n    this.gridster.addItem(this);\n  }\n\n  ngOnChanges(changes) {\n    if (changes.item) {\n      this.updateOptions();\n\n      if (!this.init) {\n        this.gridster.calculateLayoutDebounce();\n      }\n    }\n\n    if (changes.item && changes.item.previousValue) {\n      this.setSize();\n    }\n  }\n\n  updateOptions() {\n    this.$item = GridsterUtils.merge(this.$item, this.item, {\n      cols: undefined,\n      rows: undefined,\n      x: undefined,\n      y: undefined,\n      layerIndex: undefined,\n      dragEnabled: undefined,\n      resizeEnabled: undefined,\n      compactEnabled: undefined,\n      maxItemRows: undefined,\n      minItemRows: undefined,\n      maxItemCols: undefined,\n      minItemCols: undefined,\n      maxItemArea: undefined,\n      minItemArea: undefined\n    });\n  }\n\n  ngOnDestroy() {\n    this.gridster.removeItem(this); // @ts-ignore\n\n    delete this.gridster;\n    this.drag.destroy(); // @ts-ignore\n\n    delete this.drag;\n    this.resize.destroy(); // @ts-ignore\n\n    delete this.resize;\n  }\n\n  setSize() {\n    this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n    this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n    this.updateItemSize();\n  }\n\n  updateItemSize() {\n    const top = this.$item.y * this.gridster.curRowHeight;\n    const left = this.$item.x * this.gridster.curColWidth;\n    const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n    const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n    this.top = top;\n    this.left = left;\n\n    if (!this.init && width > 0 && height > 0) {\n      this.init = true;\n\n      if (this.item.initCallback) {\n        this.item.initCallback(this.item, this);\n      }\n\n      if (this.gridster.options.itemInitCallback) {\n        this.gridster.options.itemInitCallback(this.item, this);\n      }\n\n      if (this.gridster.$options.scrollToNewItems) {\n        this.el.scrollIntoView(false);\n      }\n    }\n\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n\n      if (this.gridster.options.itemResizeCallback) {\n        this.gridster.options.itemResizeCallback(this.item, this);\n      }\n    }\n  }\n\n  itemChanged() {\n    if (this.gridster.options.itemChangeCallback) {\n      this.gridster.options.itemChangeCallback(this.item, this);\n    }\n  }\n\n  checkItemChanges(newValue, oldValue) {\n    if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n      return;\n    }\n\n    if (this.gridster.checkCollision(this.$item)) {\n      this.$item.x = oldValue.x || 0;\n      this.$item.y = oldValue.y || 0;\n      this.$item.cols = oldValue.cols || 1;\n      this.$item.rows = oldValue.rows || 1;\n      this.setSize();\n    } else {\n      this.item.cols = this.$item.cols;\n      this.item.rows = this.$item.rows;\n      this.item.x = this.$item.x;\n      this.item.y = this.$item.y;\n      this.gridster.calculateLayoutDebounce();\n      this.itemChanged();\n    }\n  }\n\n  canBeDragged() {\n    const gridDragEnabled = this.gridster.$options.draggable.enabled;\n    const itemDragEnabled = this.$item.dragEnabled === undefined ? gridDragEnabled : this.$item.dragEnabled;\n    return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\n  }\n\n  canBeResized() {\n    const gridResizable = this.gridster.$options.resizable.enabled;\n    const itemResizable = this.$item.resizeEnabled === undefined ? gridResizable : this.$item.resizeEnabled;\n    return !this.gridster.mobile && gridResizable && itemResizable;\n  }\n\n  bringToFront(offset) {\n    if (offset && offset <= 0) {\n      return;\n    }\n\n    const layerIndex = this.getLayerIndex();\n    const topIndex = this.gridster.$options.maxLayerIndex;\n\n    if (layerIndex < topIndex) {\n      const targetIndex = offset ? layerIndex + offset : topIndex;\n      this.item.layerIndex = this.$item.layerIndex = targetIndex > topIndex ? topIndex : targetIndex;\n    }\n  }\n\n  sendToBack(offset) {\n    if (offset && offset <= 0) {\n      return;\n    }\n\n    const layerIndex = this.getLayerIndex();\n\n    if (layerIndex > 0) {\n      const targetIndex = offset ? layerIndex - offset : 0;\n      this.item.layerIndex = this.$item.layerIndex = targetIndex < 0 ? 0 : targetIndex;\n    }\n  }\n\n  getLayerIndex() {\n    if (this.item.layerIndex !== undefined) {\n      return this.item.layerIndex;\n    }\n\n    if (this.gridster.$options.defaultLayerIndex !== undefined) {\n      return this.gridster.$options.defaultLayerIndex;\n    }\n\n    return 0;\n  }\n\n}\n\nGridsterItemComponent.ɵfac = function GridsterItemComponent_Factory(t) {\n  return new (t || GridsterItemComponent)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(GridsterComponent), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(NgZone));\n};\n\nGridsterItemComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridsterItemComponent,\n  selectors: [[\"gridster-item\"]],\n  hostVars: 2,\n  hostBindings: function GridsterItemComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"z-index\", ctx.zIndex);\n    }\n  },\n  inputs: {\n    item: \"item\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 9,\n  vars: 8,\n  consts: [[\"class\", \"gridster-item-resizable-handler handle-s\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-e\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-n\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-w\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-se\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-ne\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-sw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-nw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [1, \"gridster-item-resizable-handler\", \"handle-s\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-e\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-n\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-w\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-se\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-ne\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-sw\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-nw\", 3, \"mousedown\", \"touchstart\"]],\n  template: function GridsterItemComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n      i0.ɵɵtemplate(1, GridsterItemComponent_div_1_Template, 1, 0, \"div\", 0);\n      i0.ɵɵtemplate(2, GridsterItemComponent_div_2_Template, 1, 0, \"div\", 1);\n      i0.ɵɵtemplate(3, GridsterItemComponent_div_3_Template, 1, 0, \"div\", 2);\n      i0.ɵɵtemplate(4, GridsterItemComponent_div_4_Template, 1, 0, \"div\", 3);\n      i0.ɵɵtemplate(5, GridsterItemComponent_div_5_Template, 1, 0, \"div\", 4);\n      i0.ɵɵtemplate(6, GridsterItemComponent_div_6_Template, 1, 0, \"div\", 5);\n      i0.ɵɵtemplate(7, GridsterItemComponent_div_7_Template, 1, 0, \"div\", 6);\n      i0.ɵɵtemplate(8, GridsterItemComponent_div_8_Template, 1, 0, \"div\", 7);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.s && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.e && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.n && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.w && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.se && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.ne && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.sw && ctx.resize.resizeEnabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.nw && ctx.resize.resizeEnabled);\n    }\n  },\n  directives: [i2.NgIf],\n  styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px 0 #00000024,0 1px 18px 0 #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-color:#0000;border-style:solid;border-width:0 0 10px 10px}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:#0000 #0000 #ccc}\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterItemComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster-item',\n      templateUrl: './gridsterItem.html',\n      styleUrls: ['./gridsterItem.css'],\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }, {\n      type: GridsterComponent\n    }, {\n      type: i0.Renderer2,\n      decorators: [{\n        type: Inject,\n        args: [Renderer2]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Inject,\n        args: [NgZone]\n      }]\n    }];\n  }, {\n    item: [{\n      type: Input\n    }],\n    zIndex: [{\n      type: HostBinding,\n      args: ['style.z-index']\n    }]\n  });\n})();\n\nclass GridsterItemComponentInterface {}\n\nclass GridsterComponentInterface {}\n\nclass GridsterModule {}\n\nGridsterModule.ɵfac = function GridsterModule_Factory(t) {\n  return new (t || GridsterModule)();\n};\n\nGridsterModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GridsterModule\n});\nGridsterModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridsterModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GridsterComponent, GridsterItemComponent, GridsterPreviewComponent],\n      imports: [CommonModule],\n      exports: [GridsterComponent, GridsterItemComponent]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of gridster\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { CompactType, DirTypes, DisplayGrid, GridType, GridsterComponent, GridsterComponentInterface, GridsterConfigService, GridsterItemComponent, GridsterItemComponentInterface, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap }; //# sourceMappingURL=angular-gridster2.js.map","map":{"version":3,"sources":["D:/20241/hpt/Source/angular/node_modules/angular-gridster2/fesm2015/angular-gridster2.js"],"names":["i0","ElementRef","Renderer2","Component","ViewEncapsulation","Inject","Input","EventEmitter","ChangeDetectorRef","NgZone","HostBinding","NgModule","i2","CommonModule","GridType","DisplayGrid","CompactType","DirTypes","GridsterCompact","constructor","gridster","destroy","checkCompact","$options","compactType","None","CompactUp","checkCompactMovement","CompactLeft","CompactUpAndLeft","CompactLeftAndUp","CompactRight","CompactUpAndRight","CompactRightAndUp","CompactDown","CompactDownAndLeft","CompactDownAndRight","CompactLeftAndDown","CompactRightAndDown","checkCompactItem","item","moveTillCollision","direction","delta","widgetMoved","grid","forEach","widget","$item","compactEnabled","moved","itemChanged","checkCollision","GridsterConfigService","gridType","Fit","scale","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","setGridSize","mobileBreakpoint","allowMultiLayer","defaultLayerIndex","maxLayerIndex","baseLayerIndex","minCols","maxCols","minRows","maxRows","defaultItemCols","defaultItemRows","maxItemCols","maxItemRows","minItemCols","minItemRows","minItemArea","maxItemArea","rowHeightRatio","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","useTransformPositioning","scrollSensitivity","scrollSpeed","initCallback","undefined","destroyCallback","gridSizeChangedCallback","itemChangeCallback","itemResizeCallback","itemInitCallback","itemRemovedCallback","itemValidateCallback","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","enableOccupiedCellDrop","emptyCellClickCallback","emptyCellContextMenuCallback","emptyCellDropCallback","emptyCellDragCallback","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","delayStart","enabled","ignoreContentClass","ignoreContent","dragHandleClass","stop","start","dropOverItems","dropOverItemsCallback","resizable","handles","s","e","n","w","se","ne","sw","nw","swap","swapWhileDragging","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","OnDragAndResize","disableWindowResize","disableWarnings","scrollToNewItems","disableScrollHorizontal","disableScrollVertical","disableAutoPositionOnConflict","dirType","LTR","GridsterUtils","merge","obj1","obj2","properties","p","hasOwnProperty","debounce","func","wait","timeout","context","args","arguments","later","apply","clearTimeout","setTimeout","checkTouchEvent","clientX","touches","length","clientY","changedTouches","checkContentClassForEvent","checkDragHandleClass","target","currentTarget","checkContentClass","checkContentClassForEmptyCellClickEvent","current","hasAttribute","classnames","getAttribute","split","indexOf","parentNode","contentClass","compareItems","a","b","y","x","GridsterEmptyCell","initialItem","movingItem","previewStyle","emptyCellExit","updateOptions","emptyCellClick","options","renderer","listen","el","emptyCellClickCb","bind","emptyCellClickTouch","emptyCellContextMenu","emptyCellContextMenuCb","emptyCellDrop","emptyCellDragDrop","zone","runOutsideAngular","emptyCellMove","emptyCellDragOver","emptyCellDrag","emptyCellMouseDown","emptyCellDragTouch","getValidItemFromEvent","cdRef","markForCheck","preventDefault","stopPropagation","dataTransfer","dropEffect","leftMouseButtonCode","buttons","emptyCellMMove","emptyCellMouseMove","emptyCellMMoveTouch","emptyCellUp","emptyCellMouseUp","emptyCellUpTouch","getPixelsX","rect","left","scrollLeft","gridRenderer","getLeftMargin","getPixelsY","top","scrollTop","getTopMargin","oldItem","getBoundingClientRect","pixelsToPositionX","Math","floor","pixelsToPositionY","cols","rows","min","abs","GridsterRenderer","updateItem","mobile","clearCellPosition","setStyle","curWidth","round","curColWidth","curRowHeight","width","height","setCellPosition","marginBottom","marginRight","columns","updateGridster","addClass","removeClass1","removeClass2","removeClass3","ScrollVertical","ScrollHorizontal","Fixed","widthRatio","calWidthRatio","VerticalFixed","HorizontalFixed","removeClass","getGridColumnStyle","i","Object","assign","getLeftPosition","gridRows","getGridRowStyle","getTopPosition","gridColumns","d","dPosition","RTL","transform","xPosition","GridsterPreviewComponent","nativeElement","ngOnInit","sub","previewStyle$","subscribe","ngOnDestroy","unsubscribe","ɵfac","ɵcmp","type","selector","template","styleUrls","encapsulation","decorators","GridsterComponent","JSON","parse","stringify","calculateLayoutDebounce","calculateLayout","curHeight","dragInProgress","emptyCell","compact","checkCollisionTwoItemsForSwaping","item2","horizontalBoundaryItem1","horizontalBoundaryItem2","verticalBoundaryItem1","verticalBoundaryItem2","checkCollisionTwoItems","collision","layerIndex","layerIndex2","ngOnChanges","changes","setOptions","api","optionsChanged","resize","onResize","getNextPossiblePosition","getFirstPossiblePosition","getLastPossiblePosition","getItemComponent","offsetWidth","offsetHeight","clientWidth","clientHeight","checkIfToResize","windowResize","widgetsIndex","complete","scrollWidth","scrollHeight","verticalScrollPresent","horizontalScrollPresent","setGridDimensions","notPlaced","max","marginWidth","marginHeight","updateGrid","setSize","drag","toggle","getNewArrayLength","addItem","itemComponent","autoPositionItem","console","warn","push","removeItem","splice","checkGridCollision","c","findItemWithItem","noNegativePosition","maxGridCols","maxGridRows","inColsLimits","inRowsLimits","minAreaLimit","maxAreaLimit","area","inMinArea","inMaxArea","findItemsWithItem","newItem","startingFrom","rowsIndex","colsIndex","canAddToRows","canAddToColumns","addToRows","tmpItem","farthestItem","reduce","prev","curr","currCoords","roundingMethod","noLimit","position","positionXToPixels","positionYToPixels","find","checkCollisionForSwaping","findItemWithItemForSwapping","next","overallSize","size","newLength","Number","isFinite","NgForOf","NgStyle","templateUrl","GridsterPush","gridsterItem","iteration","pushedItems","pushedItemsTemp","pushedItemsTempPath","pushedItemsPath","tryPattern","fromEast","tryWest","trySouth","tryNorth","tryEast","fromWest","fromNorth","fromSouth","disable","pushedItemsOrder","pushed","restoreTempItems","removeFromTempPushed","restoreItems","l","pushedItem","setPushedItems","checkItemChanges","checkPushBack","change","checkPushedItem","conflicts","invert","sort","itemCollision","makePush","canBeDragged","call","lastIndexOf","j","pop","removeFromPushedItem","gridsterItemCollide","addToTempPushed","addToPushed","tempPosition","removeFromPushed","path","lastPosition","intervalDuration","gridsterElement","resizeEvent","resizeEventType","intervalE","intervalW","intervalN","intervalS","scroll","lastMouse","calculateItemPosition","resizeEventScrollType","offsetLeft","offsetTop","elemTopOffset","elemBottomOffset","cancelN","startVertical","cancelS","cancelVertical","elemRightOffset","elemLeftOffset","cancelW","startHorizontal","cancelE","cancelHorizontal","sign","setInterval","cancelScroll","clearInterval","GridsterSwap","swapedItem","swapItems","checkSwapBack","checkSwap","restoreSwapItem","setSwapItem","pushedBy","gridsterItemCollision","copyCollisionX","copyCollisionY","copyX","copyY","diffX","diffY","GridsterDraggable","mousedown","touchstart","dragStart","which","dragFunction","dragMove","dragStopFunction","dragStop","mousemove","touchmove","mouseup","mouseleave","cancelOnBlur","touchend","touchcancel","originalClientX","originalClientY","diffLeft","diffTop","calculateItemPositionFromMousePosition","calculateItemPositionWithScale","calculateItemPositionWithoutScale","run","Promise","resolve","then","makeDrag","cancelDrag","positionX","positionY","positionXBackup","positionYBackup","enableDrag","dragStartFunction","dragStartDelay","cancelMouse","cancelMouseLeave","cancelTouchMove","cancelMove","cancelTouchEnd","cancelTouchCancel","eventMove","GridsterPushResize","row","canBeResized","backUpY","backUpRows","backUpX","backUpCols","GridsterResizable","itemBackup","_a","_b","_c","bottom","right","diffRight","diffBottom","minHeight","minWidth","pushResize","directionFunction","handleN","handleE","handleW","handleS","handleNE","handleNW","handleSE","handleSW","makeResize","cancelResize","newPosition","setItemTop","setItemHeight","setItemLeft","setItemWidth","ceil","resizeEnabled","GridsterItemComponent","zIndex","getLayerIndex","init","previousValue","dragEnabled","updateItemSize","scrollIntoView","newValue","oldValue","gridDragEnabled","itemDragEnabled","gridResizable","itemResizable","bringToFront","offset","topIndex","targetIndex","sendToBack","NgIf","GridsterItemComponentInterface","GridsterComponentInterface","GridsterModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { ElementRef, Renderer2, Component, ViewEncapsulation, Inject, Input, EventEmitter, ChangeDetectorRef, NgZone, HostBinding, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nvar GridType;\r\n(function (GridType) {\r\n    GridType[\"Fit\"] = \"fit\";\r\n    GridType[\"ScrollVertical\"] = \"scrollVertical\";\r\n    GridType[\"ScrollHorizontal\"] = \"scrollHorizontal\";\r\n    GridType[\"Fixed\"] = \"fixed\";\r\n    GridType[\"VerticalFixed\"] = \"verticalFixed\";\r\n    GridType[\"HorizontalFixed\"] = \"horizontalFixed\";\r\n})(GridType || (GridType = {}));\r\nvar DisplayGrid;\r\n(function (DisplayGrid) {\r\n    DisplayGrid[\"Always\"] = \"always\";\r\n    DisplayGrid[\"OnDragAndResize\"] = \"onDrag&Resize\";\r\n    DisplayGrid[\"None\"] = \"none\";\r\n})(DisplayGrid || (DisplayGrid = {}));\r\nvar CompactType;\r\n(function (CompactType) {\r\n    CompactType[\"None\"] = \"none\";\r\n    CompactType[\"CompactUp\"] = \"compactUp\";\r\n    CompactType[\"CompactLeft\"] = \"compactLeft\";\r\n    CompactType[\"CompactUpAndLeft\"] = \"compactUp&Left\";\r\n    CompactType[\"CompactLeftAndUp\"] = \"compactLeft&Up\";\r\n    CompactType[\"CompactRight\"] = \"compactRight\";\r\n    CompactType[\"CompactUpAndRight\"] = \"compactUp&Right\";\r\n    CompactType[\"CompactRightAndUp\"] = \"compactRight&Up\";\r\n    CompactType[\"CompactDown\"] = \"compactDown\";\r\n    CompactType[\"CompactDownAndLeft\"] = \"compactDown&Left\";\r\n    CompactType[\"CompactLeftAndDown\"] = \"compactLeft&Down\";\r\n    CompactType[\"CompactDownAndRight\"] = \"compactDown&Right\";\r\n    CompactType[\"CompactRightAndDown\"] = \"compactRight&Down\";\r\n})(CompactType || (CompactType = {}));\r\nvar DirTypes;\r\n(function (DirTypes) {\r\n    DirTypes[\"LTR\"] = \"ltr\";\r\n    DirTypes[\"RTL\"] = \"rtl\";\r\n})(DirTypes || (DirTypes = {}));\n\nclass GridsterCompact {\r\n    constructor(gridster) {\r\n        this.gridster = gridster;\r\n    }\r\n    destroy() {\r\n        // @ts-ignore\r\n        delete this.gridster;\r\n    }\r\n    checkCompact() {\r\n        if (this.gridster.$options.compactType !== CompactType.None) {\r\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\r\n                this.checkCompactMovement('y', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\r\n                this.checkCompactMovement('x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\r\n                this.checkCompactMovement('y', -1);\r\n                this.checkCompactMovement('x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\r\n                this.checkCompactMovement('x', -1);\r\n                this.checkCompactMovement('y', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactRight) {\r\n                this.checkCompactMovement('x', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\r\n                this.checkCompactMovement('y', -1);\r\n                this.checkCompactMovement('x', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\r\n                this.checkCompactMovement('x', 1);\r\n                this.checkCompactMovement('y', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDown) {\r\n                this.checkCompactMovement('y', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\r\n                this.checkCompactMovement('y', 1);\r\n                this.checkCompactMovement('x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\r\n                this.checkCompactMovement('y', 1);\r\n                this.checkCompactMovement('x', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\r\n                this.checkCompactMovement('x', -1);\r\n                this.checkCompactMovement('y', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\r\n                this.checkCompactMovement('x', 1);\r\n                this.checkCompactMovement('y', 1);\r\n            }\r\n        }\r\n    }\r\n    checkCompactItem(item) {\r\n        if (this.gridster.$options.compactType !== CompactType.None) {\r\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\r\n                this.moveTillCollision(item, 'y', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\r\n                this.moveTillCollision(item, 'x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\r\n                this.moveTillCollision(item, 'y', -1);\r\n                this.moveTillCollision(item, 'x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\r\n                this.moveTillCollision(item, 'x', -1);\r\n                this.moveTillCollision(item, 'y', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\r\n                this.moveTillCollision(item, 'y', -1);\r\n                this.moveTillCollision(item, 'x', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDown) {\r\n                this.moveTillCollision(item, 'y', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\r\n                this.moveTillCollision(item, 'y', 1);\r\n                this.moveTillCollision(item, 'x', -1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\r\n                this.moveTillCollision(item, 'x', -1);\r\n                this.moveTillCollision(item, 'y', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\r\n                this.moveTillCollision(item, 'y', 1);\r\n                this.moveTillCollision(item, 'x', 1);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\r\n                this.moveTillCollision(item, 'x', 1);\r\n                this.moveTillCollision(item, 'y', 1);\r\n            }\r\n        }\r\n    }\r\n    checkCompactMovement(direction, delta) {\r\n        let widgetMoved = false;\r\n        this.gridster.grid.forEach((widget) => {\r\n            if (widget.$item.compactEnabled !== false) {\r\n                const moved = this.moveTillCollision(widget.$item, direction, delta);\r\n                if (moved) {\r\n                    widgetMoved = true;\r\n                    widget.item[direction] = widget.$item[direction];\r\n                    widget.itemChanged();\r\n                }\r\n            }\r\n        });\r\n        if (widgetMoved) {\r\n            this.checkCompact();\r\n        }\r\n    }\r\n    moveTillCollision(item, direction, delta) {\r\n        item[direction] += delta;\r\n        if (this.gridster.checkCollision(item)) {\r\n            item[direction] -= delta;\r\n            return false;\r\n        }\r\n        else {\r\n            this.moveTillCollision(item, direction, delta);\r\n            return true;\r\n        }\r\n    }\r\n}\n\nconst GridsterConfigService = {\r\n    gridType: GridType.Fit,\r\n    scale: 1,\r\n    // 'scrollVertical' will fit on width and height of the items will be the same as the width\r\n    // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\r\n    // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\r\n    // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\r\n    // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\r\n    fixedColWidth: 250,\r\n    fixedRowHeight: 250,\r\n    keepFixedHeightInMobile: false,\r\n    keepFixedWidthInMobile: false,\r\n    setGridSize: false,\r\n    compactType: CompactType.None,\r\n    mobileBreakpoint: 640,\r\n    allowMultiLayer: false,\r\n    defaultLayerIndex: 0,\r\n    maxLayerIndex: 2,\r\n    baseLayerIndex: 1,\r\n    minCols: 1,\r\n    maxCols: 100,\r\n    minRows: 1,\r\n    maxRows: 100,\r\n    defaultItemCols: 1,\r\n    defaultItemRows: 1,\r\n    maxItemCols: 50,\r\n    maxItemRows: 50,\r\n    minItemCols: 1,\r\n    minItemRows: 1,\r\n    minItemArea: 1,\r\n    maxItemArea: 2500,\r\n    rowHeightRatio: 1,\r\n    margin: 10,\r\n    outerMargin: true,\r\n    outerMarginTop: null,\r\n    outerMarginRight: null,\r\n    outerMarginBottom: null,\r\n    outerMarginLeft: null,\r\n    useTransformPositioning: true,\r\n    scrollSensitivity: 10,\r\n    scrollSpeed: 20,\r\n    initCallback: undefined,\r\n    destroyCallback: undefined,\r\n    gridSizeChangedCallback: undefined,\r\n    itemChangeCallback: undefined,\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemResizeCallback: undefined,\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemInitCallback: undefined,\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemRemovedCallback: undefined,\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemValidateCallback: undefined,\r\n    // Arguments: gridsterItem\r\n    enableEmptyCellClick: false,\r\n    enableEmptyCellContextMenu: false,\r\n    enableEmptyCellDrop: false,\r\n    enableEmptyCellDrag: false,\r\n    enableOccupiedCellDrop: false,\r\n    emptyCellClickCallback: undefined,\r\n    emptyCellContextMenuCallback: undefined,\r\n    emptyCellDropCallback: undefined,\r\n    emptyCellDragCallback: undefined,\r\n    emptyCellDragMaxCols: 50,\r\n    emptyCellDragMaxRows: 50,\r\n    // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\r\n    ignoreMarginInRow: false,\r\n    draggable: {\r\n        delayStart: 0,\r\n        enabled: false,\r\n        ignoreContentClass: 'gridster-item-content',\r\n        ignoreContent: false,\r\n        dragHandleClass: 'drag-handler',\r\n        stop: undefined,\r\n        start: undefined,\r\n        // Arguments: item, gridsterItem, event\r\n        dropOverItems: false,\r\n        dropOverItemsCallback: undefined // callback on drop over another item\r\n        // Arguments: source, target, gridComponent\r\n    },\r\n    resizable: {\r\n        delayStart: 0,\r\n        enabled: false,\r\n        handles: {\r\n            s: true,\r\n            e: true,\r\n            n: true,\r\n            w: true,\r\n            se: true,\r\n            ne: true,\r\n            sw: true,\r\n            nw: true\r\n        },\r\n        stop: undefined,\r\n        start: undefined // callback when resizing an item starts.\r\n        // Arguments: item, gridsterItem, event\r\n    },\r\n    swap: true,\r\n    swapWhileDragging: false,\r\n    pushItems: false,\r\n    disablePushOnDrag: false,\r\n    disablePushOnResize: false,\r\n    pushDirections: { north: true, east: true, south: true, west: true },\r\n    pushResizeItems: false,\r\n    displayGrid: DisplayGrid.OnDragAndResize,\r\n    disableWindowResize: false,\r\n    disableWarnings: false,\r\n    scrollToNewItems: false,\r\n    disableScrollHorizontal: false,\r\n    disableScrollVertical: false,\r\n    disableAutoPositionOnConflict: false,\r\n    dirType: DirTypes.LTR, // page direction, rtl=right to left ltr= left to right, if you use rtl language set dirType to rtl\r\n};\n\nclass GridsterUtils {\r\n    // tslint:disable-next-line:no-any\r\n    static merge(obj1, obj2, properties) {\r\n        for (const p in obj2) {\r\n            if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\r\n                if (typeof obj2[p] === 'object') {\r\n                    obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\r\n                }\r\n                else {\r\n                    obj1[p] = obj2[p];\r\n                }\r\n            }\r\n        }\r\n        return obj1;\r\n    }\r\n    static debounce(func, wait) {\r\n        let timeout;\r\n        return function () {\r\n            const context = this;\r\n            const args = arguments;\r\n            const later = () => {\r\n                timeout = undefined;\r\n                func.apply(context, args);\r\n            };\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    static checkTouchEvent(e) {\r\n        if (e.clientX === undefined && e.touches) {\r\n            if (e.touches && e.touches.length) {\r\n                e.clientX = e.touches[0].clientX;\r\n                e.clientY = e.touches[0].clientY;\r\n            }\r\n            else if (e.changedTouches && e.changedTouches.length) {\r\n                e.clientX = e.changedTouches[0].clientX;\r\n                e.clientY = e.changedTouches[0].clientY;\r\n            }\r\n        }\r\n    }\r\n    static checkContentClassForEvent(gridster, e) {\r\n        if (gridster.$options.draggable.ignoreContent) {\r\n            if (!GridsterUtils.checkDragHandleClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    static checkContentClassForEmptyCellClickEvent(gridster, e) {\r\n        return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)\r\n            || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\r\n    }\r\n    static checkDragHandleClass(target, current, dragHandleClass, ignoreContentClass) {\r\n        if (!target || target === current) {\r\n            return false;\r\n        }\r\n        if (target.hasAttribute('class')) {\r\n            // @ts-ignore\r\n            const classnames = target.getAttribute('class').split(' ');\r\n            if (classnames.indexOf(dragHandleClass) > -1) {\r\n                return true;\r\n            }\r\n            if (classnames.indexOf(ignoreContentClass) > -1) {\r\n                return false;\r\n            }\r\n        }\r\n        // @ts-ignore\r\n        return GridsterUtils.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\r\n    }\r\n    static checkContentClass(target, current, contentClass) {\r\n        if (!target || target === current) {\r\n            return false;\r\n        }\r\n        // @ts-ignore\r\n        if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\r\n            return true;\r\n        }\r\n        else {\r\n            // @ts-ignore\r\n            return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\r\n        }\r\n    }\r\n    static compareItems(a, b) {\r\n        if (a.y > b.y) {\r\n            return -1;\r\n        }\r\n        else if (a.y < b.y) {\r\n            return 1;\r\n        }\r\n        else if (a.x > b.x) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n}\n\nclass GridsterEmptyCell {\r\n    constructor(gridster) {\r\n        this.gridster = gridster;\r\n    }\r\n    destroy() {\r\n        // @ts-ignore\r\n        delete this.initialItem;\r\n        // @ts-ignore\r\n        delete this.gridster.movingItem;\r\n        if (this.gridster.previewStyle) {\r\n            this.gridster.previewStyle();\r\n        }\r\n        // @ts-ignore\r\n        delete this.gridster;\r\n        if (this.emptyCellExit) {\r\n            this.emptyCellExit();\r\n            this.emptyCellExit = null;\r\n        }\r\n    }\r\n    updateOptions() {\r\n        if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\r\n            this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\r\n            this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\r\n            this.emptyCellClick();\r\n            this.emptyCellClickTouch();\r\n            this.emptyCellClick = null;\r\n            this.emptyCellClickTouch = null;\r\n        }\r\n        if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\r\n            this.gridster.options.emptyCellContextMenuCallback) {\r\n            this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\r\n            this.emptyCellContextMenu();\r\n            this.emptyCellContextMenu = null;\r\n        }\r\n        if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\r\n            this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\r\n            this.gridster.zone.runOutsideAngular(() => {\r\n                this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\r\n            });\r\n            this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\r\n                this.gridster.movingItem = null;\r\n                this.gridster.previewStyle();\r\n            });\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\r\n            this.emptyCellDrop();\r\n            this.emptyCellMove();\r\n            this.emptyCellExit();\r\n            this.emptyCellMove = null;\r\n            this.emptyCellDrop = null;\r\n            this.emptyCellExit = null;\r\n        }\r\n        if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\r\n            this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\r\n            this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\r\n            this.emptyCellDrag();\r\n            this.emptyCellDragTouch();\r\n            this.emptyCellDrag = null;\r\n            this.emptyCellDragTouch = null;\r\n        }\r\n    }\r\n    emptyCellClickCb(e) {\r\n        if (!this.gridster || this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\r\n            return;\r\n        }\r\n        const item = this.getValidItemFromEvent(e);\r\n        if (!item) {\r\n            return;\r\n        }\r\n        if (this.gridster.options.emptyCellClickCallback) {\r\n            this.gridster.options.emptyCellClickCallback(e, item);\r\n        }\r\n        this.gridster.cdRef.markForCheck();\r\n    }\r\n    emptyCellContextMenuCb(e) {\r\n        if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const item = this.getValidItemFromEvent(e);\r\n        if (!item) {\r\n            return;\r\n        }\r\n        if (this.gridster.options.emptyCellContextMenuCallback) {\r\n            this.gridster.options.emptyCellContextMenuCallback(e, item);\r\n        }\r\n        this.gridster.cdRef.markForCheck();\r\n    }\r\n    emptyCellDragDrop(e) {\r\n        const item = this.getValidItemFromEvent(e);\r\n        if (!item) {\r\n            return;\r\n        }\r\n        if (this.gridster.options.emptyCellDropCallback) {\r\n            this.gridster.options.emptyCellDropCallback(e, item);\r\n        }\r\n        this.gridster.cdRef.markForCheck();\r\n    }\r\n    emptyCellDragOver(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const item = this.getValidItemFromEvent(e);\r\n        if (item) {\r\n            if (e.dataTransfer) {\r\n                e.dataTransfer.dropEffect = 'move';\r\n            }\r\n            this.gridster.movingItem = item;\r\n        }\r\n        else {\r\n            if (e.dataTransfer) {\r\n                e.dataTransfer.dropEffect = 'none';\r\n            }\r\n            this.gridster.movingItem = null;\r\n        }\r\n        this.gridster.previewStyle();\r\n    }\r\n    emptyCellMouseDown(e) {\r\n        if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const item = this.getValidItemFromEvent(e);\r\n        const leftMouseButtonCode = 1;\r\n        if (!item || e.buttons !== leftMouseButtonCode) {\r\n            return;\r\n        }\r\n        this.initialItem = item;\r\n        this.gridster.movingItem = item;\r\n        this.gridster.previewStyle();\r\n        this.gridster.zone.runOutsideAngular(() => {\r\n            this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\r\n            this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\r\n        });\r\n        this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\r\n        this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\r\n    }\r\n    emptyCellMouseMove(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const item = this.getValidItemFromEvent(e, this.initialItem);\r\n        if (!item) {\r\n            return;\r\n        }\r\n        this.gridster.movingItem = item;\r\n        this.gridster.previewStyle();\r\n    }\r\n    emptyCellMouseUp(e) {\r\n        this.emptyCellMMove();\r\n        this.emptyCellMMoveTouch();\r\n        this.emptyCellUp();\r\n        this.emptyCellUpTouch();\r\n        const item = this.getValidItemFromEvent(e, this.initialItem);\r\n        if (item) {\r\n            this.gridster.movingItem = item;\r\n        }\r\n        if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\r\n            this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\r\n        }\r\n        setTimeout(() => {\r\n            this.initialItem = null;\r\n            if (this.gridster) {\r\n                this.gridster.movingItem = null;\r\n                this.gridster.previewStyle();\r\n            }\r\n        });\r\n        this.gridster.cdRef.markForCheck();\r\n    }\r\n    getPixelsX(e, rect) {\r\n        const scale = this.gridster.options.scale;\r\n        if (scale) {\r\n            return (e.clientX - rect.left) / scale + this.gridster.el.scrollLeft - this.gridster.gridRenderer.getLeftMargin();\r\n        }\r\n        return e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.gridRenderer.getLeftMargin();\r\n    }\r\n    getPixelsY(e, rect) {\r\n        const scale = this.gridster.options.scale;\r\n        if (scale) {\r\n            return (e.clientY - rect.top) / scale + this.gridster.el.scrollTop - this.gridster.gridRenderer.getTopMargin();\r\n        }\r\n        return e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.gridRenderer.getTopMargin();\r\n    }\r\n    getValidItemFromEvent(e, oldItem) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        GridsterUtils.checkTouchEvent(e);\r\n        const rect = this.gridster.el.getBoundingClientRect();\r\n        const x = this.getPixelsX(e, rect);\r\n        const y = this.getPixelsY(e, rect);\r\n        const item = {\r\n            x: this.gridster.pixelsToPositionX(x, Math.floor, true),\r\n            y: this.gridster.pixelsToPositionY(y, Math.floor, true),\r\n            cols: this.gridster.$options.defaultItemCols,\r\n            rows: this.gridster.$options.defaultItemRows\r\n        };\r\n        if (oldItem) {\r\n            item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\r\n            item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\r\n            if (oldItem.x < item.x) {\r\n                item.x = oldItem.x;\r\n            }\r\n            else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\r\n                item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\r\n            }\r\n            if (oldItem.y < item.y) {\r\n                item.y = oldItem.y;\r\n            }\r\n            else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\r\n                item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\r\n            }\r\n        }\r\n        if (!this.gridster.$options.enableOccupiedCellDrop && this.gridster.checkCollision(item)) {\r\n            return;\r\n        }\r\n        return item;\r\n    }\r\n}\n\nclass GridsterRenderer {\r\n    constructor(gridster) {\r\n        this.gridster = gridster;\r\n    }\r\n    destroy() {\r\n        // @ts-ignore\r\n        delete this.gridster;\r\n    }\r\n    updateItem(el, item, renderer) {\r\n        if (this.gridster.mobile) {\r\n            this.clearCellPosition(renderer, el);\r\n            if (this.gridster.$options.keepFixedHeightInMobile) {\r\n                renderer.setStyle(el, 'height', (item.rows * this.gridster.$options.fixedRowHeight) + 'px');\r\n            }\r\n            else {\r\n                renderer.setStyle(el, 'height', (item.rows * this.gridster.curWidth / item.cols) + 'px');\r\n            }\r\n            if (this.gridster.$options.keepFixedWidthInMobile) {\r\n                renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\r\n            }\r\n            else {\r\n                renderer.setStyle(el, 'width', '');\r\n            }\r\n            renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\r\n            renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', '');\r\n        }\r\n        else {\r\n            const x = Math.round(this.gridster.curColWidth * item.x);\r\n            const y = Math.round(this.gridster.curRowHeight * item.y);\r\n            const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\r\n            const height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\r\n            // set the cell style\r\n            this.setCellPosition(renderer, el, x, y);\r\n            renderer.setStyle(el, 'width', width + 'px');\r\n            renderer.setStyle(el, 'height', height + 'px');\r\n            let marginBottom = null;\r\n            let marginRight = null;\r\n            if (this.gridster.$options.outerMargin) {\r\n                if (this.gridster.rows === item.rows + item.y) {\r\n                    if (this.gridster.$options.outerMarginBottom !== null) {\r\n                        marginBottom = this.gridster.$options.outerMarginBottom + 'px';\r\n                    }\r\n                    else {\r\n                        marginBottom = this.gridster.$options.margin + 'px';\r\n                    }\r\n                }\r\n                if (this.gridster.columns === item.cols + item.x) {\r\n                    if (this.gridster.$options.outerMarginBottom !== null) {\r\n                        marginRight = this.gridster.$options.outerMarginRight + 'px';\r\n                    }\r\n                    else {\r\n                        marginRight = this.gridster.$options.margin + 'px';\r\n                    }\r\n                }\r\n            }\r\n            renderer.setStyle(el, 'margin-bottom', marginBottom);\r\n            renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', marginRight);\r\n        }\r\n    }\r\n    updateGridster() {\r\n        let addClass = '';\r\n        let removeClass1 = '';\r\n        let removeClass2 = '';\r\n        let removeClass3 = '';\r\n        if (this.gridster.$options.gridType === GridType.Fit) {\r\n            addClass = GridType.Fit;\r\n            removeClass1 = GridType.ScrollVertical;\r\n            removeClass2 = GridType.ScrollHorizontal;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\r\n            this.gridster.curRowHeight = this.gridster.curColWidth * this.gridster.$options.rowHeightRatio;\r\n            addClass = GridType.ScrollVertical;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollHorizontal;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\r\n            const widthRatio = this.gridster.$options.rowHeightRatio;\r\n            const calWidthRatio = widthRatio >= 1 ? widthRatio : widthRatio + 1;\r\n            this.gridster.curColWidth = this.gridster.curRowHeight * calWidthRatio;\r\n            addClass = GridType.ScrollHorizontal;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollVertical;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.Fixed) {\r\n            this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\r\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\r\n            this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\r\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\r\n            addClass = GridType.Fixed;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollVertical;\r\n            removeClass3 = GridType.ScrollHorizontal;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\r\n            this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\r\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\r\n            addClass = GridType.ScrollVertical;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollHorizontal;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\r\n            this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\r\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\r\n            addClass = GridType.ScrollHorizontal;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollVertical;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        if (this.gridster.mobile || this.gridster.$options.setGridSize && this.gridster.$options.gridType !== GridType.Fit) {\r\n            this.gridster.renderer.removeClass(this.gridster.el, addClass);\r\n        }\r\n        else {\r\n            this.gridster.renderer.addClass(this.gridster.el, addClass);\r\n        }\r\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\r\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\r\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\r\n    }\r\n    getGridColumnStyle(i) {\r\n        return Object.assign(Object.assign({}, this.getLeftPosition(this.gridster.curColWidth * i)), { width: this.gridster.curColWidth - this.gridster.$options.margin + 'px', height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px' });\r\n    }\r\n    getGridRowStyle(i) {\r\n        return Object.assign(Object.assign({}, this.getTopPosition(this.gridster.curRowHeight * i)), { width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px', height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px' });\r\n    }\r\n    getLeftPosition(d) {\r\n        const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\r\n        if (this.gridster.$options.useTransformPositioning) {\r\n            return {\r\n                transform: 'translateX(' + dPosition + 'px)',\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                left: (this.getLeftMargin() + dPosition) + 'px'\r\n            };\r\n        }\r\n    }\r\n    getTopPosition(d) {\r\n        if (this.gridster.$options.useTransformPositioning) {\r\n            return {\r\n                transform: 'translateY(' + d + 'px)',\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                top: this.getTopMargin() + d + 'px'\r\n            };\r\n        }\r\n    }\r\n    clearCellPosition(renderer, el) {\r\n        if (this.gridster.$options.useTransformPositioning) {\r\n            renderer.setStyle(el, 'transform', '');\r\n        }\r\n        else {\r\n            renderer.setStyle(el, 'top', '');\r\n            renderer.setStyle(el, 'left', '');\r\n        }\r\n    }\r\n    setCellPosition(renderer, el, x, y) {\r\n        const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\r\n        if (this.gridster.$options.useTransformPositioning) {\r\n            const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\r\n            renderer.setStyle(el, 'transform', transform);\r\n        }\r\n        else {\r\n            renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\r\n            renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\r\n        }\r\n    }\r\n    getLeftMargin() {\r\n        if (this.gridster.$options.outerMargin) {\r\n            if (this.gridster.$options.outerMarginLeft !== null) {\r\n                return this.gridster.$options.outerMarginLeft;\r\n            }\r\n            else {\r\n                return this.gridster.$options.margin;\r\n            }\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    getTopMargin() {\r\n        if (this.gridster.$options.outerMargin) {\r\n            if (this.gridster.$options.outerMarginTop !== null) {\r\n                return this.gridster.$options.outerMarginTop;\r\n            }\r\n            else {\r\n                return this.gridster.$options.margin;\r\n            }\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n}\n\nclass GridsterPreviewComponent {\r\n    constructor(el, renderer) {\r\n        this.renderer = renderer;\r\n        this.el = el.nativeElement;\r\n    }\r\n    ngOnInit() {\r\n        this.sub = this.previewStyle$.subscribe(options => this.previewStyle(options));\r\n    }\r\n    ngOnDestroy() {\r\n        this.sub.unsubscribe();\r\n        // @ts-ignore\r\n        delete this.el;\r\n    }\r\n    previewStyle(item) {\r\n        if (item) {\r\n            this.renderer.setStyle(this.el, 'display', 'block');\r\n            this.gridRenderer.updateItem(this.el, item, this.renderer);\r\n        }\r\n        else {\r\n            this.renderer.setStyle(this.el, 'display', '');\r\n        }\r\n    }\r\n}\r\nGridsterPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.3\", ngImport: i0, type: GridsterPreviewComponent, deps: [{ token: ElementRef }, { token: Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\r\nGridsterPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.3\", type: GridsterPreviewComponent, selector: \"gridster-preview\", inputs: { previewStyle$: \"previewStyle$\", gridRenderer: \"gridRenderer\" }, ngImport: i0, template: '', isInline: true, styles: [\"gridster-preview{position:absolute;display:none;background:#00000026}\"], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.3\", ngImport: i0, type: GridsterPreviewComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'gridster-preview',\r\n                    template: '',\r\n                    styleUrls: ['./gridsterPreview.css'],\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{\r\n                    type: Inject,\r\n                    args: [ElementRef]\r\n                }] }, { type: i0.Renderer2, decorators: [{\r\n                    type: Inject,\r\n                    args: [Renderer2]\r\n                }] }]; }, propDecorators: { previewStyle$: [{\r\n                type: Input\r\n            }], gridRenderer: [{\r\n                type: Input\r\n            }] } });\n\nclass GridsterComponent {\r\n    constructor(el, renderer, cdRef, zone) {\r\n        this.renderer = renderer;\r\n        this.cdRef = cdRef;\r\n        this.zone = zone;\r\n        this.columns = 0;\r\n        this.rows = 0;\r\n        this.gridColumns = [];\r\n        this.gridRows = [];\r\n        this.previewStyle$ = new EventEmitter();\r\n        this.el = el.nativeElement;\r\n        this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\r\n        this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\r\n        this.mobile = false;\r\n        this.curWidth = 0;\r\n        this.curHeight = 0;\r\n        this.grid = [];\r\n        this.curColWidth = 0;\r\n        this.curRowHeight = 0;\r\n        this.dragInProgress = false;\r\n        this.emptyCell = new GridsterEmptyCell(this);\r\n        this.compact = new GridsterCompact(this);\r\n        this.gridRenderer = new GridsterRenderer(this);\r\n    }\r\n    // ------ Function for swapWhileDragging option\r\n    // identical to checkCollision() except that here we add boundaries.\r\n    static checkCollisionTwoItemsForSwaping(item, item2) {\r\n        // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\r\n        const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\r\n        const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\r\n        const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\r\n        const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\r\n        return item.x + horizontalBoundaryItem1 < item2.x + item2.cols\r\n            && item.x + item.cols > item2.x + horizontalBoundaryItem2\r\n            && item.y + verticalBoundaryItem1 < item2.y + item2.rows\r\n            && item.y + item.rows > item2.y + verticalBoundaryItem2;\r\n    }\r\n    checkCollisionTwoItems(item, item2) {\r\n        const collision = item.x < item2.x + item2.cols\r\n            && item.x + item.cols > item2.x\r\n            && item.y < item2.y + item2.rows\r\n            && item.y + item.rows > item2.y;\r\n        if (!collision) {\r\n            return false;\r\n        }\r\n        if (!this.$options.allowMultiLayer) {\r\n            return true;\r\n        }\r\n        const defaultLayerIndex = this.$options.defaultLayerIndex;\r\n        const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\r\n        const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\r\n        return layerIndex === layerIndex2;\r\n    }\r\n    ngOnInit() {\r\n        if (this.options.initCallback) {\r\n            this.options.initCallback(this);\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.options) {\r\n            this.setOptions();\r\n            this.options.api = {\r\n                optionsChanged: this.optionsChanged.bind(this),\r\n                resize: this.onResize.bind(this),\r\n                getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\r\n                getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\r\n                getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\r\n                getItemComponent: (item) => this.getItemComponent(item)\r\n            };\r\n            this.columns = this.$options.minCols;\r\n            this.rows = this.$options.minRows;\r\n            this.setGridSize();\r\n            this.calculateLayout();\r\n        }\r\n    }\r\n    resize() {\r\n        let height;\r\n        let width;\r\n        if (this.$options.gridType === 'fit' && !this.mobile) {\r\n            width = this.el.offsetWidth;\r\n            height = this.el.offsetHeight;\r\n        }\r\n        else {\r\n            width = this.el.clientWidth;\r\n            height = this.el.clientHeight;\r\n        }\r\n        if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\r\n            this.onResize();\r\n        }\r\n    }\r\n    setOptions() {\r\n        this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\r\n        if (!this.$options.disableWindowResize && !this.windowResize) {\r\n            this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\r\n        }\r\n        else if (this.$options.disableWindowResize && this.windowResize) {\r\n            this.windowResize();\r\n            this.windowResize = null;\r\n        }\r\n        this.emptyCell.updateOptions();\r\n    }\r\n    optionsChanged() {\r\n        this.setOptions();\r\n        let widgetsIndex = this.grid.length - 1;\r\n        let widget;\r\n        for (; widgetsIndex >= 0; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            widget.updateOptions();\r\n        }\r\n        this.calculateLayout();\r\n    }\r\n    ngOnDestroy() {\r\n        this.previewStyle$.complete();\r\n        if (this.windowResize) {\r\n            this.windowResize();\r\n        }\r\n        if (this.options && this.options.destroyCallback) {\r\n            this.options.destroyCallback(this);\r\n        }\r\n        if (this.options && this.options.api) {\r\n            this.options.api.resize = undefined;\r\n            this.options.api.optionsChanged = undefined;\r\n            this.options.api.getNextPossiblePosition = undefined;\r\n            this.options.api = undefined;\r\n        }\r\n        this.emptyCell.destroy();\r\n        // @ts-ignore\r\n        delete this.emptyCell;\r\n        this.compact.destroy();\r\n        // @ts-ignore\r\n        delete this.compact;\r\n    }\r\n    onResize() {\r\n        if (this.el.clientWidth) {\r\n            if (this.options.setGridSize) { // reset width/height so the size is recalculated afterwards\r\n                this.renderer.setStyle(this.el, 'width', '');\r\n                this.renderer.setStyle(this.el, 'height', '');\r\n            }\r\n            this.setGridSize();\r\n            this.calculateLayout();\r\n        }\r\n    }\r\n    checkIfToResize() {\r\n        const clientWidth = this.el.clientWidth;\r\n        const offsetWidth = this.el.offsetWidth;\r\n        const scrollWidth = this.el.scrollWidth;\r\n        const clientHeight = this.el.clientHeight;\r\n        const offsetHeight = this.el.offsetHeight;\r\n        const scrollHeight = this.el.scrollHeight;\r\n        const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\r\n            && scrollHeight - offsetHeight < offsetWidth - clientWidth;\r\n        const horizontalScrollPresent = clientHeight < offsetHeight\r\n            && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\r\n        if (verticalScrollPresent) {\r\n            return false;\r\n        }\r\n        return !horizontalScrollPresent;\r\n    }\r\n    setGridSize() {\r\n        const el = this.el;\r\n        let width;\r\n        let height;\r\n        if (this.$options.setGridSize || this.$options.gridType === GridType.Fit && !this.mobile) {\r\n            width = el.offsetWidth;\r\n            height = el.offsetHeight;\r\n        }\r\n        else {\r\n            width = el.clientWidth;\r\n            height = el.clientHeight;\r\n        }\r\n        this.curWidth = width;\r\n        this.curHeight = height;\r\n    }\r\n    setGridDimensions() {\r\n        this.setGridSize();\r\n        if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\r\n            this.mobile = !this.mobile;\r\n            this.renderer.addClass(this.el, 'mobile');\r\n        }\r\n        else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\r\n            this.mobile = !this.mobile;\r\n            this.renderer.removeClass(this.el, 'mobile');\r\n        }\r\n        let rows = this.$options.minRows;\r\n        let columns = this.$options.minCols;\r\n        let widgetsIndex = this.grid.length - 1;\r\n        let widget;\r\n        for (; widgetsIndex >= 0; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (!widget.notPlaced) {\r\n                rows = Math.max(rows, widget.$item.y + widget.$item.rows);\r\n                columns = Math.max(columns, widget.$item.x + widget.$item.cols);\r\n            }\r\n        }\r\n        if (this.columns !== columns || this.rows !== rows) {\r\n            this.columns = columns;\r\n            this.rows = rows;\r\n            if (this.options.gridSizeChangedCallback) {\r\n                this.options.gridSizeChangedCallback(this);\r\n            }\r\n        }\r\n    }\r\n    calculateLayout() {\r\n        if (this.compact) {\r\n            this.compact.checkCompact();\r\n        }\r\n        this.setGridDimensions();\r\n        if (this.$options.outerMargin) {\r\n            let marginWidth = -this.$options.margin;\r\n            if (this.$options.outerMarginLeft !== null) {\r\n                marginWidth += this.$options.outerMarginLeft;\r\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\r\n            }\r\n            else {\r\n                marginWidth += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\r\n            }\r\n            if (this.$options.outerMarginRight !== null) {\r\n                marginWidth += this.$options.outerMarginRight;\r\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\r\n            }\r\n            else {\r\n                marginWidth += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\r\n            }\r\n            this.curColWidth = (this.curWidth - marginWidth) / this.columns;\r\n            let marginHeight = -this.$options.margin;\r\n            if (this.$options.outerMarginTop !== null) {\r\n                marginHeight += this.$options.outerMarginTop;\r\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\r\n            }\r\n            else {\r\n                marginHeight += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\r\n            }\r\n            if (this.$options.outerMarginBottom !== null) {\r\n                marginHeight += this.$options.outerMarginBottom;\r\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\r\n            }\r\n            else {\r\n                marginHeight += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\r\n            }\r\n            this.curRowHeight = ((this.curHeight - marginHeight) / this.rows) * this.$options.rowHeightRatio;\r\n        }\r\n        else {\r\n            this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\r\n            this.curRowHeight = ((this.curHeight + this.$options.margin) / this.rows) * this.$options.rowHeightRatio;\r\n            this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\r\n            this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\r\n            this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\r\n            this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\r\n        }\r\n        this.gridRenderer.updateGridster();\r\n        if (this.$options.setGridSize) {\r\n            this.renderer.addClass(this.el, 'gridSize');\r\n            if (!this.mobile) {\r\n                this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\r\n                this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\r\n            }\r\n        }\r\n        else {\r\n            this.renderer.removeClass(this.el, 'gridSize');\r\n            this.renderer.setStyle(this.el, 'width', '');\r\n            this.renderer.setStyle(this.el, 'height', '');\r\n        }\r\n        this.updateGrid();\r\n        let widgetsIndex = this.grid.length - 1;\r\n        let widget;\r\n        for (; widgetsIndex >= 0; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            widget.setSize();\r\n            widget.drag.toggle();\r\n            widget.resize.toggle();\r\n        }\r\n        setTimeout(this.resize.bind(this), 100);\r\n    }\r\n    updateGrid() {\r\n        if (this.$options.displayGrid === 'always' && !this.mobile) {\r\n            this.renderer.addClass(this.el, 'display-grid');\r\n        }\r\n        else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\r\n            this.renderer.addClass(this.el, 'display-grid');\r\n        }\r\n        else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\r\n            this.renderer.removeClass(this.el, 'display-grid');\r\n        }\r\n        this.setGridDimensions();\r\n        this.gridColumns.length = GridsterComponent.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\r\n        this.gridRows.length = GridsterComponent.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\r\n        this.cdRef.markForCheck();\r\n    }\r\n    addItem(itemComponent) {\r\n        if (itemComponent.$item.cols === undefined) {\r\n            itemComponent.$item.cols = this.$options.defaultItemCols;\r\n            itemComponent.item.cols = itemComponent.$item.cols;\r\n            itemComponent.itemChanged();\r\n        }\r\n        if (itemComponent.$item.rows === undefined) {\r\n            itemComponent.$item.rows = this.$options.defaultItemRows;\r\n            itemComponent.item.rows = itemComponent.$item.rows;\r\n            itemComponent.itemChanged();\r\n        }\r\n        if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\r\n            this.autoPositionItem(itemComponent);\r\n        }\r\n        else if (this.checkCollision(itemComponent.$item)) {\r\n            if (!this.$options.disableWarnings) {\r\n                itemComponent.notPlaced = true;\r\n                console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\r\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\r\n            }\r\n            if (!this.$options.disableAutoPositionOnConflict) {\r\n                this.autoPositionItem(itemComponent);\r\n            }\r\n            else {\r\n                itemComponent.notPlaced = true;\r\n            }\r\n        }\r\n        this.grid.push(itemComponent);\r\n        this.calculateLayoutDebounce();\r\n    }\r\n    removeItem(itemComponent) {\r\n        this.grid.splice(this.grid.indexOf(itemComponent), 1);\r\n        this.calculateLayoutDebounce();\r\n        if (this.options.itemRemovedCallback) {\r\n            this.options.itemRemovedCallback(itemComponent.item, itemComponent);\r\n        }\r\n    }\r\n    checkCollision(item) {\r\n        let collision = false;\r\n        if (this.options.itemValidateCallback) {\r\n            collision = !this.options.itemValidateCallback(item);\r\n        }\r\n        if (!collision && this.checkGridCollision(item)) {\r\n            collision = true;\r\n        }\r\n        if (!collision) {\r\n            const c = this.findItemWithItem(item);\r\n            if (c) {\r\n                collision = c;\r\n            }\r\n        }\r\n        return collision;\r\n    }\r\n    checkGridCollision(item) {\r\n        const noNegativePosition = item.y > -1 && item.x > -1;\r\n        const maxGridCols = item.cols + item.x <= this.$options.maxCols;\r\n        const maxGridRows = item.rows + item.y <= this.$options.maxRows;\r\n        const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\r\n        const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\r\n        const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\r\n        const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\r\n        const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\r\n        const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\r\n        const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\r\n        const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\r\n        const area = item.cols * item.rows;\r\n        const inMinArea = minAreaLimit <= area;\r\n        const inMaxArea = maxAreaLimit >= area;\r\n        return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\r\n    }\r\n    findItemWithItem(item) {\r\n        let widgetsIndex = 0;\r\n        let widget;\r\n        for (; widgetsIndex < this.grid.length; widgetsIndex++) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\r\n                return widget;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    findItemsWithItem(item) {\r\n        const a = [];\r\n        let widgetsIndex = 0;\r\n        let widget;\r\n        for (; widgetsIndex < this.grid.length; widgetsIndex++) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\r\n                a.push(widget);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n    autoPositionItem(itemComponent) {\r\n        if (this.getNextPossiblePosition(itemComponent.$item)) {\r\n            itemComponent.notPlaced = false;\r\n            itemComponent.item.x = itemComponent.$item.x;\r\n            itemComponent.item.y = itemComponent.$item.y;\r\n            itemComponent.itemChanged();\r\n        }\r\n        else {\r\n            itemComponent.notPlaced = true;\r\n            if (!this.$options.disableWarnings) {\r\n                console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\r\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\r\n            }\r\n        }\r\n    }\r\n    getNextPossiblePosition(newItem, startingFrom = {}) {\r\n        if (newItem.cols === -1) {\r\n            newItem.cols = this.$options.defaultItemCols;\r\n        }\r\n        if (newItem.rows === -1) {\r\n            newItem.rows = this.$options.defaultItemRows;\r\n        }\r\n        this.setGridDimensions();\r\n        let rowsIndex = startingFrom.y || 0;\r\n        let colsIndex;\r\n        for (; rowsIndex < this.rows; rowsIndex++) {\r\n            newItem.y = rowsIndex;\r\n            colsIndex = startingFrom.x || 0;\r\n            for (; colsIndex < this.columns; colsIndex++) {\r\n                newItem.x = colsIndex;\r\n                if (!this.checkCollision(newItem)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\r\n        const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\r\n        const addToRows = this.rows <= this.columns && canAddToRows;\r\n        if (!addToRows && canAddToColumns) {\r\n            newItem.x = this.columns;\r\n            newItem.y = 0;\r\n            return true;\r\n        }\r\n        else if (canAddToRows) {\r\n            newItem.y = this.rows;\r\n            newItem.x = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getFirstPossiblePosition(item) {\r\n        const tmpItem = Object.assign({}, item);\r\n        this.getNextPossiblePosition(tmpItem);\r\n        return tmpItem;\r\n    }\r\n    getLastPossiblePosition(item) {\r\n        let farthestItem = { y: 0, x: 0 };\r\n        farthestItem = this.grid.reduce((prev, curr) => {\r\n            const currCoords = { y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1 };\r\n            if (GridsterUtils.compareItems(prev, currCoords) === 1) {\r\n                return currCoords;\r\n            }\r\n            else {\r\n                return prev;\r\n            }\r\n        }, farthestItem);\r\n        const tmpItem = Object.assign({}, item);\r\n        this.getNextPossiblePosition(tmpItem, farthestItem);\r\n        return tmpItem;\r\n    }\r\n    pixelsToPositionX(x, roundingMethod, noLimit) {\r\n        const position = roundingMethod(x / this.curColWidth);\r\n        if (noLimit) {\r\n            return position;\r\n        }\r\n        else {\r\n            return Math.max(position, 0);\r\n        }\r\n    }\r\n    pixelsToPositionY(y, roundingMethod, noLimit) {\r\n        const position = roundingMethod(y / this.curRowHeight);\r\n        if (noLimit) {\r\n            return position;\r\n        }\r\n        else {\r\n            return Math.max(position, 0);\r\n        }\r\n    }\r\n    positionXToPixels(x) {\r\n        return x * this.curColWidth;\r\n    }\r\n    positionYToPixels(y) {\r\n        return y * this.curRowHeight;\r\n    }\r\n    getItemComponent(item) {\r\n        return this.grid.find(c => c.item === item);\r\n    }\r\n    // ------ Functions for swapWhileDragging option\r\n    // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\r\n    checkCollisionForSwaping(item) {\r\n        let collision = false;\r\n        if (this.options.itemValidateCallback) {\r\n            collision = !this.options.itemValidateCallback(item);\r\n        }\r\n        if (!collision && this.checkGridCollision(item)) {\r\n            collision = true;\r\n        }\r\n        if (!collision) {\r\n            const c = this.findItemWithItemForSwapping(item);\r\n            if (c) {\r\n                collision = c;\r\n            }\r\n        }\r\n        return collision;\r\n    }\r\n    // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\r\n    findItemWithItemForSwapping(item) {\r\n        let widgetsIndex = this.grid.length - 1;\r\n        let widget;\r\n        for (; widgetsIndex > -1; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (widget.$item !== item && GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\r\n                return widget;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    previewStyle(drag = false) {\r\n        if (this.movingItem) {\r\n            if (this.compact && drag) {\r\n                this.compact.checkCompactItem(this.movingItem);\r\n            }\r\n            this.previewStyle$.next(this.movingItem);\r\n        }\r\n        else {\r\n            this.previewStyle$.next();\r\n        }\r\n    }\r\n    // ------ End of functions for swapWhileDragging option\r\n    // tslint:disable-next-line:member-ordering\r\n    static getNewArrayLength(length, overallSize, size) {\r\n        const newLength = Math.max(length, Math.floor(overallSize / size));\r\n        if (newLength < 0) {\r\n            return 0;\r\n        }\r\n        if (Number.isFinite(newLength)) {\r\n            return Math.floor(newLength);\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nGridsterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.3\", ngImport: i0, type: GridsterComponent, deps: [{ token: ElementRef }, { token: Renderer2 }, { token: ChangeDetectorRef }, { token: NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\nGridsterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.3\", type: GridsterComponent, selector: \"gridster\", inputs: { options: \"options\" }, usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"gridster-column\\\" *ngFor=\\\"let column of gridColumns; let i = index;\\\"\\n     [ngStyle]=\\\"gridRenderer.getGridColumnStyle(i)\\\"></div>\\n<div class=\\\"gridster-row\\\" *ngFor=\\\"let row of gridRows; let i = index;\\\"\\n     [ngStyle]=\\\"gridRenderer.getGridRowStyle(i)\\\"></div>\\n<ng-content></ng-content>\\n<gridster-preview [gridRenderer]=\\\"gridRenderer\\\" [previewStyle$]=\\\"previewStyle$\\\"\\n                  class=\\\"gridster-preview\\\"></gridster-preview>\\n\", styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster.gridSize{height:auto;width:auto}gridster.gridSize.fit{height:100%;width:100%}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}\"], components: [{ type: GridsterPreviewComponent, selector: \"gridster-preview\", inputs: [\"previewStyle$\", \"gridRenderer\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.3\", ngImport: i0, type: GridsterComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    // tslint:disable-next-line:component-selector\r\n                    selector: 'gridster',\r\n                    templateUrl: './gridster.html',\r\n                    styleUrls: ['./gridster.css'],\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{\r\n                    type: Inject,\r\n                    args: [ElementRef]\r\n                }] }, { type: i0.Renderer2, decorators: [{\r\n                    type: Inject,\r\n                    args: [Renderer2]\r\n                }] }, { type: i0.ChangeDetectorRef, decorators: [{\r\n                    type: Inject,\r\n                    args: [ChangeDetectorRef]\r\n                }] }, { type: i0.NgZone, decorators: [{\r\n                    type: Inject,\r\n                    args: [NgZone]\r\n                }] }]; }, propDecorators: { options: [{\r\n                type: Input\r\n            }] } });\n\nclass GridsterPush {\r\n    constructor(gridsterItem) {\r\n        this.iteration = 0;\r\n        this.pushedItems = [];\r\n        this.pushedItemsTemp = [];\r\n        this.pushedItemsTempPath = [];\r\n        this.pushedItemsPath = [];\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridsterItem.gridster;\r\n        this.tryPattern = {\r\n            fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\r\n            fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\r\n            fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\r\n            fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\r\n        };\r\n        this.fromSouth = 'fromSouth';\r\n        this.fromNorth = 'fromNorth';\r\n        this.fromEast = 'fromEast';\r\n        this.fromWest = 'fromWest';\r\n    }\r\n    destroy() {\r\n        // @ts-ignore\r\n        delete this.gridster;\r\n        // @ts-ignore\r\n        delete this.gridsterItem;\r\n    }\r\n    pushItems(direction, disable) {\r\n        if (this.gridster.$options.pushItems && !disable) {\r\n            this.pushedItemsOrder = [];\r\n            this.iteration = 0;\r\n            const pushed = this.push(this.gridsterItem, direction);\r\n            if (!pushed) {\r\n                this.restoreTempItems();\r\n            }\r\n            this.pushedItemsOrder = [];\r\n            this.pushedItemsTemp = [];\r\n            this.pushedItemsTempPath = [];\r\n            return pushed;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    restoreTempItems() {\r\n        let i = this.pushedItemsTemp.length - 1;\r\n        for (; i > -1; i--) {\r\n            this.removeFromTempPushed(this.pushedItemsTemp[i]);\r\n        }\r\n    }\r\n    restoreItems() {\r\n        let i = 0;\r\n        const l = this.pushedItems.length;\r\n        let pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.$item.x = pushedItem.item.x || 0;\r\n            pushedItem.$item.y = pushedItem.item.y || 0;\r\n            pushedItem.setSize();\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    setPushedItems() {\r\n        let i = 0;\r\n        const l = this.pushedItems.length;\r\n        let pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    checkPushBack() {\r\n        let i = this.pushedItems.length - 1;\r\n        let change = false;\r\n        for (; i > -1; i--) {\r\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\r\n                change = true;\r\n            }\r\n        }\r\n        if (change) {\r\n            this.checkPushBack();\r\n        }\r\n    }\r\n    push(gridsterItem, direction) {\r\n        if (this.iteration > 100) {\r\n            console.warn('max iteration reached');\r\n            return false;\r\n        }\r\n        if (this.gridster.checkGridCollision(gridsterItem.$item)) {\r\n            return false;\r\n        }\r\n        if (direction === '') {\r\n            return false;\r\n        }\r\n        const conflicts = this.gridster.findItemsWithItem(gridsterItem.$item);\r\n        const invert = direction === this.fromNorth || direction === this.fromWest;\r\n        // sort the list of conflicts in order of [y,x]. Invert when the push is from north and west\r\n        // this is done so they don't conflict witch each other and revert positions, keeping the previous order\r\n        conflicts.sort((a, b) => {\r\n            if (invert) {\r\n                return b.$item.y - a.$item.y || b.$item.x - a.$item.x;\r\n            }\r\n            else {\r\n                return a.$item.y - b.$item.y || a.$item.x - b.$item.x;\r\n            }\r\n        });\r\n        let i = 0;\r\n        let itemCollision;\r\n        let makePush = true;\r\n        const pushedItems = [];\r\n        for (; i < conflicts.length; i++) {\r\n            itemCollision = conflicts[i];\r\n            if (itemCollision === this.gridsterItem) {\r\n                continue;\r\n            }\r\n            if (!itemCollision.canBeDragged()) {\r\n                makePush = false;\r\n                break;\r\n            }\r\n            const p = this.pushedItemsTemp.indexOf(itemCollision);\r\n            if (p > -1 && this.pushedItemsTempPath[p].length > 10) { // stop if item is pushed more than 10 times to break infinite loops\r\n                makePush = false;\r\n                break;\r\n            }\r\n            if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                pushedItems.push(itemCollision);\r\n            }\r\n            else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                pushedItems.push(itemCollision);\r\n            }\r\n            else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                pushedItems.push(itemCollision);\r\n            }\r\n            else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                pushedItems.push(itemCollision);\r\n            }\r\n            else {\r\n                makePush = false;\r\n                break;\r\n            }\r\n        }\r\n        if (!makePush) {\r\n            i = this.pushedItemsOrder.lastIndexOf(pushedItems[0]);\r\n            if (i > -1) {\r\n                let j = this.pushedItemsOrder.length - 1;\r\n                for (; j >= i; j--) {\r\n                    itemCollision = this.pushedItemsOrder[j];\r\n                    this.pushedItemsOrder.pop();\r\n                    this.removeFromTempPushed(itemCollision);\r\n                    this.removeFromPushedItem(itemCollision);\r\n                }\r\n            }\r\n        }\r\n        this.iteration++;\r\n        return makePush;\r\n    }\r\n    trySouth(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.south) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\r\n        if (this.push(gridsterItemCollide, this.fromNorth)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    tryNorth(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.north) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\r\n        if (this.push(gridsterItemCollide, this.fromSouth)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    tryEast(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.east) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\r\n        if (this.push(gridsterItemCollide, this.fromWest)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    tryWest(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.west) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\r\n        if (this.push(gridsterItemCollide, this.fromEast)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    addToTempPushed(gridsterItem) {\r\n        let i = this.pushedItemsTemp.indexOf(gridsterItem);\r\n        if (i === -1) {\r\n            i = this.pushedItemsTemp.push(gridsterItem) - 1;\r\n            this.pushedItemsTempPath[i] = [];\r\n        }\r\n        this.pushedItemsTempPath[i].push({ x: gridsterItem.$item.x, y: gridsterItem.$item.y });\r\n    }\r\n    removeFromTempPushed(gridsterItem) {\r\n        const i = this.pushedItemsTemp.indexOf(gridsterItem);\r\n        const tempPosition = this.pushedItemsTempPath[i].pop();\r\n        if (!tempPosition) {\r\n            return;\r\n        }\r\n        gridsterItem.$item.x = tempPosition.x;\r\n        gridsterItem.$item.y = tempPosition.y;\r\n        gridsterItem.setSize();\r\n        if (!this.pushedItemsTempPath[i].length) {\r\n            this.pushedItemsTemp.splice(i, 1);\r\n            this.pushedItemsTempPath.splice(i, 1);\r\n        }\r\n    }\r\n    addToPushed(gridsterItem) {\r\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\r\n            this.pushedItems.push(gridsterItem);\r\n            this.pushedItemsPath.push([{ x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0 },\r\n                { x: gridsterItem.$item.x, y: gridsterItem.$item.y }]);\r\n        }\r\n        else {\r\n            const i = this.pushedItems.indexOf(gridsterItem);\r\n            this.pushedItemsPath[i].push({ x: gridsterItem.$item.x, y: gridsterItem.$item.y });\r\n        }\r\n    }\r\n    removeFromPushed(i) {\r\n        if (i > -1) {\r\n            this.pushedItems.splice(i, 1);\r\n            this.pushedItemsPath.splice(i, 1);\r\n        }\r\n    }\r\n    removeFromPushedItem(gridsterItem) {\r\n        const i = this.pushedItems.indexOf(gridsterItem);\r\n        if (i > -1) {\r\n            this.pushedItemsPath[i].pop();\r\n            if (!this.pushedItemsPath.length) {\r\n                this.pushedItems.splice(i, 1);\r\n                this.pushedItemsPath.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    checkPushedItem(pushedItem, i) {\r\n        const path = this.pushedItemsPath[i];\r\n        let j = path.length - 2;\r\n        let lastPosition;\r\n        let x;\r\n        let y;\r\n        let change = false;\r\n        for (; j > -1; j--) {\r\n            lastPosition = path[j];\r\n            x = pushedItem.$item.x;\r\n            y = pushedItem.$item.y;\r\n            pushedItem.$item.x = lastPosition.x;\r\n            pushedItem.$item.y = lastPosition.y;\r\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\r\n                pushedItem.setSize();\r\n                path.splice(j + 1, path.length - j - 1);\r\n                change = true;\r\n            }\r\n            else {\r\n                pushedItem.$item.x = x;\r\n                pushedItem.$item.y = y;\r\n            }\r\n        }\r\n        if (path.length < 2) {\r\n            this.removeFromPushed(i);\r\n        }\r\n        return change;\r\n    }\r\n}\n\nlet scrollSensitivity;\r\nlet scrollSpeed;\r\nconst intervalDuration = 50;\r\nlet gridsterElement;\r\nlet resizeEvent;\r\nlet resizeEventType;\r\nlet intervalE;\r\nlet intervalW;\r\nlet intervalN;\r\nlet intervalS;\r\nfunction scroll(gridster, left, top, width, height, e, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\r\n    scrollSensitivity = gridster.$options.scrollSensitivity;\r\n    scrollSpeed = gridster.$options.scrollSpeed;\r\n    gridsterElement = gridster.el;\r\n    resizeEvent = resize;\r\n    resizeEventType = resizeEventScrollType;\r\n    const offsetWidth = gridsterElement.offsetWidth;\r\n    const offsetHeight = gridsterElement.offsetHeight;\r\n    const offsetLeft = gridsterElement.scrollLeft;\r\n    const offsetTop = gridsterElement.scrollTop;\r\n    const elemTopOffset = top - offsetTop;\r\n    const elemBottomOffset = offsetHeight + offsetTop - top - height;\r\n    if (!gridster.$options.disableScrollVertical) {\r\n        if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\r\n            cancelN();\r\n            if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\r\n                return;\r\n            }\r\n            intervalS = startVertical(1, calculateItemPosition, lastMouse);\r\n        }\r\n        else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\r\n            cancelS();\r\n            if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\r\n                return;\r\n            }\r\n            intervalN = startVertical(-1, calculateItemPosition, lastMouse);\r\n        }\r\n        else if (lastMouse.clientY !== e.clientY) {\r\n            cancelVertical();\r\n        }\r\n    }\r\n    const elemRightOffset = offsetLeft + offsetWidth - left - width;\r\n    const elemLeftOffset = left - offsetLeft;\r\n    if (!gridster.$options.disableScrollHorizontal) {\r\n        if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\r\n            cancelW();\r\n            if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\r\n                return;\r\n            }\r\n            intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\r\n        }\r\n        else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\r\n            cancelE();\r\n            if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\r\n                return;\r\n            }\r\n            intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\r\n        }\r\n        else if (lastMouse.clientX !== e.clientX) {\r\n            cancelHorizontal();\r\n        }\r\n    }\r\n}\r\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\r\n    let clientY = lastMouse.clientY;\r\n    return setInterval(() => {\r\n        if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\r\n            cancelVertical();\r\n        }\r\n        // @ts-ignore\r\n        gridsterElement.scrollTop += sign * scrollSpeed;\r\n        clientY += sign * scrollSpeed;\r\n        calculateItemPosition({ clientX: lastMouse.clientX, clientY });\r\n    }, intervalDuration);\r\n}\r\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\r\n    let clientX = lastMouse.clientX;\r\n    return setInterval(() => {\r\n        if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\r\n            cancelHorizontal();\r\n        }\r\n        // @ts-ignore\r\n        gridsterElement.scrollLeft += sign * scrollSpeed;\r\n        clientX += sign * scrollSpeed;\r\n        calculateItemPosition({ clientX, clientY: lastMouse.clientY });\r\n    }, intervalDuration);\r\n}\r\nfunction cancelScroll() {\r\n    cancelHorizontal();\r\n    cancelVertical();\r\n    gridsterElement = null;\r\n}\r\nfunction cancelHorizontal() {\r\n    cancelE();\r\n    cancelW();\r\n}\r\nfunction cancelVertical() {\r\n    cancelN();\r\n    cancelS();\r\n}\r\nfunction cancelE() {\r\n    if (intervalE) {\r\n        clearInterval(intervalE);\r\n        intervalE = 0;\r\n    }\r\n}\r\nfunction cancelW() {\r\n    if (intervalW) {\r\n        clearInterval(intervalW);\r\n        intervalW = 0;\r\n    }\r\n}\r\nfunction cancelS() {\r\n    if (intervalS) {\r\n        clearInterval(intervalS);\r\n        intervalS = 0;\r\n    }\r\n}\r\nfunction cancelN() {\r\n    if (intervalN) {\r\n        clearInterval(intervalN);\r\n        intervalN = 0;\r\n    }\r\n}\n\nclass GridsterSwap {\r\n    constructor(gridsterItem) {\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridsterItem.gridster;\r\n    }\r\n    destroy() {\r\n        // @ts-ignore\r\n        delete this.gridster;\r\n        // @ts-ignore\r\n        delete this.gridsterItem;\r\n        delete this.swapedItem;\r\n    }\r\n    swapItems() {\r\n        if (this.gridster.$options.swap) {\r\n            this.checkSwapBack();\r\n            this.checkSwap(this.gridsterItem);\r\n        }\r\n    }\r\n    checkSwapBack() {\r\n        if (this.swapedItem) {\r\n            const x = this.swapedItem.$item.x;\r\n            const y = this.swapedItem.$item.y;\r\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\r\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\r\n            if (this.gridster.checkCollision(this.swapedItem.$item)) {\r\n                this.swapedItem.$item.x = x;\r\n                this.swapedItem.$item.y = y;\r\n            }\r\n            else {\r\n                this.swapedItem.setSize();\r\n                this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\r\n                this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\r\n                this.swapedItem = undefined;\r\n            }\r\n        }\r\n    }\r\n    restoreSwapItem() {\r\n        if (this.swapedItem) {\r\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\r\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\r\n            this.swapedItem.setSize();\r\n            this.swapedItem = undefined;\r\n        }\r\n    }\r\n    setSwapItem() {\r\n        if (this.swapedItem) {\r\n            this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\r\n            this.swapedItem = undefined;\r\n        }\r\n    }\r\n    checkSwap(pushedBy) {\r\n        let gridsterItemCollision;\r\n        if (this.gridster.$options.swapWhileDragging) {\r\n            gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\r\n        }\r\n        else {\r\n            gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\r\n        }\r\n        if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\r\n            const gridsterItemCollide = gridsterItemCollision;\r\n            const copyCollisionX = gridsterItemCollide.$item.x;\r\n            const copyCollisionY = gridsterItemCollide.$item.y;\r\n            const copyX = pushedBy.$item.x;\r\n            const copyY = pushedBy.$item.y;\r\n            const diffX = copyX - copyCollisionX;\r\n            const diffY = copyY - copyCollisionY;\r\n            gridsterItemCollide.$item.x = pushedBy.item.x - diffX;\r\n            gridsterItemCollide.$item.y = pushedBy.item.y - diffY;\r\n            pushedBy.$item.x = gridsterItemCollide.item.x + diffX;\r\n            pushedBy.$item.y = gridsterItemCollide.item.y + diffY;\r\n            if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\r\n                pushedBy.$item.x = copyX;\r\n                pushedBy.$item.y = copyY;\r\n                gridsterItemCollide.$item.x = copyCollisionX;\r\n                gridsterItemCollide.$item.y = copyCollisionY;\r\n            }\r\n            else {\r\n                gridsterItemCollide.setSize();\r\n                this.swapedItem = gridsterItemCollide;\r\n                if (this.gridster.$options.swapWhileDragging) {\r\n                    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\r\n                    this.setSwapItem();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n\nclass GridsterDraggable {\r\n    constructor(gridsterItem, gridster, zone) {\r\n        this.zone = zone;\r\n        this.collision = false;\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridster;\r\n        this.lastMouse = {\r\n            clientX: 0,\r\n            clientY: 0\r\n        };\r\n        this.path = [];\r\n    }\r\n    destroy() {\r\n        if (this.gridster.previewStyle) {\r\n            this.gridster.previewStyle(true);\r\n        }\r\n        // @ts-ignore\r\n        delete this.gridsterItem;\r\n        // @ts-ignore\r\n        delete this.gridster;\r\n        // @ts-ignore\r\n        delete this.collision;\r\n        if (this.mousedown) {\r\n            this.mousedown();\r\n            this.touchstart();\r\n        }\r\n    }\r\n    dragStart(e) {\r\n        if (e.which && e.which !== 1) {\r\n            return;\r\n        }\r\n        if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\r\n            this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.dragFunction = this.dragMove.bind(this);\r\n        this.dragStopFunction = this.dragStop.bind(this);\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\r\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\r\n        });\r\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\r\n        this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\r\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\r\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\r\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\r\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\r\n        this.margin = this.gridster.$options.margin;\r\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n        this.left = this.gridsterItem.left - this.margin;\r\n        this.top = this.gridsterItem.top - this.margin;\r\n        this.originalClientX = e.clientX;\r\n        this.originalClientY = e.clientY;\r\n        this.width = this.gridsterItem.width;\r\n        this.height = this.gridsterItem.height;\r\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n            this.diffLeft = (e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left);\r\n        }\r\n        else {\r\n            this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\r\n        }\r\n        this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\r\n        this.gridster.movingItem = this.gridsterItem.$item;\r\n        this.gridster.previewStyle(true);\r\n        this.push = new GridsterPush(this.gridsterItem);\r\n        this.swap = new GridsterSwap(this.gridsterItem);\r\n        this.gridster.dragInProgress = true;\r\n        this.gridster.updateGrid();\r\n        this.path.push({ x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0 });\r\n    }\r\n    dragMove(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        GridsterUtils.checkTouchEvent(e);\r\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition.bind(this));\r\n        this.calculateItemPositionFromMousePosition(e);\r\n    }\r\n    calculateItemPositionFromMousePosition(e) {\r\n        if (this.gridster.options.scale) {\r\n            this.calculateItemPositionWithScale(e, this.gridster.options.scale);\r\n        }\r\n        else {\r\n            this.calculateItemPositionWithoutScale(e);\r\n        }\r\n        this.calculateItemPosition();\r\n        this.lastMouse.clientX = e.clientX;\r\n        this.lastMouse.clientY = e.clientY;\r\n        this.zone.run(() => {\r\n            this.gridster.updateGrid();\r\n        });\r\n    }\r\n    calculateItemPositionWithScale(e, scale) {\r\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n            this.left = this.gridster.el.scrollWidth - this.originalClientX + ((e.clientX - this.originalClientX) / scale) + this.diffLeft;\r\n        }\r\n        else {\r\n            this.left = this.originalClientX + ((e.clientX - this.originalClientX) / scale) + this.offsetLeft - this.diffLeft;\r\n        }\r\n        this.top = this.originalClientY + ((e.clientY - this.originalClientY) / scale) + this.offsetTop - this.diffTop;\r\n    }\r\n    calculateItemPositionWithoutScale(e) {\r\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n            this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\r\n        }\r\n        else {\r\n            this.left = e.clientX + this.offsetLeft - this.diffLeft;\r\n        }\r\n        this.top = e.clientY + this.offsetTop - this.diffTop;\r\n    }\r\n    dragStop(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        cancelScroll();\r\n        this.cancelOnBlur();\r\n        this.mousemove();\r\n        this.mouseup();\r\n        this.mouseleave();\r\n        this.touchmove();\r\n        this.touchend();\r\n        this.touchcancel();\r\n        this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\r\n        this.gridster.dragInProgress = false;\r\n        this.gridster.updateGrid();\r\n        this.path = [];\r\n        if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\r\n            Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\r\n                .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\r\n        }\r\n        else {\r\n            this.makeDrag();\r\n        }\r\n        setTimeout(() => {\r\n            if (this.gridster) {\r\n                this.gridster.movingItem = null;\r\n                this.gridster.previewStyle(true);\r\n            }\r\n        });\r\n    }\r\n    cancelDrag() {\r\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\r\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\r\n        this.gridsterItem.setSize();\r\n        if (this.push) {\r\n            this.push.restoreItems();\r\n        }\r\n        if (this.swap) {\r\n            this.swap.restoreSwapItem();\r\n        }\r\n        if (this.push) {\r\n            this.push.destroy();\r\n            // @ts-ignore\r\n            delete this.push;\r\n        }\r\n        if (this.swap) {\r\n            this.swap.destroy();\r\n            // @ts-ignore\r\n            delete this.swap;\r\n        }\r\n    }\r\n    makeDrag() {\r\n        if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\r\n            && this.gridster.options.draggable.dropOverItemsCallback\r\n            && this.collision && this.collision !== true && this.collision.$item) {\r\n            this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\r\n        }\r\n        this.collision = false;\r\n        this.gridsterItem.setSize();\r\n        this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\r\n        if (this.push) {\r\n            this.push.setPushedItems();\r\n        }\r\n        if (this.swap) {\r\n            this.swap.setSwapItem();\r\n        }\r\n        if (this.push) {\r\n            this.push.destroy();\r\n            // @ts-ignore\r\n            delete this.push;\r\n        }\r\n        if (this.swap) {\r\n            this.swap.destroy();\r\n            // @ts-ignore\r\n            delete this.swap;\r\n        }\r\n    }\r\n    calculateItemPosition() {\r\n        this.gridster.movingItem = this.gridsterItem.$item;\r\n        this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\r\n        this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\r\n        this.positionXBackup = this.gridsterItem.$item.x;\r\n        this.positionYBackup = this.gridsterItem.$item.y;\r\n        this.gridsterItem.$item.x = this.positionX;\r\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\r\n            this.gridsterItem.$item.x = this.positionXBackup;\r\n        }\r\n        this.gridsterItem.$item.y = this.positionY;\r\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\r\n            this.gridsterItem.$item.y = this.positionYBackup;\r\n        }\r\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\r\n        if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\r\n            const lastPosition = this.path[this.path.length - 1];\r\n            let direction = '';\r\n            if (lastPosition.x < this.gridsterItem.$item.x) {\r\n                direction = this.push.fromWest;\r\n            }\r\n            else if (lastPosition.x > this.gridsterItem.$item.x) {\r\n                direction = this.push.fromEast;\r\n            }\r\n            else if (lastPosition.y < this.gridsterItem.$item.y) {\r\n                direction = this.push.fromNorth;\r\n            }\r\n            else if (lastPosition.y > this.gridsterItem.$item.y) {\r\n                direction = this.push.fromSouth;\r\n            }\r\n            this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\r\n            this.swap.swapItems();\r\n            this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\r\n            if (this.collision) {\r\n                this.gridsterItem.$item.x = this.positionXBackup;\r\n                this.gridsterItem.$item.y = this.positionYBackup;\r\n                if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\r\n                    this.gridster.movingItem = null;\r\n                }\r\n            }\r\n            else {\r\n                this.path.push({ x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y });\r\n            }\r\n            this.push.checkPushBack();\r\n        }\r\n        this.gridster.previewStyle(true);\r\n    }\r\n    toggle() {\r\n        const enableDrag = this.gridsterItem.canBeDragged();\r\n        if (!this.enabled && enableDrag) {\r\n            this.enabled = !this.enabled;\r\n            this.dragStartFunction = this.dragStartDelay.bind(this);\r\n            this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\r\n            this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\r\n        }\r\n        else if (this.enabled && !enableDrag) {\r\n            this.enabled = !this.enabled;\r\n            this.mousedown();\r\n            this.touchstart();\r\n        }\r\n    }\r\n    dragStartDelay(e) {\r\n        if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\r\n            return;\r\n        }\r\n        if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\r\n            return;\r\n        }\r\n        GridsterUtils.checkTouchEvent(e);\r\n        if (!this.gridster.$options.draggable.delayStart) {\r\n            this.dragStart(e);\r\n            return;\r\n        }\r\n        const timeout = setTimeout(() => {\r\n            this.dragStart(e);\r\n            cancelDrag();\r\n        }, this.gridster.$options.draggable.delayStart);\r\n        const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\r\n        const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\r\n        const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\r\n        const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\r\n        const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\r\n        const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\r\n        function cancelMove(eventMove) {\r\n            GridsterUtils.checkTouchEvent(eventMove);\r\n            if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\r\n                cancelDrag();\r\n            }\r\n        }\r\n        function cancelDrag() {\r\n            clearTimeout(timeout);\r\n            cancelOnBlur();\r\n            cancelMouse();\r\n            cancelMouseLeave();\r\n            cancelTouchMove();\r\n            cancelTouchEnd();\r\n            cancelTouchCancel();\r\n        }\r\n    }\r\n}\n\nclass GridsterPushResize {\r\n    constructor(gridsterItem) {\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridsterItem.gridster;\r\n        this.tryPattern = {\r\n            fromEast: this.tryWest,\r\n            fromWest: this.tryEast,\r\n            fromNorth: this.trySouth,\r\n            fromSouth: this.tryNorth\r\n        };\r\n        this.fromSouth = 'fromSouth';\r\n        this.fromNorth = 'fromNorth';\r\n        this.fromEast = 'fromEast';\r\n        this.fromWest = 'fromWest';\r\n    }\r\n    destroy() {\r\n        // @ts-ignore\r\n        delete this.gridster;\r\n        // @ts-ignore\r\n        delete this.gridsterItem;\r\n    }\r\n    pushItems(direction) {\r\n        if (this.gridster.$options.pushResizeItems) {\r\n            return this.push(this.gridsterItem, direction);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    restoreItems() {\r\n        let i = 0;\r\n        const l = this.pushedItems.length;\r\n        let pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.$item.x = pushedItem.item.x || 0;\r\n            pushedItem.$item.y = pushedItem.item.y || 0;\r\n            pushedItem.$item.cols = pushedItem.item.cols || 1;\r\n            pushedItem.$item.row = pushedItem.item.row || 1;\r\n            pushedItem.setSize();\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    setPushedItems() {\r\n        let i = 0;\r\n        const l = this.pushedItems.length;\r\n        let pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    checkPushBack() {\r\n        let i = this.pushedItems.length - 1;\r\n        let change = false;\r\n        for (; i > -1; i--) {\r\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\r\n                change = true;\r\n            }\r\n        }\r\n        if (change) {\r\n            this.checkPushBack();\r\n        }\r\n    }\r\n    push(gridsterItem, direction) {\r\n        const gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\r\n        if (gridsterItemCollision && gridsterItemCollision !== true &&\r\n            gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\r\n            if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\r\n                return true;\r\n            }\r\n        }\r\n        else if (gridsterItemCollision === false) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    trySouth(gridsterItemCollide, gridsterItem, direction) {\r\n        const backUpY = gridsterItemCollide.$item.y;\r\n        const backUpRows = gridsterItemCollide.$item.rows;\r\n        gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\r\n        gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\r\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\r\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.y = backUpY;\r\n            gridsterItemCollide.$item.rows = backUpRows;\r\n        }\r\n        return false;\r\n    }\r\n    tryNorth(gridsterItemCollide, gridsterItem, direction) {\r\n        const backUpRows = gridsterItemCollide.$item.rows;\r\n        gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\r\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\r\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.rows = backUpRows;\r\n        }\r\n        return false;\r\n    }\r\n    tryEast(gridsterItemCollide, gridsterItem, direction) {\r\n        const backUpX = gridsterItemCollide.$item.x;\r\n        const backUpCols = gridsterItemCollide.$item.cols;\r\n        gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\r\n        gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\r\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\r\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.x = backUpX;\r\n            gridsterItemCollide.$item.cols = backUpCols;\r\n        }\r\n        return false;\r\n    }\r\n    tryWest(gridsterItemCollide, gridsterItem, direction) {\r\n        const backUpCols = gridsterItemCollide.$item.cols;\r\n        gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\r\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\r\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.cols = backUpCols;\r\n        }\r\n        return false;\r\n    }\r\n    addToPushed(gridsterItem) {\r\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\r\n            this.pushedItems.push(gridsterItem);\r\n            this.pushedItemsPath.push([\r\n                {\r\n                    x: gridsterItem.item.x || 0,\r\n                    y: gridsterItem.item.y || 0,\r\n                    cols: gridsterItem.item.cols || 0,\r\n                    rows: gridsterItem.item.rows || 0\r\n                },\r\n                {\r\n                    x: gridsterItem.$item.x,\r\n                    y: gridsterItem.$item.y,\r\n                    cols: gridsterItem.$item.cols,\r\n                    rows: gridsterItem.$item.rows\r\n                }\r\n            ]);\r\n        }\r\n        else {\r\n            const i = this.pushedItems.indexOf(gridsterItem);\r\n            this.pushedItemsPath[i].push({\r\n                x: gridsterItem.$item.x,\r\n                y: gridsterItem.$item.y,\r\n                cols: gridsterItem.$item.cols,\r\n                rows: gridsterItem.$item.rows\r\n            });\r\n        }\r\n    }\r\n    removeFromPushed(i) {\r\n        if (i > -1) {\r\n            this.pushedItems.splice(i, 1);\r\n            this.pushedItemsPath.splice(i, 1);\r\n        }\r\n    }\r\n    checkPushedItem(pushedItem, i) {\r\n        const path = this.pushedItemsPath[i];\r\n        let j = path.length - 2;\r\n        let lastPosition;\r\n        let x;\r\n        let y;\r\n        let cols;\r\n        let rows;\r\n        for (; j > -1; j--) {\r\n            lastPosition = path[j];\r\n            x = pushedItem.$item.x;\r\n            y = pushedItem.$item.y;\r\n            cols = pushedItem.$item.cols;\r\n            rows = pushedItem.$item.rows;\r\n            pushedItem.$item.x = lastPosition.x;\r\n            pushedItem.$item.y = lastPosition.y;\r\n            pushedItem.$item.cols = lastPosition.cols;\r\n            pushedItem.$item.rows = lastPosition.rows;\r\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\r\n                pushedItem.setSize();\r\n                path.splice(j + 1, path.length - 1 - j);\r\n            }\r\n            else {\r\n                pushedItem.$item.x = x;\r\n                pushedItem.$item.y = y;\r\n                pushedItem.$item.cols = cols;\r\n                pushedItem.$item.rows = rows;\r\n            }\r\n        }\r\n        if (path.length < 2) {\r\n            this.removeFromPushed(i);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\n\nclass GridsterResizable {\r\n    constructor(gridsterItem, gridster, zone) {\r\n        this.zone = zone;\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridster;\r\n        this.lastMouse = {\r\n            clientX: 0,\r\n            clientY: 0\r\n        };\r\n        this.itemBackup = [0, 0, 0, 0];\r\n        this.resizeEventScrollType = { w: false, e: false, n: false, s: false };\r\n    }\r\n    destroy() {\r\n        if (this.gridster.previewStyle) {\r\n            this.gridster.previewStyle();\r\n        }\r\n        // @ts-ignore\r\n        delete this.gridsterItem;\r\n        // @ts-ignore\r\n        delete this.gridster;\r\n    }\r\n    dragStart(e) {\r\n        var _a, _b, _c;\r\n        if (e.which && e.which !== 1) {\r\n            return;\r\n        }\r\n        if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\r\n            this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.dragFunction = this.dragMove.bind(this);\r\n        this.dragStopFunction = this.dragStop.bind(this);\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\r\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\r\n        });\r\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\r\n        this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\r\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\r\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\r\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\r\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\r\n        this.lastMouse.clientX = e.clientX;\r\n        this.lastMouse.clientY = e.clientY;\r\n        this.left = this.gridsterItem.left;\r\n        this.top = this.gridsterItem.top;\r\n        this.originalClientX = e.clientX;\r\n        this.originalClientY = e.clientY;\r\n        this.width = this.gridsterItem.width;\r\n        this.height = this.gridsterItem.height;\r\n        this.bottom = this.gridsterItem.top + this.gridsterItem.height;\r\n        this.right = this.gridsterItem.left + this.gridsterItem.width;\r\n        this.margin = this.gridster.$options.margin;\r\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n        this.diffLeft = e.clientX + this.offsetLeft - this.left;\r\n        this.diffRight = e.clientX + this.offsetLeft - this.right;\r\n        this.diffTop = e.clientY + this.offsetTop - this.top;\r\n        this.diffBottom = e.clientY + this.offsetTop - this.bottom;\r\n        this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\r\n            - this.margin;\r\n        this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\r\n            - this.margin;\r\n        this.gridster.movingItem = this.gridsterItem.$item;\r\n        this.gridster.previewStyle();\r\n        this.push = new GridsterPush(this.gridsterItem);\r\n        this.pushResize = new GridsterPushResize(this.gridsterItem);\r\n        this.gridster.dragInProgress = true;\r\n        this.gridster.updateGrid();\r\n        if (((_a = e.target) === null || _a === void 0 ? void 0 : _a.hasAttribute('class')) && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\r\n            this.resizeEventScrollType.n = true;\r\n            this.directionFunction = this.handleN;\r\n        }\r\n        else if (((_b = e.target) === null || _b === void 0 ? void 0 : _b.hasAttribute('class')) && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.e = true;\r\n                this.directionFunction = this.handleE;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.w = true;\r\n                this.directionFunction = this.handleW;\r\n            }\r\n        }\r\n        else if (((_c = e.target) === null || _c === void 0 ? void 0 : _c.hasAttribute('class')) && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\r\n            this.resizeEventScrollType.s = true;\r\n            this.directionFunction = this.handleS;\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.w = true;\r\n                this.directionFunction = this.handleW;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.e = true;\r\n                this.directionFunction = this.handleE;\r\n            }\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.n = true;\r\n                this.resizeEventScrollType.e = true;\r\n                this.directionFunction = this.handleNE;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.n = true;\r\n                this.resizeEventScrollType.w = true;\r\n                this.directionFunction = this.handleNW;\r\n            }\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.n = true;\r\n                this.resizeEventScrollType.w = true;\r\n                this.directionFunction = this.handleNW;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.n = true;\r\n                this.resizeEventScrollType.e = true;\r\n                this.directionFunction = this.handleNE;\r\n            }\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.s = true;\r\n                this.resizeEventScrollType.e = true;\r\n                this.directionFunction = this.handleSE;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.s = true;\r\n                this.resizeEventScrollType.w = true;\r\n                this.directionFunction = this.handleSW;\r\n            }\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\r\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\r\n                this.resizeEventScrollType.s = true;\r\n                this.resizeEventScrollType.w = true;\r\n                this.directionFunction = this.handleSW;\r\n            }\r\n            else {\r\n                this.resizeEventScrollType.s = true;\r\n                this.resizeEventScrollType.e = true;\r\n                this.directionFunction = this.handleSE;\r\n            }\r\n        }\r\n    }\r\n    dragMove(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        GridsterUtils.checkTouchEvent(e);\r\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true, this.resizeEventScrollType);\r\n        const scale = this.gridster.options.scale || 1;\r\n        this.directionFunction({\r\n            clientX: this.originalClientX + (e.clientX - this.originalClientX) / scale,\r\n            clientY: this.originalClientY + (e.clientY - this.originalClientY) / scale\r\n        });\r\n        this.lastMouse.clientX = e.clientX;\r\n        this.lastMouse.clientY = e.clientY;\r\n        this.zone.run(() => {\r\n            this.gridster.updateGrid();\r\n        });\r\n    }\r\n    dragStop(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        cancelScroll();\r\n        this.mousemove();\r\n        this.mouseup();\r\n        this.mouseleave();\r\n        this.cancelOnBlur();\r\n        this.touchmove();\r\n        this.touchend();\r\n        this.touchcancel();\r\n        this.gridster.dragInProgress = false;\r\n        this.gridster.updateGrid();\r\n        if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\r\n            Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\r\n                .then(this.makeResize.bind(this), this.cancelResize.bind(this));\r\n        }\r\n        else {\r\n            this.makeResize();\r\n        }\r\n        setTimeout(() => {\r\n            this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\r\n            if (this.gridster) {\r\n                this.gridster.movingItem = null;\r\n                this.gridster.previewStyle();\r\n            }\r\n        });\r\n    }\r\n    cancelResize() {\r\n        this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\r\n        this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\r\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\r\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\r\n        this.gridsterItem.setSize();\r\n        this.push.restoreItems();\r\n        this.pushResize.restoreItems();\r\n        this.push.destroy();\r\n        // @ts-ignore\r\n        delete this.push;\r\n        this.pushResize.destroy();\r\n        // @ts-ignore\r\n        delete this.pushResize;\r\n    }\r\n    makeResize() {\r\n        this.gridsterItem.setSize();\r\n        this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\r\n        this.push.setPushedItems();\r\n        this.pushResize.setPushedItems();\r\n        this.push.destroy();\r\n        // @ts-ignore\r\n        delete this.push;\r\n        this.pushResize.destroy();\r\n        // @ts-ignore\r\n        delete this.pushResize;\r\n    }\r\n    handleN(e) {\r\n        this.top = e.clientY + this.offsetTop - this.diffTop;\r\n        this.height = this.bottom - this.top;\r\n        if (this.minHeight > this.height) {\r\n            this.height = this.minHeight;\r\n            this.top = this.bottom - this.minHeight;\r\n        }\r\n        this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\r\n        if (this.gridsterItem.$item.y !== this.newPosition) {\r\n            this.itemBackup[1] = this.gridsterItem.$item.y;\r\n            this.itemBackup[3] = this.gridsterItem.$item.rows;\r\n            this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\r\n            this.gridsterItem.$item.y = this.newPosition;\r\n            this.pushResize.pushItems(this.pushResize.fromSouth);\r\n            this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\r\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                this.gridsterItem.$item.y = this.itemBackup[1];\r\n                this.gridsterItem.$item.rows = this.itemBackup[3];\r\n                this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\r\n                this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\r\n                return;\r\n            }\r\n            else {\r\n                this.gridster.previewStyle();\r\n            }\r\n            this.pushResize.checkPushBack();\r\n            this.push.checkPushBack();\r\n        }\r\n        this.setItemTop(this.top);\r\n        this.setItemHeight(this.height);\r\n    }\r\n    handleW(e) {\r\n        const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\r\n        this.left = clientX + this.offsetLeft - this.diffLeft;\r\n        this.width = this.right - this.left;\r\n        if (this.minWidth > this.width) {\r\n            this.width = this.minWidth;\r\n            this.left = this.right - this.minWidth;\r\n        }\r\n        this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\r\n        if (this.gridsterItem.$item.x !== this.newPosition) {\r\n            this.itemBackup[0] = this.gridsterItem.$item.x;\r\n            this.itemBackup[2] = this.gridsterItem.$item.cols;\r\n            this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\r\n            this.gridsterItem.$item.x = this.newPosition;\r\n            this.pushResize.pushItems(this.pushResize.fromEast);\r\n            this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\r\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                this.gridsterItem.$item.x = this.itemBackup[0];\r\n                this.gridsterItem.$item.cols = this.itemBackup[2];\r\n                this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\r\n                this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\r\n                return;\r\n            }\r\n            else {\r\n                this.gridster.previewStyle();\r\n            }\r\n            this.pushResize.checkPushBack();\r\n            this.push.checkPushBack();\r\n        }\r\n        this.setItemLeft(this.left);\r\n        this.setItemWidth(this.width);\r\n    }\r\n    handleS(e) {\r\n        this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\r\n        if (this.minHeight > this.height) {\r\n            this.height = this.minHeight;\r\n        }\r\n        this.bottom = this.top + this.height;\r\n        this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\r\n        if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\r\n            this.itemBackup[3] = this.gridsterItem.$item.rows;\r\n            this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\r\n            this.pushResize.pushItems(this.pushResize.fromNorth);\r\n            this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\r\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                this.gridsterItem.$item.rows = this.itemBackup[3];\r\n                this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\r\n                return;\r\n            }\r\n            else {\r\n                this.gridster.previewStyle();\r\n            }\r\n            this.pushResize.checkPushBack();\r\n            this.push.checkPushBack();\r\n        }\r\n        this.setItemHeight(this.height);\r\n    }\r\n    handleE(e) {\r\n        const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\r\n        this.width = clientX + this.offsetLeft - this.diffRight - this.left;\r\n        if (this.minWidth > this.width) {\r\n            this.width = this.minWidth;\r\n        }\r\n        this.right = this.left + this.width;\r\n        this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\r\n        if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\r\n            this.itemBackup[2] = this.gridsterItem.$item.cols;\r\n            this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\r\n            this.pushResize.pushItems(this.pushResize.fromWest);\r\n            this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\r\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                this.gridsterItem.$item.cols = this.itemBackup[2];\r\n                this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\r\n                return;\r\n            }\r\n            else {\r\n                this.gridster.previewStyle();\r\n            }\r\n            this.pushResize.checkPushBack();\r\n            this.push.checkPushBack();\r\n        }\r\n        this.setItemWidth(this.width);\r\n    }\r\n    handleNW(e) {\r\n        this.handleN(e);\r\n        this.handleW(e);\r\n    }\r\n    handleNE(e) {\r\n        this.handleN(e);\r\n        this.handleE(e);\r\n    }\r\n    handleSW(e) {\r\n        this.handleS(e);\r\n        this.handleW(e);\r\n    }\r\n    handleSE(e) {\r\n        this.handleS(e);\r\n        this.handleE(e);\r\n    }\r\n    toggle() {\r\n        this.resizeEnabled = this.gridsterItem.canBeResized();\r\n    }\r\n    dragStartDelay(e) {\r\n        GridsterUtils.checkTouchEvent(e);\r\n        if (!this.gridster.$options.resizable.delayStart) {\r\n            this.dragStart(e);\r\n            return;\r\n        }\r\n        const timeout = setTimeout(() => {\r\n            this.dragStart(e);\r\n            cancelDrag();\r\n        }, this.gridster.$options.resizable.delayStart);\r\n        const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\r\n        const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\r\n        const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\r\n        const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\r\n        const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\r\n        const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\r\n        function cancelMove(eventMove) {\r\n            GridsterUtils.checkTouchEvent(eventMove);\r\n            if (Math.abs(eventMove.clientX - e.clientX) > 9\r\n                || Math.abs(eventMove.clientY - e.clientY) > 9) {\r\n                cancelDrag();\r\n            }\r\n        }\r\n        function cancelDrag() {\r\n            clearTimeout(timeout);\r\n            cancelOnBlur();\r\n            cancelMouse();\r\n            cancelMouseLeave();\r\n            cancelTouchMove();\r\n            cancelTouchEnd();\r\n            cancelTouchCancel();\r\n        }\r\n    }\r\n    setItemTop(top) {\r\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\r\n    }\r\n    setItemLeft(left) {\r\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\r\n    }\r\n    setItemHeight(height) {\r\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\r\n    }\r\n    setItemWidth(width) {\r\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\r\n    }\r\n}\n\nclass GridsterItemComponent {\r\n    constructor(el, gridster, renderer, zone) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.el = el.nativeElement;\r\n        this.$item = {\r\n            cols: -1,\r\n            rows: -1,\r\n            x: -1,\r\n            y: -1,\r\n        };\r\n        this.gridster = gridster;\r\n        this.drag = new GridsterDraggable(this, gridster, this.zone);\r\n        this.resize = new GridsterResizable(this, gridster, this.zone);\r\n    }\r\n    get zIndex() {\r\n        return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\r\n    }\r\n    ngOnInit() {\r\n        this.gridster.addItem(this);\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.item) {\r\n            this.updateOptions();\r\n            if (!this.init) {\r\n                this.gridster.calculateLayoutDebounce();\r\n            }\r\n        }\r\n        if (changes.item && changes.item.previousValue) {\r\n            this.setSize();\r\n        }\r\n    }\r\n    updateOptions() {\r\n        this.$item = GridsterUtils.merge(this.$item, this.item, {\r\n            cols: undefined,\r\n            rows: undefined,\r\n            x: undefined,\r\n            y: undefined,\r\n            layerIndex: undefined,\r\n            dragEnabled: undefined,\r\n            resizeEnabled: undefined,\r\n            compactEnabled: undefined,\r\n            maxItemRows: undefined,\r\n            minItemRows: undefined,\r\n            maxItemCols: undefined,\r\n            minItemCols: undefined,\r\n            maxItemArea: undefined,\r\n            minItemArea: undefined,\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.gridster.removeItem(this);\r\n        // @ts-ignore\r\n        delete this.gridster;\r\n        this.drag.destroy();\r\n        // @ts-ignore\r\n        delete this.drag;\r\n        this.resize.destroy();\r\n        // @ts-ignore\r\n        delete this.resize;\r\n    }\r\n    setSize() {\r\n        this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\r\n        this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\r\n        this.updateItemSize();\r\n    }\r\n    updateItemSize() {\r\n        const top = this.$item.y * this.gridster.curRowHeight;\r\n        const left = this.$item.x * this.gridster.curColWidth;\r\n        const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\r\n        const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\r\n        this.top = top;\r\n        this.left = left;\r\n        if (!this.init && width > 0 && height > 0) {\r\n            this.init = true;\r\n            if (this.item.initCallback) {\r\n                this.item.initCallback(this.item, this);\r\n            }\r\n            if (this.gridster.options.itemInitCallback) {\r\n                this.gridster.options.itemInitCallback(this.item, this);\r\n            }\r\n            if (this.gridster.$options.scrollToNewItems) {\r\n                this.el.scrollIntoView(false);\r\n            }\r\n        }\r\n        if (width !== this.width || height !== this.height) {\r\n            this.width = width;\r\n            this.height = height;\r\n            if (this.gridster.options.itemResizeCallback) {\r\n                this.gridster.options.itemResizeCallback(this.item, this);\r\n            }\r\n        }\r\n    }\r\n    itemChanged() {\r\n        if (this.gridster.options.itemChangeCallback) {\r\n            this.gridster.options.itemChangeCallback(this.item, this);\r\n        }\r\n    }\r\n    checkItemChanges(newValue, oldValue) {\r\n        if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\r\n            return;\r\n        }\r\n        if (this.gridster.checkCollision(this.$item)) {\r\n            this.$item.x = oldValue.x || 0;\r\n            this.$item.y = oldValue.y || 0;\r\n            this.$item.cols = oldValue.cols || 1;\r\n            this.$item.rows = oldValue.rows || 1;\r\n            this.setSize();\r\n        }\r\n        else {\r\n            this.item.cols = this.$item.cols;\r\n            this.item.rows = this.$item.rows;\r\n            this.item.x = this.$item.x;\r\n            this.item.y = this.$item.y;\r\n            this.gridster.calculateLayoutDebounce();\r\n            this.itemChanged();\r\n        }\r\n    }\r\n    canBeDragged() {\r\n        const gridDragEnabled = this.gridster.$options.draggable.enabled;\r\n        const itemDragEnabled = this.$item.dragEnabled === undefined ? gridDragEnabled : this.$item.dragEnabled;\r\n        return !this.gridster.mobile && gridDragEnabled && itemDragEnabled;\r\n    }\r\n    canBeResized() {\r\n        const gridResizable = this.gridster.$options.resizable.enabled;\r\n        const itemResizable = this.$item.resizeEnabled === undefined ? gridResizable : this.$item.resizeEnabled;\r\n        return !this.gridster.mobile && gridResizable && itemResizable;\r\n    }\r\n    bringToFront(offset) {\r\n        if (offset && offset <= 0) {\r\n            return;\r\n        }\r\n        const layerIndex = this.getLayerIndex();\r\n        const topIndex = this.gridster.$options.maxLayerIndex;\r\n        if (layerIndex < topIndex) {\r\n            const targetIndex = offset ? layerIndex + offset : topIndex;\r\n            this.item.layerIndex = this.$item.layerIndex = targetIndex > topIndex ? topIndex : targetIndex;\r\n        }\r\n    }\r\n    sendToBack(offset) {\r\n        if (offset && offset <= 0) {\r\n            return;\r\n        }\r\n        const layerIndex = this.getLayerIndex();\r\n        if (layerIndex > 0) {\r\n            const targetIndex = offset ? layerIndex - offset : 0;\r\n            this.item.layerIndex = this.$item.layerIndex = targetIndex < 0 ? 0 : targetIndex;\r\n        }\r\n    }\r\n    getLayerIndex() {\r\n        if (this.item.layerIndex !== undefined) {\r\n            return this.item.layerIndex;\r\n        }\r\n        if (this.gridster.$options.defaultLayerIndex !== undefined) {\r\n            return this.gridster.$options.defaultLayerIndex;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\nGridsterItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.3\", ngImport: i0, type: GridsterItemComponent, deps: [{ token: ElementRef }, { token: GridsterComponent }, { token: Renderer2 }, { token: NgZone }], target: i0.ɵɵFactoryTarget.Component });\r\nGridsterItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.3\", type: GridsterItemComponent, selector: \"gridster-item\", inputs: { item: \"item\" }, host: { properties: { \"style.z-index\": \"this.zIndex\" } }, usesOnChanges: true, ngImport: i0, template: \"<ng-content></ng-content>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.s && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-s\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.e && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-e\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.n && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-n\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.w && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-w\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.se && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-se\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.ne && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-ne\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.sw && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-sw\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.nw && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-nw\\\"></div>\\n\", styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:0s;z-index:2;box-shadow:0 0 5px 5px #0003,0 6px 10px 0 #00000024,0 1px 18px 0 #0000001f}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-color:#0000;border-style:solid;border-width:0 0 10px 10px}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:#0000 #0000 #ccc}\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.3\", ngImport: i0, type: GridsterItemComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'gridster-item',\r\n                    templateUrl: './gridsterItem.html',\r\n                    styleUrls: ['./gridsterItem.css'],\r\n                    encapsulation: ViewEncapsulation.None\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{\r\n                    type: Inject,\r\n                    args: [ElementRef]\r\n                }] }, { type: GridsterComponent }, { type: i0.Renderer2, decorators: [{\r\n                    type: Inject,\r\n                    args: [Renderer2]\r\n                }] }, { type: i0.NgZone, decorators: [{\r\n                    type: Inject,\r\n                    args: [NgZone]\r\n                }] }]; }, propDecorators: { item: [{\r\n                type: Input\r\n            }], zIndex: [{\r\n                type: HostBinding,\r\n                args: ['style.z-index']\r\n            }] } });\n\nclass GridsterItemComponentInterface {\r\n}\n\nclass GridsterComponentInterface {\r\n}\n\nclass GridsterModule {\r\n}\r\nGridsterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.3\", ngImport: i0, type: GridsterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nGridsterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.3\", ngImport: i0, type: GridsterModule, declarations: [GridsterComponent,\r\n        GridsterItemComponent,\r\n        GridsterPreviewComponent], imports: [CommonModule], exports: [GridsterComponent, GridsterItemComponent] });\r\nGridsterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.3\", ngImport: i0, type: GridsterModule, imports: [[\r\n            CommonModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.3\", ngImport: i0, type: GridsterModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        GridsterComponent,\r\n                        GridsterItemComponent,\r\n                        GridsterPreviewComponent\r\n                    ],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    exports: [GridsterComponent, GridsterItemComponent]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of gridster\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CompactType, DirTypes, DisplayGrid, GridType, GridsterComponent, GridsterComponentInterface, GridsterConfigService, GridsterItemComponent, GridsterItemComponentInterface, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap };\n//# sourceMappingURL=angular-gridster2.js.map\n"]},"metadata":{},"sourceType":"module"}