{"version":3,"sources":["../../src/lib/services/script.service.ts","../../src/lib/components/base-recaptcha.component.ts","../../../../node_modules/tslib/tslib.es6.js","../../src/lib/models/recaptcha-type.enum.ts","../../src/lib/components/invisible-recaptcha.component.ts","../../src/lib/components/recaptcha-2.component.ts","../../src/lib/services/recaptcha_v3.service.ts","../../src/lib/ngx-captcha.module.ts"],"names":["ScriptService","zone","this","windowGrecaptcha","windowOnLoadCallbackProperty","globalDomain","defaultDomain","prototype","registerCaptchaScript","useGlobalDomain","render","onLoad","language","_this","grecaptchaScriptLoaded","run","window","bind","scriptElem","document","createElement","innerHTML","src","getCaptchaScriptUrl","async","defer","getElementsByTagName","appendChild","cleanup","undefined","getLanguageParam","hl","Injectable","NgZone","BaseReCaptchaComponent","renderer","injector","scriptService","captchaElemPrefix","setupCaptcha","type","tabIndex","success","EventEmitter","load","reset","ready","error","expire","setupAfterLoad","resetCaptchaAfterSuccess","isLoaded","ngAfterViewInit","control","get","NgControl","ngAfterViewChecked","setupComponent","ngOnChanges","changes","firstChange","currentValue","previousValue","getResponse","reCaptchaApi","captchaId","getCaptchaId","resetCaptcha","onChange","onTouched","next","getCurrentResponse","currentResponse","reloadCaptcha","ensureCaptchaElem","captchaElemId","captchaElem","getElementById","Error","renderReCaptcha","runOutsideAngular","getCaptchaProperties","handleCallback","callback","getPseudoUniqueNumber","Date","getUTCMilliseconds","Math","floor","random","captchaSpecificSetup","createAndSetCaptchaElem","grecaptcha","onloadCallback","grecapcha","generateNewElemId","captchaWrapperElem","nativeElement","newElem","id","setTimeout","writeValue","obj","registerOnChange","fn","registerOnTouched","handleErrorCallback","handleExpireCallback","Directive","Renderer2","Injector","Input","Output","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","ReCaptchaType","InvisibleReCaptcha","ReCaptcha2","InvisibleReCaptchaComponent","_super","size","theme","badge","recaptchaType","execute","sitekey","siteKey","response","expired-callback","error-callback","tabindex","Component","args","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ViewChild","static","ReCaptcha2Component","windowOnErrorCallbackProperty","windowOnExpireCallbackProperty","ngOnDestroy","registerCallbacks","ReCaptchaV3Service","action","config","errorCallback","executeAsPromise","then","catch","console","Promise","resolve","reject","token","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\r\n\r\ndeclare var document: any;\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n\r\n    /**\r\n     * Name of the global google recaptcha script\r\n     */\r\n    protected readonly windowGrecaptcha = 'grecaptcha';\r\n\r\n    /**\r\n    * Name of the global callback\r\n    */\r\n    protected readonly windowOnLoadCallbackProperty = 'ngx_captcha_onload_callback';\r\n\r\n    protected readonly globalDomain: string = 'recaptcha.net';\r\n\r\n    protected readonly defaultDomain: string = 'google.com';\r\n\r\n    constructor(\r\n        protected zone: NgZone,\r\n    ) {\r\n    }\r\n\r\n    registerCaptchaScript(useGlobalDomain: boolean, render: string, onLoad: (grecaptcha: any) => void, language?: string): void {\r\n        if (this.grecaptchaScriptLoaded()) {\r\n            // recaptcha script is already loaded\r\n            // just call the callback\r\n            this.zone.run(() => {\r\n                onLoad(window[this.windowGrecaptcha]);\r\n            });\r\n            return;\r\n        }\r\n\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\r\n        window[this.windowOnLoadCallbackProperty] = <any>(() => this.zone.run(\r\n            onLoad.bind(this, window[this.windowGrecaptcha])\r\n        ));\r\n\r\n        // prepare script elem\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.src = this.getCaptchaScriptUrl(useGlobalDomain, render, language);\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n\r\n    cleanup(): void {\r\n        window[this.windowOnLoadCallbackProperty] = undefined;\r\n        window[this.windowGrecaptcha] = undefined;\r\n    }\r\n\r\n    /**\r\n     * Indicates if google recaptcha script is available and ready to be used\r\n     */\r\n    private grecaptchaScriptLoaded(): boolean {\r\n        if (window[this.windowOnLoadCallbackProperty] && window[this.windowGrecaptcha]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets language param used in script url\r\n     */\r\n    private getLanguageParam(hl?: string): string {\r\n        if (!hl) {\r\n            return '';\r\n        }\r\n\r\n        return `&hl=${hl}`;\r\n    }\r\n\r\n    /**\r\n    * Url to google api script\r\n    */\r\n    private getCaptchaScriptUrl(useGlobalDomain: boolean, render: string, language?: string): string {\r\n        const domain = useGlobalDomain ? this.globalDomain : this.defaultDomain;\r\n\r\n        // tslint:disable-next-line:max-line-length\r\n        return `https://www.${domain}/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=${render}${this.getLanguageParam(language)}`;\r\n    }\r\n\r\n}\r\n","import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, Injector, Input, NgZone, OnChanges, Output, Renderer2, SimpleChanges, Directive } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NgControl, AbstractControl } from '@angular/forms';\r\nimport { Type } from '@angular/core';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\n\r\n@Directive()\r\nexport abstract class BaseReCaptchaComponent implements OnChanges, ControlValueAccessor, AfterViewInit, AfterViewChecked {\r\n\r\n    /**\r\n    * Prefix of the captcha element\r\n    */\r\n    protected readonly captchaElemPrefix = 'ngx_captcha_id_';\r\n\r\n    private setupCaptcha: boolean = true;\r\n\r\n    /**\r\n    * Google's site key.\r\n    * You can find this under https://www.google.com/recaptcha\r\n    */\r\n    @Input() siteKey: string;\r\n\r\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     */\r\n    @Input() useGlobalDomain: boolean = false;\r\n\r\n    /**\r\n    * Type\r\n    */\r\n    @Input() type: 'audio' | 'image' = 'image';\r\n\r\n    /**\r\n    * Language code. Auto-detects the user's language if unspecified.\r\n    */\r\n    @Input() hl: string;\r\n\r\n    /**\r\n    * Tab index\r\n    */\r\n    @Input() tabIndex = 0;\r\n\r\n    /**\r\n    * Called when captcha receives successful response.\r\n    * Captcha response token is passed to event.\r\n    */\r\n    @Output() success = new EventEmitter<string>();\r\n\r\n    /**\r\n    * Called when captcha is loaded. Event receives id of the captcha\r\n    */\r\n    @Output() load = new EventEmitter<number>();\r\n\r\n    /**\r\n    * Called when captcha is reset.\r\n    */\r\n    @Output() reset = new EventEmitter<void>();\r\n\r\n    /**\r\n    * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n    */\r\n    @Output() ready = new EventEmitter<void>();\r\n\r\n    /**\r\n    * Error callback\r\n    */\r\n    @Output() error = new EventEmitter<void>();\r\n\r\n    /**\r\n    * Expired callback\r\n    */\r\n    @Output() expire = new EventEmitter<void>();\r\n\r\n    abstract captchaWrapperElem?: ElementRef;\r\n\r\n    /**\r\n    * Indicates if captcha should be set on load\r\n    */\r\n    private setupAfterLoad = false;\r\n\r\n    /**\r\n    * Captcha element\r\n    */\r\n    protected captchaElem?: HTMLElement;\r\n\r\n    /**\r\n    * Id of the captcha elem\r\n    */\r\n    protected captchaId?: number;\r\n\r\n    /**\r\n    * Holds last response value\r\n    */\r\n    protected currentResponse?: string;\r\n\r\n    /**\r\n    * If enabled, captcha will reset after receiving success response. This is useful\r\n    * when invisible captcha need to be resolved multiple times on same page\r\n    */\r\n    protected resetCaptchaAfterSuccess = false;\r\n\r\n    /**\r\n    * Captcha type\r\n    */\r\n    protected abstract recaptchaType: ReCaptchaType;\r\n\r\n    /**\r\n    * Required by ControlValueAccessor\r\n    */\r\n    protected onChange: (value: string | undefined) => void;\r\n    protected onTouched: (value: string | undefined) => void;\r\n\r\n    /**\r\n    * Indicates if captcha is loaded\r\n    */\r\n    public isLoaded = false;\r\n\r\n    /**\r\n    * Reference to global reCaptcha API\r\n    */\r\n    public reCaptchaApi?: any;\r\n\r\n    /**\r\n    * Id of the DOM element wrapping captcha\r\n    */\r\n    public captchaElemId?: string;\r\n\r\n    /**\r\n    * Form Control to be enable usage in reactive forms\r\n    */\r\n    public control?: AbstractControl | null;\r\n\r\n    protected constructor(\r\n        protected renderer: Renderer2,\r\n        protected zone: NgZone,\r\n        protected injector: Injector,\r\n        protected scriptService: ScriptService,\r\n    ) { }\r\n\r\n    ngAfterViewInit() {\r\n        this.control = this.injector.get<NgControl>(NgControl).control;\r\n    }\r\n\r\n    ngAfterViewChecked(): void {\r\n        if (this.setupCaptcha) {\r\n            this.setupCaptcha = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    protected abstract getCaptchaProperties(): any;\r\n\r\n    /**\r\n    * Used for captcha specific setup\r\n    */\r\n    protected abstract captchaSpecificSetup(): void;\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // cleanup scripts if language changed because they need to be reloaded\r\n        if (changes && changes.hl) {\r\n            // cleanup scripts when language changes\r\n            if (!changes.hl.firstChange && (changes.hl.currentValue !== changes.hl.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n\r\n        if (changes && changes.useGlobalDomain) {\r\n            // cleanup scripts when domain changes\r\n            if (!changes.useGlobalDomain.firstChange && (changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue)) {\r\n                this.scriptService.cleanup();\r\n            }\r\n        }\r\n\r\n        this.setupCaptcha = true;\r\n    }\r\n\r\n    /**\r\n    * Gets captcha response as per reCaptcha docs\r\n    */\r\n    getResponse(): string {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n\r\n    /**\r\n    * Gets Id of captcha widget\r\n    */\r\n    getCaptchaId(): number | undefined {\r\n        return this.captchaId;\r\n    }\r\n\r\n    /**\r\n    * Resets captcha\r\n    */\r\n    resetCaptcha(): void {\r\n        this.zone.run(() => {\r\n            // reset captcha using Google js api\r\n            this.reCaptchaApi.reset();\r\n\r\n            // required due to forms\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n\r\n\r\n            // trigger reset event\r\n            this.reset.next();\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Gets last submitted captcha response\r\n    */\r\n    getCurrentResponse(): string | undefined {\r\n        return this.currentResponse;\r\n    }\r\n\r\n    /**\r\n    * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n    */\r\n    reloadCaptcha(): void {\r\n        this.setupComponent();\r\n    }\r\n\r\n    protected ensureCaptchaElem(captchaElemId: string): void {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n    }\r\n\r\n    /**\r\n    * Responsible for instantiating captcha element\r\n    */\r\n    protected renderReCaptcha(): void {\r\n        // run outside angular zone due to timeout issues when testing\r\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\r\n        this.zone.runOutsideAngular(() => {\r\n            this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());\r\n            this.ready.next();\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Called when captcha receives response\r\n    * @param callback Callback\r\n    */\r\n    protected handleCallback(callback: any): void {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n\r\n        this.zone.run(() => {\r\n            this.onChange(callback);\r\n            this.onTouched(callback);\r\n        });\r\n\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\r\n    }\r\n\r\n    private setupComponent(): void {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n\r\n        // create captcha wrapper\r\n        this.createAndSetCaptchaElem();\r\n\r\n        this.scriptService.registerCaptchaScript(this.useGlobalDomain, 'explicit', (grecaptcha) => {\r\n            this.onloadCallback(grecaptcha);\r\n        }, this.hl);\r\n    }\r\n\r\n    /**\r\n    * Called when google's recaptcha script is ready\r\n    */\r\n    private onloadCallback(grecapcha: any): void {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecapcha;\r\n\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n\r\n        // fire load event\r\n        this.load.next();\r\n\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n\r\n        // setup component if it was flagged as such\r\n        if (this.setupAfterLoad) {\r\n            this.setupAfterLoad = false;\r\n            this.setupComponent();\r\n        }\r\n    }\r\n\r\n    private generateNewElemId(): string {\r\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\r\n    }\r\n\r\n    private createAndSetCaptchaElem(): void {\r\n        // generate new captcha id\r\n        this.captchaElemId = this.generateNewElemId();\r\n\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n\r\n        if (!this.captchaWrapperElem) {\r\n            throw Error(`Captcha DOM element is not initialized`);\r\n        }\r\n\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n\r\n        // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\r\n        // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\r\n        setTimeout(() => {\r\n            // update captcha elem\r\n            if (this.captchaElemId) {\r\n                this.ensureCaptchaElem(this.captchaElemId);\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    public writeValue(obj: any): void { }\r\n\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    public registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    /**\r\n    * At some point we might be interested whether the user has touched our component\r\n    */\r\n    public registerOnTouched(fn: any): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    /**\r\n    * Handles error callback\r\n    */\r\n    protected handleErrorCallback(): void {\r\n        this.zone.run(() => {\r\n            this.onChange(undefined);\r\n            this.onTouched(undefined);\r\n        });\r\n\r\n        this.error.next();\r\n    }\r\n\r\n    /**\r\n    * Handles expired callback\r\n    */\r\n    protected handleExpireCallback(): void {\r\n        this.expire.next();\r\n\r\n        // reset captcha on expire callback\r\n        this.resetCaptcha();\r\n    }\r\n}\r\n\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum ReCaptchaType {\r\n\r\n    InvisibleReCaptcha,\r\n    ReCaptcha2\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-invisible-recaptcha',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InvisibleReCaptchaComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponent implements OnChanges {\r\n\r\n  /**\r\n   * This size representing invisible captcha\r\n   */\r\n  protected readonly size = 'invisible';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n   * Badge\r\n   */\r\n  @Input() badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  @ViewChild('captchaWrapperElem', { static: false }) captchaWrapperElem: ElementRef;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.InvisibleReCaptcha;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\r\n  execute(): void {\r\n    // execute captcha\r\n    this.zone.runOutsideAngular(() => this.reCaptchaApi.execute(this.captchaId));\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n  }\r\n\r\n  /**\r\n  * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'badge': this.badge,\r\n      'type': this.type,\r\n      'tabindex': this.tabIndex,\r\n      'size': this.size,\r\n      'theme': this.theme\r\n    };\r\n  }\r\n\r\n\r\n}\r\n\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Injector,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha2',\r\n  template: `\r\n  <div #captchaWrapperElem></div>`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ReCaptcha2Component),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class ReCaptcha2Component extends BaseReCaptchaComponent implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n  * Name of the global expire callback\r\n  */\r\n  protected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n\r\n  /**\r\n  * Name of the global error callback\r\n  */\r\n  protected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n  * Size\r\n  */\r\n  @Input() size: 'compact' | 'normal' = 'normal';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  @ViewChild('captchaWrapperElem', { static: false}) captchaWrapperElem: ElementRef;\r\n\r\n  protected recaptchaType: ReCaptchaType = ReCaptchaType.ReCaptcha2;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    protected zone: NgZone,\r\n    protected injector: Injector,\r\n    protected scriptService: ScriptService,\r\n  ) {\r\n    super(renderer, zone, injector, scriptService);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    window[this.windowOnErrorCallbackProperty] = {};\r\n    window[this.windowOnExpireCallbackProperty] = {};\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n    this.registerCallbacks();\r\n  }\r\n\r\n  /**\r\n   * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.zone.run(() => this.handleCallback(response)),\r\n      'expired-callback': () => this.zone.run(() => this.handleExpireCallback()),\r\n      'error-callback': () => this.zone.run(() => this.handleErrorCallback()),\r\n      'theme': this.theme,\r\n      'type': this.type,\r\n      'size': this.size,\r\n      'tabindex': this.tabIndex\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Registers global callbacks\r\n  */\r\n  private registerCallbacks(): void {\r\n    window[this.windowOnErrorCallbackProperty] = super.handleErrorCallback.bind(this);\r\n    window[this.windowOnExpireCallbackProperty] = super.handleExpireCallback.bind(this);\r\n  }\r\n}\r\n\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { ScriptService } from './script.service';\r\n\r\n@Injectable()\r\nexport class ReCaptchaV3Service {\r\n  constructor(protected scriptService: ScriptService, protected zone: NgZone) {}\r\n\r\n  /**\r\n   * Executes reCaptcha v3 with given action and passes token via callback. You need to verify\r\n   * this callback in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   * @param callback Callback function to to handle token\r\n   * @param config Optional configuration like useGlobalDomain to be provided\r\n   * @param errorCallback Optional Callback function to handle errors\r\n   */\r\n  execute(\r\n    siteKey: string,\r\n    action: string,\r\n    callback: (token: string) => void,\r\n    config?: {\r\n      useGlobalDomain: boolean;\r\n    },\r\n    errorCallback?: (error: any) => void\r\n  ): void {\r\n    this.executeAsPromise(siteKey, action, config)\r\n      .then(callback)\r\n      .catch((error) => errorCallback ? errorCallback(error) : console.error(error));\r\n  }\r\n\r\n  /**\r\n   * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify\r\n   * this token in your backend to get meaningful results.\r\n   *\r\n   * For more information see https://developers.google.com/recaptcha/docs/v3\r\n   *\r\n   * @param siteKey Site key found in your google admin panel\r\n   * @param action Action to log\r\n   */\r\n  executeAsPromise(\r\n    siteKey: string,\r\n    action: string,\r\n    config?: {\r\n      useGlobalDomain: boolean;\r\n    }\r\n  ): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const useGlobalDomain = config && config.useGlobalDomain ? true : false;\r\n\r\n      const onRegister = grecaptcha => {\r\n        this.zone.runOutsideAngular(() => {\r\n          try {\r\n            grecaptcha\r\n              .execute(siteKey, { action })\r\n              .then(token => this.zone.run(() => resolve(token)));\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      };\r\n\r\n      this.scriptService.registerCaptchaScript(\r\n        useGlobalDomain,\r\n        siteKey,\r\n        onRegister\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { InvisibleReCaptchaComponent } from './components/invisible-recaptcha.component';\r\nimport { ReCaptcha2Component } from './components/recaptcha-2.component';\r\nimport { ReCaptchaV3Service } from './services/recaptcha_v3.service';\r\nimport { ScriptService } from './services/script.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ],\r\n  providers: [\r\n    ScriptService,\r\n    ReCaptchaV3Service\r\n  ],\r\n  exports: [\r\n    ReCaptcha2Component,\r\n    InvisibleReCaptchaComponent\r\n  ]\r\n})\r\nexport class NgxCaptchaModule {\r\n}\r\n\r\n\r\n"]}