{"version":3,"file":"base-recaptcha.component.d.ts","sources":["base-recaptcha.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, Injector, NgZone, OnChanges, Renderer2, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor, AbstractControl } from '@angular/forms';\r\nimport { ReCaptchaType } from '../models/recaptcha-type.enum';\r\nimport { ScriptService } from '../services/script.service';\r\nexport declare abstract class BaseReCaptchaComponent implements OnChanges, ControlValueAccessor, AfterViewInit, AfterViewChecked {\r\n    protected renderer: Renderer2;\r\n    protected zone: NgZone;\r\n    protected injector: Injector;\r\n    protected scriptService: ScriptService;\r\n    /**\r\n    * Prefix of the captcha element\r\n    */\r\n    protected readonly captchaElemPrefix = \"ngx_captcha_id_\";\r\n    private setupCaptcha;\r\n    /**\r\n    * Google's site key.\r\n    * You can find this under https://www.google.com/recaptcha\r\n    */\r\n    siteKey: string;\r\n    /**\r\n     * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n     */\r\n    useGlobalDomain: boolean;\r\n    /**\r\n    * Type\r\n    */\r\n    type: 'audio' | 'image';\r\n    /**\r\n    * Language code. Auto-detects the user's language if unspecified.\r\n    */\r\n    hl: string;\r\n    /**\r\n    * Tab index\r\n    */\r\n    tabIndex: number;\r\n    /**\r\n    * Called when captcha receives successful response.\r\n    * Captcha response token is passed to event.\r\n    */\r\n    success: EventEmitter<string>;\r\n    /**\r\n    * Called when captcha is loaded. Event receives id of the captcha\r\n    */\r\n    load: EventEmitter<number>;\r\n    /**\r\n    * Called when captcha is reset.\r\n    */\r\n    reset: EventEmitter<void>;\r\n    /**\r\n    * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n    */\r\n    ready: EventEmitter<void>;\r\n    /**\r\n    * Error callback\r\n    */\r\n    error: EventEmitter<void>;\r\n    /**\r\n    * Expired callback\r\n    */\r\n    expire: EventEmitter<void>;\r\n    abstract captchaWrapperElem?: ElementRef;\r\n    /**\r\n    * Indicates if captcha should be set on load\r\n    */\r\n    private setupAfterLoad;\r\n    /**\r\n    * Captcha element\r\n    */\r\n    protected captchaElem?: HTMLElement;\r\n    /**\r\n    * Id of the captcha elem\r\n    */\r\n    protected captchaId?: number;\r\n    /**\r\n    * Holds last response value\r\n    */\r\n    protected currentResponse?: string;\r\n    /**\r\n    * If enabled, captcha will reset after receiving success response. This is useful\r\n    * when invisible captcha need to be resolved multiple times on same page\r\n    */\r\n    protected resetCaptchaAfterSuccess: boolean;\r\n    /**\r\n    * Captcha type\r\n    */\r\n    protected abstract recaptchaType: ReCaptchaType;\r\n    /**\r\n    * Required by ControlValueAccessor\r\n    */\r\n    protected onChange: (value: string | undefined) => void;\r\n    protected onTouched: (value: string | undefined) => void;\r\n    /**\r\n    * Indicates if captcha is loaded\r\n    */\r\n    isLoaded: boolean;\r\n    /**\r\n    * Reference to global reCaptcha API\r\n    */\r\n    reCaptchaApi?: any;\r\n    /**\r\n    * Id of the DOM element wrapping captcha\r\n    */\r\n    captchaElemId?: string;\r\n    /**\r\n    * Form Control to be enable usage in reactive forms\r\n    */\r\n    control?: AbstractControl | null;\r\n    protected constructor(renderer: Renderer2, zone: NgZone, injector: Injector, scriptService: ScriptService);\r\n    ngAfterViewInit(): void;\r\n    ngAfterViewChecked(): void;\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    protected abstract getCaptchaProperties(): any;\r\n    /**\r\n    * Used for captcha specific setup\r\n    */\r\n    protected abstract captchaSpecificSetup(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /**\r\n    * Gets captcha response as per reCaptcha docs\r\n    */\r\n    getResponse(): string;\r\n    /**\r\n    * Gets Id of captcha widget\r\n    */\r\n    getCaptchaId(): number | undefined;\r\n    /**\r\n    * Resets captcha\r\n    */\r\n    resetCaptcha(): void;\r\n    /**\r\n    * Gets last submitted captcha response\r\n    */\r\n    getCurrentResponse(): string | undefined;\r\n    /**\r\n    * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n    */\r\n    reloadCaptcha(): void;\r\n    protected ensureCaptchaElem(captchaElemId: string): void;\r\n    /**\r\n    * Responsible for instantiating captcha element\r\n    */\r\n    protected renderReCaptcha(): void;\r\n    /**\r\n    * Called when captcha receives response\r\n    * @param callback Callback\r\n    */\r\n    protected handleCallback(callback: any): void;\r\n    private getPseudoUniqueNumber;\r\n    private setupComponent;\r\n    /**\r\n    * Called when google's recaptcha script is ready\r\n    */\r\n    private onloadCallback;\r\n    private generateNewElemId;\r\n    private createAndSetCaptchaElem;\r\n    /**\r\n     * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n     * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n     */\r\n    writeValue(obj: any): void;\r\n    /**\r\n     * This method helps us tie together recaptcha and our formControl values\r\n     */\r\n    registerOnChange(fn: any): void;\r\n    /**\r\n    * At some point we might be interested whether the user has touched our component\r\n    */\r\n    registerOnTouched(fn: any): void;\r\n    /**\r\n    * Handles error callback\r\n    */\r\n    protected handleErrorCallback(): void;\r\n    /**\r\n    * Handles expired callback\r\n    */\r\n    protected handleExpireCallback(): void;\r\n}\r\n"]}