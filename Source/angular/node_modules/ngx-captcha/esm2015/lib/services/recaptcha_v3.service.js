/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/recaptcha_v3.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { ScriptService } from './script.service';
export class ReCaptchaV3Service {
    /**
     * @param {?} scriptService
     * @param {?} zone
     */
    constructor(scriptService, zone) {
        this.scriptService = scriptService;
        this.zone = zone;
    }
    /**
     * Executes reCaptcha v3 with given action and passes token via callback. You need to verify
     * this callback in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param {?} siteKey Site key found in your google admin panel
     * @param {?} action Action to log
     * @param {?} callback Callback function to to handle token
     * @param {?=} config Optional configuration like useGlobalDomain to be provided
     * @param {?=} errorCallback Optional Callback function to handle errors
     * @return {?}
     */
    execute(siteKey, action, callback, config, errorCallback) {
        this.executeAsPromise(siteKey, action, config)
            .then(callback)
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        (error) => errorCallback ? errorCallback(error) : console.error(error)));
    }
    /**
     * Executes reCaptcha v3 with given action and returns token via Promise. You need to verify
     * this token in your backend to get meaningful results.
     *
     * For more information see https://developers.google.com/recaptcha/docs/v3
     *
     * @param {?} siteKey Site key found in your google admin panel
     * @param {?} action Action to log
     * @param {?=} config
     * @return {?}
     */
    executeAsPromise(siteKey, action, config) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            const useGlobalDomain = config && config.useGlobalDomain ? true : false;
            /** @type {?} */
            const onRegister = (/**
             * @param {?} grecaptcha
             * @return {?}
             */
            grecaptcha => {
                this.zone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => {
                    try {
                        grecaptcha
                            .execute(siteKey, { action })
                            .then((/**
                         * @param {?} token
                         * @return {?}
                         */
                        token => this.zone.run((/**
                         * @return {?}
                         */
                        () => resolve(token)))));
                    }
                    catch (error) {
                        reject(error);
                    }
                }));
            });
            this.scriptService.registerCaptchaScript(useGlobalDomain, siteKey, onRegister);
        }));
    }
}
ReCaptchaV3Service.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ReCaptchaV3Service.ctorParameters = () => [
    { type: ScriptService },
    { type: NgZone }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ReCaptchaV3Service.prototype.scriptService;
    /**
     * @type {?}
     * @protected
     */
    ReCaptchaV3Service.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjYXB0Y2hhX3YzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL3NlcnZpY2VzL3JlY2FwdGNoYV92My5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2pELE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBQzdCLFlBQXNCLGFBQTRCLEVBQVksSUFBWTtRQUFwRCxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUFZLFNBQUksR0FBSixJQUFJLENBQVE7SUFBRyxDQUFDOzs7Ozs7Ozs7Ozs7OztJQWM5RSxPQUFPLENBQ0wsT0FBZSxFQUNmLE1BQWMsRUFDZCxRQUFpQyxFQUNqQyxNQUVDLEVBQ0QsYUFBb0M7UUFFcEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO2FBQzNDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDZCxLQUFLOzs7O1FBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUM7SUFDbkYsQ0FBQzs7Ozs7Ozs7Ozs7O0lBV0QsZ0JBQWdCLENBQ2QsT0FBZSxFQUNmLE1BQWMsRUFDZCxNQUVDO1FBRUQsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7O2tCQUMvQixlQUFlLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSzs7a0JBRWpFLFVBQVU7Ozs7WUFBRyxVQUFVLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUI7OztnQkFBQyxHQUFHLEVBQUU7b0JBQy9CLElBQUk7d0JBQ0YsVUFBVTs2QkFDUCxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUM7NkJBQzVCLElBQUk7Ozs7d0JBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUc7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUMsRUFBQyxDQUFDO3FCQUN2RDtvQkFBQyxPQUFPLEtBQUssRUFBRTt3QkFDZCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ2Y7Z0JBQ0gsQ0FBQyxFQUFDLENBQUM7WUFDTCxDQUFDLENBQUE7WUFFRCxJQUFJLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUN0QyxlQUFlLEVBQ2YsT0FBTyxFQUNQLFVBQVUsQ0FDWCxDQUFDO1FBQ0osQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7WUFuRUYsVUFBVTs7OztZQUZGLGFBQWE7WUFGRCxNQUFNOzs7Ozs7O0lBTWIsMkNBQXNDOzs7OztJQUFFLGtDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgU2NyaXB0U2VydmljZSB9IGZyb20gJy4vc2NyaXB0LnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUmVDYXB0Y2hhVjNTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc2NyaXB0U2VydmljZTogU2NyaXB0U2VydmljZSwgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZSkge31cclxuXHJcbiAgLyoqXHJcbiAgICogRXhlY3V0ZXMgcmVDYXB0Y2hhIHYzIHdpdGggZ2l2ZW4gYWN0aW9uIGFuZCBwYXNzZXMgdG9rZW4gdmlhIGNhbGxiYWNrLiBZb3UgbmVlZCB0byB2ZXJpZnlcclxuICAgKiB0aGlzIGNhbGxiYWNrIGluIHlvdXIgYmFja2VuZCB0byBnZXQgbWVhbmluZ2Z1bCByZXN1bHRzLlxyXG4gICAqXHJcbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3JlY2FwdGNoYS9kb2NzL3YzXHJcbiAgICpcclxuICAgKiBAcGFyYW0gc2l0ZUtleSBTaXRlIGtleSBmb3VuZCBpbiB5b3VyIGdvb2dsZSBhZG1pbiBwYW5lbFxyXG4gICAqIEBwYXJhbSBhY3Rpb24gQWN0aW9uIHRvIGxvZ1xyXG4gICAqIEBwYXJhbSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbiB0byB0byBoYW5kbGUgdG9rZW5cclxuICAgKiBAcGFyYW0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gbGlrZSB1c2VHbG9iYWxEb21haW4gdG8gYmUgcHJvdmlkZWRcclxuICAgKiBAcGFyYW0gZXJyb3JDYWxsYmFjayBPcHRpb25hbCBDYWxsYmFjayBmdW5jdGlvbiB0byBoYW5kbGUgZXJyb3JzXHJcbiAgICovXHJcbiAgZXhlY3V0ZShcclxuICAgIHNpdGVLZXk6IHN0cmluZyxcclxuICAgIGFjdGlvbjogc3RyaW5nLFxyXG4gICAgY2FsbGJhY2s6ICh0b2tlbjogc3RyaW5nKSA9PiB2b2lkLFxyXG4gICAgY29uZmlnPzoge1xyXG4gICAgICB1c2VHbG9iYWxEb21haW46IGJvb2xlYW47XHJcbiAgICB9LFxyXG4gICAgZXJyb3JDYWxsYmFjaz86IChlcnJvcjogYW55KSA9PiB2b2lkXHJcbiAgKTogdm9pZCB7XHJcbiAgICB0aGlzLmV4ZWN1dGVBc1Byb21pc2Uoc2l0ZUtleSwgYWN0aW9uLCBjb25maWcpXHJcbiAgICAgIC50aGVuKGNhbGxiYWNrKVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiBlcnJvckNhbGxiYWNrID8gZXJyb3JDYWxsYmFjayhlcnJvcikgOiBjb25zb2xlLmVycm9yKGVycm9yKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeGVjdXRlcyByZUNhcHRjaGEgdjMgd2l0aCBnaXZlbiBhY3Rpb24gYW5kIHJldHVybnMgdG9rZW4gdmlhIFByb21pc2UuIFlvdSBuZWVkIHRvIHZlcmlmeVxyXG4gICAqIHRoaXMgdG9rZW4gaW4geW91ciBiYWNrZW5kIHRvIGdldCBtZWFuaW5nZnVsIHJlc3VsdHMuXHJcbiAgICpcclxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcmVjYXB0Y2hhL2RvY3MvdjNcclxuICAgKlxyXG4gICAqIEBwYXJhbSBzaXRlS2V5IFNpdGUga2V5IGZvdW5kIGluIHlvdXIgZ29vZ2xlIGFkbWluIHBhbmVsXHJcbiAgICogQHBhcmFtIGFjdGlvbiBBY3Rpb24gdG8gbG9nXHJcbiAgICovXHJcbiAgZXhlY3V0ZUFzUHJvbWlzZShcclxuICAgIHNpdGVLZXk6IHN0cmluZyxcclxuICAgIGFjdGlvbjogc3RyaW5nLFxyXG4gICAgY29uZmlnPzoge1xyXG4gICAgICB1c2VHbG9iYWxEb21haW46IGJvb2xlYW47XHJcbiAgICB9XHJcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHVzZUdsb2JhbERvbWFpbiA9IGNvbmZpZyAmJiBjb25maWcudXNlR2xvYmFsRG9tYWluID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgICAgY29uc3Qgb25SZWdpc3RlciA9IGdyZWNhcHRjaGEgPT4ge1xyXG4gICAgICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBncmVjYXB0Y2hhXHJcbiAgICAgICAgICAgICAgLmV4ZWN1dGUoc2l0ZUtleSwgeyBhY3Rpb24gfSlcclxuICAgICAgICAgICAgICAudGhlbih0b2tlbiA9PiB0aGlzLnpvbmUucnVuKCgpID0+IHJlc29sdmUodG9rZW4pKSk7XHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5zY3JpcHRTZXJ2aWNlLnJlZ2lzdGVyQ2FwdGNoYVNjcmlwdChcclxuICAgICAgICB1c2VHbG9iYWxEb21haW4sXHJcbiAgICAgICAgc2l0ZUtleSxcclxuICAgICAgICBvblJlZ2lzdGVyXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19