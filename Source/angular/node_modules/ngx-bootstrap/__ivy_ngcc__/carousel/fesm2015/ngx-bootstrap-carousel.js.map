{"version":3,"file":"ngx-bootstrap-carousel.js","sources":["ngx-bootstrap/carousel/carousel.config.ts","ngx-bootstrap/carousel/utils.ts","ngx-bootstrap/carousel/carousel.component.ts","ngx-bootstrap/carousel/slide.component.ts","ngx-bootstrap/carousel/carousel.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CarouselConfig {\n  /** Default interval of auto changing of slides */\n  interval = 5000;\n\n  /** Is loop of auto changing of slides can be paused */\n  noPause = false;\n\n  /** Is slides can wrap from the last to the first slide */\n  noWrap = false;\n\n  /** Show carousel-indicators */\n  showIndicators = true;\n\n  /* If value more then 1 â carousel works in multilist mode */\n  itemsPerSlide = 1;\n\n  /* If `true` â carousel shifts by one element. By default carousel shifts by number\n    of visible elements (itemsPerSlide field) */\n  singleSlideOffset = false;\n}\n","/**\n * Returns the index of the last element in the array where predicate is true, and -1\n * otherwise.\n * @param array The source array to search in\n * @param predicate find calls predicate once for each element of the array, in descending\n * order, until it finds one where predicate returns true. If such an element is found,\n * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.\n */\nexport function findLastIndex<T>(array: T[], predicate: (value: T, index: number, obj: T[]) => boolean): number {\n  let l = array.length;\n\n  while (l--) {\n    if (predicate(array[l], l, array)) {\n      return l;\n    }\n  }\n\n  return -1;\n}\n\nexport function chunkByNumber<T>(array: T[], size: number): T[][] {\n  const out = [];\n  const n = Math.ceil((array.length) / size);\n  let i = 0;\n\n  while (i < n) {\n    const chunk = array.splice(\n      0,\n      (i === n - 1) && size < array.length ? array.length : size\n    );\n\n    out.push(chunk);\n    i++;\n  }\n\n  return out;\n}\n","// tslint:disable:max-file-line-count\n/***\n * pause (not yet supported) (?string='hover') - event group name which pauses\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\n * carousel will not react to keyboard events\n * note: swiping not yet supported\n */\n/****\n * Problems:\n * 1) if we set an active slide via model changes, .active class remains on a\n * current slide.\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\n * 3) if first or last slide is active and noWrap is true, there should be\n * \"disabled\" class on the nav buttons.\n * 4) default interval should be equal 5000\n */\n\nimport {\n  Component, EventEmitter, Input, NgZone, OnDestroy, Output, AfterViewInit\n} from '@angular/core';\n\nimport { isBs3, LinkedList } from 'ngx-bootstrap/utils';\nimport { SlideComponent } from './slide.component';\nimport { CarouselConfig } from './carousel.config';\nimport { findLastIndex, chunkByNumber } from './utils';\nimport { SlideWithIndex, IndexedSlideList } from './models';\n\nexport enum Direction {\n  UNKNOWN,\n  NEXT,\n  PREV\n}\n\n/**\n * Base element to create carousel\n */\n@Component({\n  selector: 'carousel',\n  templateUrl: './carousel.component.html'\n})\nexport class CarouselComponent implements AfterViewInit, OnDestroy {\n  /* If `true` â carousel will not cycle continuously and will have hard stops (prevent looping) */\n  @Input() noWrap: boolean;\n  /*  If `true` â will disable pausing on carousel mouse hover */\n  @Input() noPause: boolean;\n  /*  If `true` â carousel-indicators are visible  */\n  @Input() showIndicators: boolean;\n  /* If value more then 1 â carousel works in multilist mode */\n  @Input() itemsPerSlide = 1;\n  /* If `true` â carousel shifts by one element. By default carousel shifts by number\n     of visible elements (itemsPerSlide field) */\n  @Input() singleSlideOffset = false;\n\n  /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n  @Output()\n  activeSlideChange: EventEmitter<number> = new EventEmitter<number>(false);\n\n  /** Will be emitted when active slides has been changed in multilist mode */\n  @Output()\n  slideRangeChange: EventEmitter<number[]> = new EventEmitter<number[]>();\n\n  /** Index of currently displayed slide(started for 0) */\n  @Input()\n  set activeSlide(index: number) {\n    if (this.multilist) {\n      return;\n    }\n    if (this._slides.length && index !== this._currentActiveSlide) {\n      this._select(index);\n    }\n  }\n\n  get activeSlide(): number {\n    return this._currentActiveSlide;\n  }\n\n  /* Index to start display slides from it */\n  @Input()\n  startFromIndex = 0;\n\n  /**\n   * Delay of item cycling in milliseconds. If false, carousel won't cycle\n   * automatically.\n   */\n  @Input()\n  get interval(): number {\n    return this._interval;\n  }\n\n  set interval(value: number) {\n    this._interval = value;\n    this.restartTimer();\n  }\n\n  get slides(): SlideComponent[] {\n    return this._slides.toArray();\n  }\n\n  // tslint:disable-next-line:no-any\n  protected currentInterval: any;\n  protected _currentActiveSlide: number;\n  protected _interval: number;\n  protected _slides: LinkedList<SlideComponent> = new LinkedList<SlideComponent>();\n  protected _chunkedSlides: SlideWithIndex[][];\n  protected _slidesWithIndexes: SlideWithIndex[];\n  protected _currentVisibleSlidesIndex = 0;\n  protected isPlaying: boolean;\n  protected destroyed = false;\n\n  get isBs4(): boolean {\n    return !isBs3();\n  }\n\n  constructor(config: CarouselConfig, private ngZone: NgZone) {\n    Object.assign(this, config);\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      if (this.multilist) {\n        this._chunkedSlides = chunkByNumber(\n          this.mapSlidesAndIndexes(),\n          this.itemsPerSlide\n        );\n        this.selectInitialSlides();\n      }\n    }, 0);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n  }\n\n  /**\n   * Adds new slide. If this slide is first in collection - set it as active\n   * and starts auto changing\n   * @param slide\n   */\n  addSlide(slide: SlideComponent): void {\n    this._slides.add(slide);\n\n    if (this.multilist && this._slides.length <= this.itemsPerSlide) {\n      slide.active = true;\n    }\n\n    if (!this.multilist && this._slides.length === 1) {\n      this._currentActiveSlide = undefined;\n      this.activeSlide = 0;\n      this.play();\n    }\n  }\n\n  /**\n   * Removes specified slide. If this slide is active - will roll to another\n   * slide\n   * @param slide\n   */\n  removeSlide(slide: SlideComponent): void {\n    const remIndex = this._slides.indexOf(slide);\n\n    if (this._currentActiveSlide === remIndex) {\n      // removing of active slide\n      let nextSlideIndex: number = void 0;\n      if (this._slides.length > 1) {\n        // if this slide last - will roll to first slide, if noWrap flag is\n        // FALSE or to previous, if noWrap is TRUE in case, if this slide in\n        // middle of collection, index of next slide is same to removed\n        nextSlideIndex = !this.isLast(remIndex)\n          ? remIndex\n          : this.noWrap ? remIndex - 1 : 0;\n      }\n      this._slides.remove(remIndex);\n\n      // prevents exception with changing some value after checking\n      setTimeout(() => {\n        this._select(nextSlideIndex);\n      }, 0);\n    } else {\n      this._slides.remove(remIndex);\n      const currentSlideIndex = this.getCurrentSlideIndex();\n      setTimeout(() => {\n        // after removing, need to actualize index of current active slide\n        this._currentActiveSlide = currentSlideIndex;\n        this.activeSlideChange.emit(this._currentActiveSlide);\n      }, 0);\n    }\n  }\n\n  /**\n   * Rolling to next slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n  nextSlide(force = false): void {\n    this.move(Direction.NEXT, force);\n  }\n\n  /**\n   * Rolling to previous slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n  previousSlide(force = false): void {\n    this.move(Direction.PREV, force);\n  }\n\n  getFirstVisibleIndex(): number {\n    return this.slides.findIndex(this.getActive);\n  }\n\n  getLastVisibleIndex(): number {\n    return findLastIndex(this.slides, this.getActive);\n  }\n\n  getActive = (slide: SlideComponent) => slide.active;\n\n  move(direction: Direction, force = false): void {\n    const firstVisibleIndex = this.getFirstVisibleIndex();\n    const lastVisibleIndex = this.getLastVisibleIndex();\n\n    if (this.noWrap) {\n      if (\n        direction === Direction.NEXT &&\n        this.isLast(lastVisibleIndex) ||\n        direction === Direction.PREV &&\n        firstVisibleIndex === 0\n      ) {\n        return;\n      }\n    }\n\n    if (!this.multilist) {\n      this.activeSlide = this.findNextSlideIndex(direction, force);\n    } else {\n      this.moveMultilist(direction);\n    }\n  }\n\n  /**\n   * Rolling to specified slide\n   * @param index: {number} index of slide, which must be shown\n   */\n  selectSlide(index: number): void {\n    if (!this.multilist) {\n      this.activeSlide = index;\n    } else {\n      this.selectSlideRange(index);\n    }\n  }\n\n  /**\n   * Starts a auto changing of slides\n   */\n  play(): void {\n    if (!this.isPlaying) {\n      this.isPlaying = true;\n      this.restartTimer();\n    }\n  }\n\n  /**\n   * Stops a auto changing of slides\n   */\n  pause(): void {\n    if (!this.noPause) {\n      this.isPlaying = false;\n      this.resetTimer();\n    }\n  }\n\n  /**\n   * Finds and returns index of currently displayed slide\n   */\n  getCurrentSlideIndex(): number {\n    return this._slides.findIndex(this.getActive);\n  }\n\n  /**\n   * Defines, whether the specified index is last in collection\n   * @param index\n   */\n  isLast(index: number): boolean {\n    return index + 1 >= this._slides.length;\n  }\n\n  /**\n   * Defines, whether the specified index is first in collection\n   * @param index\n   */\n  isFirst(index: number): boolean {\n    return index === 0;\n  }\n\n  private selectInitialSlides(): void {\n    const startIndex = this.startFromIndex <= this._slides.length\n      ? this.startFromIndex\n      : 0;\n\n    this.hideSlides();\n\n    if (this.singleSlideOffset) {\n      this._slidesWithIndexes = this.mapSlidesAndIndexes();\n\n      if (this._slides.length - startIndex < this.itemsPerSlide) {\n        const slidesToAppend = this._slidesWithIndexes.slice(0, startIndex);\n\n        this._slidesWithIndexes  = [\n          ...this._slidesWithIndexes,\n          ...slidesToAppend\n        ]\n        .slice(slidesToAppend.length)\n        .slice(0, this.itemsPerSlide);\n      } else {\n        this._slidesWithIndexes = this._slidesWithIndexes.slice(\n          startIndex,\n          startIndex + this.itemsPerSlide\n        );\n      }\n\n      this._slidesWithIndexes.forEach((slide: SlideWithIndex) => slide.item.active = true);\n      this.makeSlidesConsistent(this._slidesWithIndexes);\n    } else {\n      this.selectRangeByNestedIndex(startIndex);\n    }\n\n    this.slideRangeChange.emit(this.getVisibleIndexes());\n  }\n\n  /**\n   * Defines next slide index, depending of direction\n   * @param direction: Direction(UNKNOWN|PREV|NEXT)\n   * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n   *   return undefined if next slide require wrapping\n   */\n  private findNextSlideIndex(direction: Direction, force: boolean): number {\n    let nextSlideIndex = 0;\n\n    if (\n      !force &&\n      (this.isLast(this.activeSlide) &&\n        direction !== Direction.PREV &&\n        this.noWrap)\n    ) {\n      return undefined;\n    }\n\n    switch (direction) {\n      case Direction.NEXT:\n        // if this is last slide, not force, looping is disabled\n        // and need to going forward - select current slide, as a next\n        nextSlideIndex = !this.isLast(this._currentActiveSlide)\n          ? this._currentActiveSlide + 1\n          : !force && this.noWrap ? this._currentActiveSlide : 0;\n        break;\n      case Direction.PREV:\n        // if this is first slide, not force, looping is disabled\n        // and need to going backward - select current slide, as a next\n        nextSlideIndex =\n          this._currentActiveSlide > 0\n            ? this._currentActiveSlide - 1\n            : !force && this.noWrap\n            ? this._currentActiveSlide\n            : this._slides.length - 1;\n        break;\n      default:\n        throw new Error('Unknown direction');\n    }\n\n    return nextSlideIndex;\n  }\n\n  private mapSlidesAndIndexes(): SlideWithIndex[] {\n    return this.slides\n      .slice()\n      .map((slide: SlideComponent, index: number) => {\n        return {\n          index,\n          item: slide\n        };\n      });\n  }\n\n\n  private selectSlideRange(index: number): void {\n    if (this.isIndexInRange(index)) {\n      return;\n    }\n\n    this.hideSlides();\n\n    if (!this.singleSlideOffset) {\n      this.selectRangeByNestedIndex(index);\n    } else {\n      const startIndex = this.isIndexOnTheEdges(index)\n        ? index\n        : index - this.itemsPerSlide + 1;\n\n      const endIndex = this.isIndexOnTheEdges(index)\n        ? index + this.itemsPerSlide\n        : index + 1;\n\n      this._slidesWithIndexes = this.mapSlidesAndIndexes().slice(startIndex, endIndex);\n      this.makeSlidesConsistent(this._slidesWithIndexes);\n\n      this._slidesWithIndexes.forEach((slide: SlideWithIndex) => slide.item.active = true);\n    }\n\n    this.slideRangeChange.emit(this.getVisibleIndexes());\n  }\n\n  private selectRangeByNestedIndex(index: number): void {\n    const selectedRange = this._chunkedSlides\n      .map((slidesList, i: number) => {\n        return {\n          index: i,\n          list: slidesList\n        };\n      })\n      .find(\n        (slidesList: IndexedSlideList) => {\n          return slidesList.list.find(slide => slide.index === index) !== undefined;\n        }\n      );\n\n    this._currentVisibleSlidesIndex = selectedRange.index;\n\n    this._chunkedSlides[selectedRange.index].forEach((slide: SlideWithIndex) => {\n      slide.item.active = true;\n    });\n  }\n\n  private isIndexOnTheEdges(index: number): boolean {\n    return (\n      index + 1 - this.itemsPerSlide <= 0 ||\n      index + this.itemsPerSlide <= this._slides.length\n    );\n  }\n\n  private isIndexInRange(index: number): boolean {\n    if (this.singleSlideOffset) {\n      const visibleIndexes = this._slidesWithIndexes.map((slide: SlideWithIndex) => slide.index);\n\n      return visibleIndexes.indexOf(index) >= 0;\n    }\n\n    return (\n      index <= this.getLastVisibleIndex() &&\n      index >= this.getFirstVisibleIndex()\n    );\n  }\n\n  private hideSlides(): void {\n    this.slides.forEach((slide: SlideComponent) => slide.active = false);\n  }\n\n  private isVisibleSlideListLast(): boolean {\n    return this._currentVisibleSlidesIndex === this._chunkedSlides.length - 1;\n  }\n\n  private isVisibleSlideListFirst(): boolean {\n    return this._currentVisibleSlidesIndex === 0;\n  }\n\n  private moveSliderByOneItem(direction: Direction): void {\n    let firstVisibleIndex: number;\n    let lastVisibleIndex: number;\n    let indexToHide: number;\n    let indexToShow: number;\n\n    if (this.noWrap) {\n      firstVisibleIndex = this.getFirstVisibleIndex();\n      lastVisibleIndex = this.getLastVisibleIndex();\n\n      indexToHide = direction === Direction.NEXT\n        ? firstVisibleIndex\n        : lastVisibleIndex;\n\n      indexToShow = direction !== Direction.NEXT\n        ? firstVisibleIndex - 1\n        : !this.isLast(lastVisibleIndex)\n        ? lastVisibleIndex + 1 : 0;\n\n      this._slides.get(indexToHide).active = false;\n      this._slides.get(indexToShow).active = true;\n\n      const slidesToReorder = this.mapSlidesAndIndexes().filter(\n        (slide: SlideWithIndex) => slide.item.active\n      );\n\n      this.makeSlidesConsistent(slidesToReorder);\n\n      this.slideRangeChange.emit(this.getVisibleIndexes());\n    } else {\n      let displayedIndex: number;\n\n      firstVisibleIndex = this._slidesWithIndexes[0].index;\n      lastVisibleIndex = this._slidesWithIndexes[this._slidesWithIndexes.length - 1].index;\n\n      if (direction === Direction.NEXT) {\n        this._slidesWithIndexes.shift();\n\n        displayedIndex = this.isLast(lastVisibleIndex)\n          ? 0\n          : lastVisibleIndex + 1;\n\n        this._slidesWithIndexes.push({\n          index: displayedIndex,\n          item: this._slides.get(displayedIndex)\n        });\n      } else {\n        this._slidesWithIndexes.pop();\n        displayedIndex = this.isFirst(firstVisibleIndex)\n          ? this._slides.length - 1\n          : firstVisibleIndex - 1;\n\n        this._slidesWithIndexes = [{\n          index: displayedIndex,\n          item: this._slides.get(displayedIndex)\n        }, ...this._slidesWithIndexes];\n      }\n\n      this.hideSlides();\n\n      this._slidesWithIndexes.forEach(slide => slide.item.active = true);\n\n      this.makeSlidesConsistent(this._slidesWithIndexes);\n\n      this.slideRangeChange.emit(\n        this._slidesWithIndexes.map((slide: SlideWithIndex) => slide.index)\n      );\n    }\n  }\n\n  private makeSlidesConsistent = (slides: SlideWithIndex[]): void => {\n    slides.forEach((slide: SlideWithIndex, index: number) => slide.item.order = index);\n  }\n\n  private moveMultilist(direction: Direction): void {\n    if (this.singleSlideOffset) {\n      this.moveSliderByOneItem(direction);\n    } else {\n      this.hideSlides();\n\n      if (this.noWrap) {\n        this._currentVisibleSlidesIndex = direction === Direction.NEXT\n          ? this._currentVisibleSlidesIndex + 1\n          : this._currentVisibleSlidesIndex - 1;\n      } else {\n        if (direction === Direction.NEXT) {\n          this._currentVisibleSlidesIndex = this.isVisibleSlideListLast()\n            ? 0\n            : this._currentVisibleSlidesIndex + 1;\n        } else {\n          this._currentVisibleSlidesIndex = this.isVisibleSlideListFirst()\n            ? this._chunkedSlides.length - 1\n            : this._currentVisibleSlidesIndex - 1;\n        }\n      }\n\n      this._chunkedSlides[this._currentVisibleSlidesIndex].forEach(\n        (slide: SlideWithIndex) => slide.item.active = true\n      );\n\n      this.slideRangeChange.emit(this.getVisibleIndexes());\n    }\n  }\n\n  private getVisibleIndexes(): number[] {\n    if (!this.singleSlideOffset) {\n      return this._chunkedSlides[this._currentVisibleSlidesIndex]\n        .map((slide: SlideWithIndex) => slide.index);\n    } else {\n      return this._slidesWithIndexes.map((slide: SlideWithIndex) => slide.index);\n    }\n  }\n\n  /**\n   * Sets a slide, which specified through index, as active\n   * @param index\n   */\n  private _select(index: number): void {\n    if (isNaN(index)) {\n      this.pause();\n\n      return;\n    }\n\n    if (!this.multilist) {\n      const currentSlide = this._slides.get(this._currentActiveSlide);\n      if (currentSlide) {\n        currentSlide.active = false;\n      }\n    }\n\n    const nextSlide = this._slides.get(index);\n    if (nextSlide) {\n      this._currentActiveSlide = index;\n      nextSlide.active = true;\n      this.activeSlide = index;\n      this.activeSlideChange.emit(index);\n    }\n  }\n\n  /**\n   * Starts loop of auto changing of slides\n   */\n  private restartTimer() {\n    this.resetTimer();\n    const interval = +this.interval;\n    if (!isNaN(interval) && interval > 0) {\n      this.currentInterval = this.ngZone.runOutsideAngular(() => {\n        return setInterval(() => {\n          const nInterval = +this.interval;\n          this.ngZone.run(() => {\n            if (\n              this.isPlaying &&\n              !isNaN(this.interval) &&\n              nInterval > 0 &&\n              this.slides.length\n            ) {\n              this.nextSlide();\n            } else {\n              this.pause();\n            }\n          });\n        }, interval);\n      });\n    }\n  }\n\n  get multilist(): boolean {\n    return this.itemsPerSlide > 1;\n  }\n\n  /**\n   * Stops loop of auto changing of slides\n   */\n  private resetTimer(): void {\n    if (this.currentInterval) {\n      clearInterval(this.currentInterval);\n      this.currentInterval = void 0;\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnDestroy,\n  Input,\n  OnInit\n} from '@angular/core';\n\nimport { CarouselComponent } from './carousel.component';\n\n@Component({\n  selector: 'slide',\n  template: `\n    <div [class.active]=\"active\" class=\"item\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  host: {\n    '[attr.aria-hidden]': '!active'\n  }\n})\nexport class SlideComponent implements OnInit, OnDestroy {\n  /** Is current slide active */\n  @HostBinding('class.active')\n  @Input()\n  active: boolean;\n\n  @HostBinding('style.width') itemWidth = '100%';\n  @HostBinding('style.order') order = 0;\n\n  /** Wraps element by appropriate CSS classes */\n  @HostBinding('class.item')\n  @HostBinding('class.carousel-item')\n  addClass = true;\n\n  /** Link to Parent(container-collection) component */\n  protected carousel: CarouselComponent;\n\n  constructor(carousel: CarouselComponent) {\n    this.carousel = carousel;\n  }\n\n  /** Fires changes in container collection after adding a new slide instance */\n  ngOnInit(): void {\n    this.carousel.addSlide(this);\n    this.itemWidth = `${100 / this.carousel.itemsPerSlide}%`;\n  }\n\n  /** Fires changes in container collection after removing of this slide instance */\n  ngOnDestroy(): void {\n    this.carousel.removeSlide(this);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CarouselComponent } from './carousel.component';\nimport { SlideComponent } from './slide.component';\nimport { CarouselConfig } from './carousel.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SlideComponent, CarouselComponent],\n  exports: [SlideComponent, CarouselComponent],\n  providers: [CarouselConfig]\n})\nexport class CarouselModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: CarouselModule, providers: [] };\n  }\n}\n"]}